   1               		.file	"command.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.mousekey_console_help,"ax",@progbits
  12               	mousekey_console_help:
  13               	.LFB114:
  14               		.file 1 "../../tmk_core/common/command.c"
   1:../../tmk_core/common/command.c **** /*
   2:../../tmk_core/common/command.c **** Copyright 2011 Jun Wako <wakojun@gmail.com>
   3:../../tmk_core/common/command.c **** 
   4:../../tmk_core/common/command.c **** This program is free software: you can redistribute it and/or modify
   5:../../tmk_core/common/command.c **** it under the terms of the GNU General Public License as published by
   6:../../tmk_core/common/command.c **** the Free Software Foundation, either version 2 of the License, or
   7:../../tmk_core/common/command.c **** (at your option) any later version.
   8:../../tmk_core/common/command.c **** 
   9:../../tmk_core/common/command.c **** This program is distributed in the hope that it will be useful,
  10:../../tmk_core/common/command.c **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:../../tmk_core/common/command.c **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:../../tmk_core/common/command.c **** GNU General Public License for more details.
  13:../../tmk_core/common/command.c **** 
  14:../../tmk_core/common/command.c **** You should have received a copy of the GNU General Public License
  15:../../tmk_core/common/command.c **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:../../tmk_core/common/command.c **** */
  17:../../tmk_core/common/command.c **** #include <stdint.h>
  18:../../tmk_core/common/command.c **** #include <stdbool.h>
  19:../../tmk_core/common/command.c **** #include "wait.h"
  20:../../tmk_core/common/command.c **** #include "keycode.h"
  21:../../tmk_core/common/command.c **** #include "host.h"
  22:../../tmk_core/common/command.c **** #include "keymap.h"
  23:../../tmk_core/common/command.c **** #include "print.h"
  24:../../tmk_core/common/command.c **** #include "debug.h"
  25:../../tmk_core/common/command.c **** #include "util.h"
  26:../../tmk_core/common/command.c **** #include "timer.h"
  27:../../tmk_core/common/command.c **** #include "keyboard.h"
  28:../../tmk_core/common/command.c **** #include "bootloader.h"
  29:../../tmk_core/common/command.c **** #include "action_layer.h"
  30:../../tmk_core/common/command.c **** #include "action_util.h"
  31:../../tmk_core/common/command.c **** #include "eeconfig.h"
  32:../../tmk_core/common/command.c **** #include "sleep_led.h"
  33:../../tmk_core/common/command.c **** #include "led.h"
  34:../../tmk_core/common/command.c **** #include "command.h"
  35:../../tmk_core/common/command.c **** #include "backlight.h"
  36:../../tmk_core/common/command.c **** 
  37:../../tmk_core/common/command.c **** #ifdef MOUSEKEY_ENABLE
  38:../../tmk_core/common/command.c **** #include "mousekey.h"
  39:../../tmk_core/common/command.c **** #endif
  40:../../tmk_core/common/command.c **** 
  41:../../tmk_core/common/command.c **** #ifdef PROTOCOL_PJRC
  42:../../tmk_core/common/command.c **** #   include "usb_keyboard.h"
  43:../../tmk_core/common/command.c **** #   ifdef EXTRAKEY_ENABLE
  44:../../tmk_core/common/command.c **** #       include "usb_extra.h"
  45:../../tmk_core/common/command.c **** #   endif
  46:../../tmk_core/common/command.c **** #endif
  47:../../tmk_core/common/command.c **** 
  48:../../tmk_core/common/command.c **** #ifdef PROTOCOL_VUSB
  49:../../tmk_core/common/command.c **** #   include "usbdrv.h"
  50:../../tmk_core/common/command.c **** #endif
  51:../../tmk_core/common/command.c **** 
  52:../../tmk_core/common/command.c **** 
  53:../../tmk_core/common/command.c **** static bool command_common(uint8_t code);
  54:../../tmk_core/common/command.c **** static void command_common_help(void);
  55:../../tmk_core/common/command.c **** static bool command_console(uint8_t code);
  56:../../tmk_core/common/command.c **** static void command_console_help(void);
  57:../../tmk_core/common/command.c **** #ifdef MOUSEKEY_ENABLE
  58:../../tmk_core/common/command.c **** static bool mousekey_console(uint8_t code);
  59:../../tmk_core/common/command.c **** static void mousekey_console_help(void);
  60:../../tmk_core/common/command.c **** static uint8_t numkey2num(uint8_t code);
  61:../../tmk_core/common/command.c **** #endif
  62:../../tmk_core/common/command.c **** 
  63:../../tmk_core/common/command.c **** 
  64:../../tmk_core/common/command.c **** static void switch_default_layer(uint8_t layer);
  65:../../tmk_core/common/command.c **** 
  66:../../tmk_core/common/command.c **** 
  67:../../tmk_core/common/command.c **** command_state_t command_state = ONESHOT;
  68:../../tmk_core/common/command.c **** 
  69:../../tmk_core/common/command.c **** 
  70:../../tmk_core/common/command.c **** bool command_proc(uint8_t code)
  71:../../tmk_core/common/command.c **** {
  72:../../tmk_core/common/command.c ****     switch (command_state) {
  73:../../tmk_core/common/command.c ****         case ONESHOT:
  74:../../tmk_core/common/command.c ****             if (!IS_COMMAND())
  75:../../tmk_core/common/command.c ****                 return false;
  76:../../tmk_core/common/command.c ****             return (command_extra(code) || command_common(code));
  77:../../tmk_core/common/command.c ****             break;
  78:../../tmk_core/common/command.c ****         case CONSOLE:
  79:../../tmk_core/common/command.c ****             if (IS_COMMAND())
  80:../../tmk_core/common/command.c ****                 return (command_extra(code) || command_common(code));
  81:../../tmk_core/common/command.c ****             else
  82:../../tmk_core/common/command.c ****                 return (command_console_extra(code) || command_console(code));
  83:../../tmk_core/common/command.c ****             break;
  84:../../tmk_core/common/command.c **** #ifdef MOUSEKEY_ENABLE
  85:../../tmk_core/common/command.c ****         case MOUSEKEY:
  86:../../tmk_core/common/command.c ****             mousekey_console(code);
  87:../../tmk_core/common/command.c ****             break;
  88:../../tmk_core/common/command.c **** #endif
  89:../../tmk_core/common/command.c ****         default:
  90:../../tmk_core/common/command.c ****             command_state = ONESHOT;
  91:../../tmk_core/common/command.c ****             return false;
  92:../../tmk_core/common/command.c ****     }
  93:../../tmk_core/common/command.c ****     return true;
  94:../../tmk_core/common/command.c **** }
  95:../../tmk_core/common/command.c **** 
  96:../../tmk_core/common/command.c **** /* TODO: Refactoring is needed. */
  97:../../tmk_core/common/command.c **** /* This allows to define extra commands. return false when not processed. */
  98:../../tmk_core/common/command.c **** bool command_extra(uint8_t code) __attribute__ ((weak));
  99:../../tmk_core/common/command.c **** bool command_extra(uint8_t code)
 100:../../tmk_core/common/command.c **** {
 101:../../tmk_core/common/command.c ****     (void)code;
 102:../../tmk_core/common/command.c ****     return false;
 103:../../tmk_core/common/command.c **** }
 104:../../tmk_core/common/command.c **** 
 105:../../tmk_core/common/command.c **** bool command_console_extra(uint8_t code) __attribute__ ((weak));
 106:../../tmk_core/common/command.c **** bool command_console_extra(uint8_t code)
 107:../../tmk_core/common/command.c **** {
 108:../../tmk_core/common/command.c ****     (void)code;
 109:../../tmk_core/common/command.c ****     return false;
 110:../../tmk_core/common/command.c **** }
 111:../../tmk_core/common/command.c **** 
 112:../../tmk_core/common/command.c **** 
 113:../../tmk_core/common/command.c **** /***********************************************************
 114:../../tmk_core/common/command.c ****  * Command common
 115:../../tmk_core/common/command.c ****  ***********************************************************/
 116:../../tmk_core/common/command.c **** static void command_common_help(void)
 117:../../tmk_core/common/command.c **** {
 118:../../tmk_core/common/command.c ****     print("\n\t- Magic -\n"
 119:../../tmk_core/common/command.c ****           "d:	debug\n"
 120:../../tmk_core/common/command.c ****           "x:	debug matrix\n"
 121:../../tmk_core/common/command.c ****           "k:	debug keyboard\n"
 122:../../tmk_core/common/command.c ****           "m:	debug mouse\n"
 123:../../tmk_core/common/command.c ****           "v:	version\n"
 124:../../tmk_core/common/command.c ****           "s:	status\n"
 125:../../tmk_core/common/command.c ****           "c:	console mode\n"
 126:../../tmk_core/common/command.c ****           "0-4:	layer0-4(F10-F4)\n"
 127:../../tmk_core/common/command.c ****           "Paus:	bootloader\n"
 128:../../tmk_core/common/command.c **** 
 129:../../tmk_core/common/command.c **** #ifdef KEYBOARD_LOCK_ENABLE
 130:../../tmk_core/common/command.c ****           "Caps:	Lock\n"
 131:../../tmk_core/common/command.c **** #endif
 132:../../tmk_core/common/command.c **** 
 133:../../tmk_core/common/command.c **** #ifdef BOOTMAGIC_ENABLE
 134:../../tmk_core/common/command.c ****           "e:	eeprom\n"
 135:../../tmk_core/common/command.c **** #endif
 136:../../tmk_core/common/command.c **** 
 137:../../tmk_core/common/command.c **** #ifdef NKRO_ENABLE
 138:../../tmk_core/common/command.c ****           "n:	NKRO\n"
 139:../../tmk_core/common/command.c **** #endif
 140:../../tmk_core/common/command.c **** 
 141:../../tmk_core/common/command.c **** #ifdef SLEEP_LED_ENABLE
 142:../../tmk_core/common/command.c ****           "z:	sleep LED test\n"
 143:../../tmk_core/common/command.c **** #endif
 144:../../tmk_core/common/command.c ****     );
 145:../../tmk_core/common/command.c **** }
 146:../../tmk_core/common/command.c **** 
 147:../../tmk_core/common/command.c **** #ifdef BOOTMAGIC_ENABLE
 148:../../tmk_core/common/command.c **** static void print_eeconfig(void)
 149:../../tmk_core/common/command.c **** {
 150:../../tmk_core/common/command.c ****     print("default_layer: "); print_dec(eeconfig_read_default_layer()); print("\n");
 151:../../tmk_core/common/command.c **** 
 152:../../tmk_core/common/command.c ****     debug_config_t dc;
 153:../../tmk_core/common/command.c ****     dc.raw = eeconfig_read_debug();
 154:../../tmk_core/common/command.c ****     print("debug_config.raw: "); print_hex8(dc.raw); print("\n");
 155:../../tmk_core/common/command.c ****     print(".enable: "); print_dec(dc.enable); print("\n");
 156:../../tmk_core/common/command.c ****     print(".matrix: "); print_dec(dc.matrix); print("\n");
 157:../../tmk_core/common/command.c ****     print(".keyboard: "); print_dec(dc.keyboard); print("\n");
 158:../../tmk_core/common/command.c ****     print(".mouse: "); print_dec(dc.mouse); print("\n");
 159:../../tmk_core/common/command.c **** 
 160:../../tmk_core/common/command.c ****     keymap_config_t kc;
 161:../../tmk_core/common/command.c ****     kc.raw = eeconfig_read_keymap();
 162:../../tmk_core/common/command.c ****     print("keymap_config.raw: "); print_hex8(kc.raw); print("\n");
 163:../../tmk_core/common/command.c ****     print(".swap_control_capslock: "); print_dec(kc.swap_control_capslock); print("\n");
 164:../../tmk_core/common/command.c ****     print(".capslock_to_control: "); print_dec(kc.capslock_to_control); print("\n");
 165:../../tmk_core/common/command.c ****     print(".swap_lalt_lgui: "); print_dec(kc.swap_lalt_lgui); print("\n");
 166:../../tmk_core/common/command.c ****     print(".swap_ralt_rgui: "); print_dec(kc.swap_ralt_rgui); print("\n");
 167:../../tmk_core/common/command.c ****     print(".no_gui: "); print_dec(kc.no_gui); print("\n");
 168:../../tmk_core/common/command.c ****     print(".swap_grave_esc: "); print_dec(kc.swap_grave_esc); print("\n");
 169:../../tmk_core/common/command.c ****     print(".swap_backslash_backspace: "); print_dec(kc.swap_backslash_backspace); print("\n");
 170:../../tmk_core/common/command.c ****     print(".nkro: "); print_dec(kc.nkro); print("\n");
 171:../../tmk_core/common/command.c **** 
 172:../../tmk_core/common/command.c **** #ifdef BACKLIGHT_ENABLE
 173:../../tmk_core/common/command.c ****     backlight_config_t bc;
 174:../../tmk_core/common/command.c ****     bc.raw = eeconfig_read_backlight();
 175:../../tmk_core/common/command.c ****     print("backlight_config.raw: "); print_hex8(bc.raw); print("\n");
 176:../../tmk_core/common/command.c ****     print(".enable: "); print_dec(bc.enable); print("\n");
 177:../../tmk_core/common/command.c ****     print(".level: "); print_dec(bc.level); print("\n");
 178:../../tmk_core/common/command.c **** #endif
 179:../../tmk_core/common/command.c **** }
 180:../../tmk_core/common/command.c **** #endif
 181:../../tmk_core/common/command.c **** 
 182:../../tmk_core/common/command.c **** static bool command_common(uint8_t code)
 183:../../tmk_core/common/command.c **** {
 184:../../tmk_core/common/command.c **** #ifdef KEYBOARD_LOCK_ENABLE
 185:../../tmk_core/common/command.c ****     static host_driver_t *host_driver = 0;
 186:../../tmk_core/common/command.c **** #endif
 187:../../tmk_core/common/command.c **** #ifdef SLEEP_LED_ENABLE
 188:../../tmk_core/common/command.c ****     static bool sleep_led_test = false;
 189:../../tmk_core/common/command.c **** #endif
 190:../../tmk_core/common/command.c ****     switch (code) {
 191:../../tmk_core/common/command.c **** #ifdef SLEEP_LED_ENABLE
 192:../../tmk_core/common/command.c ****         case KC_Z:
 193:../../tmk_core/common/command.c ****             // test breathing sleep LED
 194:../../tmk_core/common/command.c ****             print("Sleep LED test\n");
 195:../../tmk_core/common/command.c ****             if (sleep_led_test) {
 196:../../tmk_core/common/command.c ****                 sleep_led_disable();
 197:../../tmk_core/common/command.c ****                 led_set(host_keyboard_leds());
 198:../../tmk_core/common/command.c ****             } else {
 199:../../tmk_core/common/command.c ****                 sleep_led_enable();
 200:../../tmk_core/common/command.c ****             }
 201:../../tmk_core/common/command.c ****             sleep_led_test = !sleep_led_test;
 202:../../tmk_core/common/command.c ****             break;
 203:../../tmk_core/common/command.c **** #endif
 204:../../tmk_core/common/command.c **** #ifdef BOOTMAGIC_ENABLE
 205:../../tmk_core/common/command.c ****         case KC_E:
 206:../../tmk_core/common/command.c ****             print("eeconfig:\n");
 207:../../tmk_core/common/command.c ****             print_eeconfig();
 208:../../tmk_core/common/command.c ****             break;
 209:../../tmk_core/common/command.c **** #endif
 210:../../tmk_core/common/command.c **** #ifdef KEYBOARD_LOCK_ENABLE
 211:../../tmk_core/common/command.c ****         case KC_CAPSLOCK:
 212:../../tmk_core/common/command.c ****             if (host_get_driver()) {
 213:../../tmk_core/common/command.c ****                 host_driver = host_get_driver();
 214:../../tmk_core/common/command.c ****                 clear_keyboard();
 215:../../tmk_core/common/command.c ****                 host_set_driver(0);
 216:../../tmk_core/common/command.c ****                 print("Locked.\n");
 217:../../tmk_core/common/command.c ****             } else {
 218:../../tmk_core/common/command.c ****                 host_set_driver(host_driver);
 219:../../tmk_core/common/command.c ****                 print("Unlocked.\n");
 220:../../tmk_core/common/command.c ****             }
 221:../../tmk_core/common/command.c ****             break;
 222:../../tmk_core/common/command.c **** #endif
 223:../../tmk_core/common/command.c ****         case KC_H:
 224:../../tmk_core/common/command.c ****         case KC_SLASH: /* ? */
 225:../../tmk_core/common/command.c ****             command_common_help();
 226:../../tmk_core/common/command.c ****             break;
 227:../../tmk_core/common/command.c ****         case KC_C:
 228:../../tmk_core/common/command.c ****             debug_matrix   = false;
 229:../../tmk_core/common/command.c ****             debug_keyboard = false;
 230:../../tmk_core/common/command.c ****             debug_mouse    = false;
 231:../../tmk_core/common/command.c ****             debug_enable   = false;
 232:../../tmk_core/common/command.c ****             command_console_help();
 233:../../tmk_core/common/command.c ****             print("C> ");
 234:../../tmk_core/common/command.c ****             command_state = CONSOLE;
 235:../../tmk_core/common/command.c ****             break;
 236:../../tmk_core/common/command.c ****         case KC_PAUSE:
 237:../../tmk_core/common/command.c ****             clear_keyboard();
 238:../../tmk_core/common/command.c ****             print("\n\nbootloader... ");
 239:../../tmk_core/common/command.c ****             wait_ms(1000);
 240:../../tmk_core/common/command.c ****             bootloader_jump(); // not return
 241:../../tmk_core/common/command.c ****             break;
 242:../../tmk_core/common/command.c ****         case KC_D:
 243:../../tmk_core/common/command.c ****             if (debug_enable) {
 244:../../tmk_core/common/command.c ****                 print("\ndebug: off\n");
 245:../../tmk_core/common/command.c ****                 debug_matrix   = false;
 246:../../tmk_core/common/command.c ****                 debug_keyboard = false;
 247:../../tmk_core/common/command.c ****                 debug_mouse    = false;
 248:../../tmk_core/common/command.c ****                 debug_enable   = false;
 249:../../tmk_core/common/command.c ****             } else {
 250:../../tmk_core/common/command.c ****                 print("\ndebug: on\n");
 251:../../tmk_core/common/command.c ****                 debug_enable   = true;
 252:../../tmk_core/common/command.c ****             }
 253:../../tmk_core/common/command.c ****             break;
 254:../../tmk_core/common/command.c ****         case KC_X: // debug matrix toggle
 255:../../tmk_core/common/command.c ****             debug_matrix = !debug_matrix;
 256:../../tmk_core/common/command.c ****             if (debug_matrix) {
 257:../../tmk_core/common/command.c ****                 print("\nmatrix: on\n");
 258:../../tmk_core/common/command.c ****                 debug_enable = true;
 259:../../tmk_core/common/command.c ****             } else {
 260:../../tmk_core/common/command.c ****                 print("\nmatrix: off\n");
 261:../../tmk_core/common/command.c ****             }
 262:../../tmk_core/common/command.c ****             break;
 263:../../tmk_core/common/command.c ****         case KC_K: // debug keyboard toggle
 264:../../tmk_core/common/command.c ****             debug_keyboard = !debug_keyboard;
 265:../../tmk_core/common/command.c ****             if (debug_keyboard) {
 266:../../tmk_core/common/command.c ****                 print("\nkeyboard: on\n");
 267:../../tmk_core/common/command.c ****                 debug_enable = true;
 268:../../tmk_core/common/command.c ****             } else {
 269:../../tmk_core/common/command.c ****                 print("\nkeyboard: off\n");
 270:../../tmk_core/common/command.c ****             }
 271:../../tmk_core/common/command.c ****             break;
 272:../../tmk_core/common/command.c ****         case KC_M: // debug mouse toggle
 273:../../tmk_core/common/command.c ****             debug_mouse = !debug_mouse;
 274:../../tmk_core/common/command.c ****             if (debug_mouse) {
 275:../../tmk_core/common/command.c ****                 print("\nmouse: on\n");
 276:../../tmk_core/common/command.c ****                 debug_enable = true;
 277:../../tmk_core/common/command.c ****             } else {
 278:../../tmk_core/common/command.c ****                 print("\nmouse: off\n");
 279:../../tmk_core/common/command.c ****             }
 280:../../tmk_core/common/command.c ****             break;
 281:../../tmk_core/common/command.c ****         case KC_V: // print version & information
 282:../../tmk_core/common/command.c ****             print("\n\t- Version -\n");
 283:../../tmk_core/common/command.c ****             print("DESC: " STR(DESCRIPTION) "\n");
 284:../../tmk_core/common/command.c ****             print("VID: " STR(VENDOR_ID) "(" STR(MANUFACTURER) ") "
 285:../../tmk_core/common/command.c ****                   "PID: " STR(PRODUCT_ID) "(" STR(PRODUCT) ") "
 286:../../tmk_core/common/command.c ****                   "VER: " STR(DEVICE_VER) "\n");
 287:../../tmk_core/common/command.c ****             print("BUILD: " STR(VERSION) " (" __TIME__ " " __DATE__ ")\n");
 288:../../tmk_core/common/command.c ****             /* build options */
 289:../../tmk_core/common/command.c ****             print("OPTIONS:"
 290:../../tmk_core/common/command.c **** #ifdef PROTOCOL_PJRC
 291:../../tmk_core/common/command.c ****             " PJRC"
 292:../../tmk_core/common/command.c **** #endif
 293:../../tmk_core/common/command.c **** #ifdef PROTOCOL_LUFA
 294:../../tmk_core/common/command.c ****             " LUFA"
 295:../../tmk_core/common/command.c **** #endif
 296:../../tmk_core/common/command.c **** #ifdef PROTOCOL_VUSB
 297:../../tmk_core/common/command.c ****             " VUSB"
 298:../../tmk_core/common/command.c **** #endif
 299:../../tmk_core/common/command.c **** #ifdef PROTOCOL_CHIBIOS
 300:../../tmk_core/common/command.c ****             " CHIBIOS"
 301:../../tmk_core/common/command.c **** #endif
 302:../../tmk_core/common/command.c **** #ifdef BOOTMAGIC_ENABLE
 303:../../tmk_core/common/command.c ****             " BOOTMAGIC"
 304:../../tmk_core/common/command.c **** #endif
 305:../../tmk_core/common/command.c **** #ifdef MOUSEKEY_ENABLE
 306:../../tmk_core/common/command.c ****             " MOUSEKEY"
 307:../../tmk_core/common/command.c **** #endif
 308:../../tmk_core/common/command.c **** #ifdef EXTRAKEY_ENABLE
 309:../../tmk_core/common/command.c ****             " EXTRAKEY"
 310:../../tmk_core/common/command.c **** #endif
 311:../../tmk_core/common/command.c **** #ifdef CONSOLE_ENABLE
 312:../../tmk_core/common/command.c ****             " CONSOLE"
 313:../../tmk_core/common/command.c **** #endif
 314:../../tmk_core/common/command.c **** #ifdef COMMAND_ENABLE
 315:../../tmk_core/common/command.c ****             " COMMAND"
 316:../../tmk_core/common/command.c **** #endif
 317:../../tmk_core/common/command.c **** #ifdef NKRO_ENABLE
 318:../../tmk_core/common/command.c ****             " NKRO"
 319:../../tmk_core/common/command.c **** #endif
 320:../../tmk_core/common/command.c **** #ifdef KEYMAP_SECTION_ENABLE
 321:../../tmk_core/common/command.c ****             " KEYMAP_SECTION"
 322:../../tmk_core/common/command.c **** #endif
 323:../../tmk_core/common/command.c ****             " " STR(BOOTLOADER_SIZE) "\n");
 324:../../tmk_core/common/command.c **** 
 325:../../tmk_core/common/command.c ****             print("GCC: " STR(__GNUC__) "." STR(__GNUC_MINOR__) "." STR(__GNUC_PATCHLEVEL__)
 326:../../tmk_core/common/command.c **** #if defined(__AVR__)
 327:../../tmk_core/common/command.c ****                   " AVR-LIBC: " __AVR_LIBC_VERSION_STRING__
 328:../../tmk_core/common/command.c ****                   " AVR_ARCH: avr" STR(__AVR_ARCH__) "\n");
 329:../../tmk_core/common/command.c **** #elif defined(__arm__)
 330:../../tmk_core/common/command.c ****             // TODO
 331:../../tmk_core/common/command.c ****             );
 332:../../tmk_core/common/command.c **** #endif
 333:../../tmk_core/common/command.c ****             break;
 334:../../tmk_core/common/command.c ****         case KC_S:
 335:../../tmk_core/common/command.c ****             print("\n\t- Status -\n");
 336:../../tmk_core/common/command.c ****             print_val_hex8(host_keyboard_leds());
 337:../../tmk_core/common/command.c ****             print_val_hex8(keyboard_protocol);
 338:../../tmk_core/common/command.c ****             print_val_hex8(keyboard_idle);
 339:../../tmk_core/common/command.c **** #ifdef NKRO_ENABLE
 340:../../tmk_core/common/command.c ****             print_val_hex8(keyboard_nkro);
 341:../../tmk_core/common/command.c **** #endif
 342:../../tmk_core/common/command.c ****             print_val_hex32(timer_read32());
 343:../../tmk_core/common/command.c **** 
 344:../../tmk_core/common/command.c **** #ifdef PROTOCOL_PJRC
 345:../../tmk_core/common/command.c ****             print_val_hex8(UDCON);
 346:../../tmk_core/common/command.c ****             print_val_hex8(UDIEN);
 347:../../tmk_core/common/command.c ****             print_val_hex8(UDINT);
 348:../../tmk_core/common/command.c ****             print_val_hex8(usb_keyboard_leds);
 349:../../tmk_core/common/command.c ****             print_val_hex8(usb_keyboard_idle_count);
 350:../../tmk_core/common/command.c **** #endif
 351:../../tmk_core/common/command.c **** 
 352:../../tmk_core/common/command.c **** #ifdef PROTOCOL_PJRC
 353:../../tmk_core/common/command.c **** #   if USB_COUNT_SOF
 354:../../tmk_core/common/command.c ****             print_val_hex8(usbSofCount);
 355:../../tmk_core/common/command.c **** #   endif
 356:../../tmk_core/common/command.c **** #endif
 357:../../tmk_core/common/command.c ****             break;
 358:../../tmk_core/common/command.c **** #ifdef NKRO_ENABLE
 359:../../tmk_core/common/command.c ****         case KC_N:
 360:../../tmk_core/common/command.c ****             clear_keyboard(); //Prevents stuck keys.
 361:../../tmk_core/common/command.c ****             keyboard_nkro = !keyboard_nkro;
 362:../../tmk_core/common/command.c ****             if (keyboard_nkro) {
 363:../../tmk_core/common/command.c ****                 print("NKRO: on\n");
 364:../../tmk_core/common/command.c ****             } else {
 365:../../tmk_core/common/command.c ****                 print("NKRO: off\n");
 366:../../tmk_core/common/command.c ****             }
 367:../../tmk_core/common/command.c ****             break;
 368:../../tmk_core/common/command.c **** #endif
 369:../../tmk_core/common/command.c ****         case KC_ESC:
 370:../../tmk_core/common/command.c ****         case KC_GRV:
 371:../../tmk_core/common/command.c ****         case KC_0:
 372:../../tmk_core/common/command.c ****         case KC_F10:
 373:../../tmk_core/common/command.c ****             switch_default_layer(0);
 374:../../tmk_core/common/command.c ****             break;
 375:../../tmk_core/common/command.c ****         case KC_1 ... KC_9:
 376:../../tmk_core/common/command.c ****             switch_default_layer((code - KC_1) + 1);
 377:../../tmk_core/common/command.c ****             break;
 378:../../tmk_core/common/command.c ****         case KC_F1 ... KC_F9:
 379:../../tmk_core/common/command.c ****             switch_default_layer((code - KC_F1) + 1);
 380:../../tmk_core/common/command.c ****             break;
 381:../../tmk_core/common/command.c ****         default:
 382:../../tmk_core/common/command.c ****             print("?");
 383:../../tmk_core/common/command.c ****             return false;
 384:../../tmk_core/common/command.c ****     }
 385:../../tmk_core/common/command.c ****     return true;
 386:../../tmk_core/common/command.c **** }
 387:../../tmk_core/common/command.c **** 
 388:../../tmk_core/common/command.c **** 
 389:../../tmk_core/common/command.c **** /***********************************************************
 390:../../tmk_core/common/command.c ****  * Command console
 391:../../tmk_core/common/command.c ****  ***********************************************************/
 392:../../tmk_core/common/command.c **** static void command_console_help(void)
 393:../../tmk_core/common/command.c **** {
 394:../../tmk_core/common/command.c ****     print("\n\t- Console -\n"
 395:../../tmk_core/common/command.c ****           "ESC/q:	quit\n"
 396:../../tmk_core/common/command.c **** #ifdef MOUSEKEY_ENABLE
 397:../../tmk_core/common/command.c ****           "m:	mousekey\n"
 398:../../tmk_core/common/command.c **** #endif
 399:../../tmk_core/common/command.c ****     );
 400:../../tmk_core/common/command.c **** }
 401:../../tmk_core/common/command.c **** 
 402:../../tmk_core/common/command.c **** static bool command_console(uint8_t code)
 403:../../tmk_core/common/command.c **** {
 404:../../tmk_core/common/command.c ****     switch (code) {
 405:../../tmk_core/common/command.c ****         case KC_H:
 406:../../tmk_core/common/command.c ****         case KC_SLASH: /* ? */
 407:../../tmk_core/common/command.c ****             command_console_help();
 408:../../tmk_core/common/command.c ****             break;
 409:../../tmk_core/common/command.c ****         case KC_Q:
 410:../../tmk_core/common/command.c ****         case KC_ESC:
 411:../../tmk_core/common/command.c ****             command_state = ONESHOT;
 412:../../tmk_core/common/command.c ****             return false;
 413:../../tmk_core/common/command.c **** #ifdef MOUSEKEY_ENABLE
 414:../../tmk_core/common/command.c ****         case KC_M:
 415:../../tmk_core/common/command.c ****             mousekey_console_help();
 416:../../tmk_core/common/command.c ****             print("M> ");
 417:../../tmk_core/common/command.c ****             command_state = MOUSEKEY;
 418:../../tmk_core/common/command.c ****             return true;
 419:../../tmk_core/common/command.c **** #endif
 420:../../tmk_core/common/command.c ****         default:
 421:../../tmk_core/common/command.c ****             print("?");
 422:../../tmk_core/common/command.c ****             return false;
 423:../../tmk_core/common/command.c ****     }
 424:../../tmk_core/common/command.c ****     print("C> ");
 425:../../tmk_core/common/command.c ****     return true;
 426:../../tmk_core/common/command.c **** }
 427:../../tmk_core/common/command.c **** 
 428:../../tmk_core/common/command.c **** 
 429:../../tmk_core/common/command.c **** #ifdef MOUSEKEY_ENABLE
 430:../../tmk_core/common/command.c **** /***********************************************************
 431:../../tmk_core/common/command.c ****  * Mousekey console
 432:../../tmk_core/common/command.c ****  ***********************************************************/
 433:../../tmk_core/common/command.c **** static uint8_t mousekey_param = 0;
 434:../../tmk_core/common/command.c **** 
 435:../../tmk_core/common/command.c **** static void mousekey_param_print(void)
 436:../../tmk_core/common/command.c **** {
 437:../../tmk_core/common/command.c ****     print("\n\t- Values -\n");
 438:../../tmk_core/common/command.c ****     print("1: delay(*10ms): "); pdec(mk_delay); print("\n");
 439:../../tmk_core/common/command.c ****     print("2: interval(ms): "); pdec(mk_interval); print("\n");
 440:../../tmk_core/common/command.c ****     print("3: max_speed: "); pdec(mk_max_speed); print("\n");
 441:../../tmk_core/common/command.c ****     print("4: time_to_max: "); pdec(mk_time_to_max); print("\n");
 442:../../tmk_core/common/command.c ****     print("5: wheel_max_speed: "); pdec(mk_wheel_max_speed); print("\n");
 443:../../tmk_core/common/command.c ****     print("6: wheel_time_to_max: "); pdec(mk_wheel_time_to_max); print("\n");
 444:../../tmk_core/common/command.c **** }
 445:../../tmk_core/common/command.c **** 
 446:../../tmk_core/common/command.c **** //#define PRINT_SET_VAL(v)  print(#v " = "); print_dec(v); print("\n");
 447:../../tmk_core/common/command.c **** #define PRINT_SET_VAL(v)  xprintf(#v " = %d\n", (v))
 448:../../tmk_core/common/command.c **** static void mousekey_param_inc(uint8_t param, uint8_t inc)
 449:../../tmk_core/common/command.c **** {
 450:../../tmk_core/common/command.c ****     switch (param) {
 451:../../tmk_core/common/command.c ****         case 1:
 452:../../tmk_core/common/command.c ****             if (mk_delay + inc < UINT8_MAX)
 453:../../tmk_core/common/command.c ****                 mk_delay += inc;
 454:../../tmk_core/common/command.c ****             else
 455:../../tmk_core/common/command.c ****                 mk_delay = UINT8_MAX;
 456:../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_delay);
 457:../../tmk_core/common/command.c ****             break;
 458:../../tmk_core/common/command.c ****         case 2:
 459:../../tmk_core/common/command.c ****             if (mk_interval + inc < UINT8_MAX)
 460:../../tmk_core/common/command.c ****                 mk_interval += inc;
 461:../../tmk_core/common/command.c ****             else
 462:../../tmk_core/common/command.c ****                 mk_interval = UINT8_MAX;
 463:../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_interval);
 464:../../tmk_core/common/command.c ****             break;
 465:../../tmk_core/common/command.c ****         case 3:
 466:../../tmk_core/common/command.c ****             if (mk_max_speed + inc < UINT8_MAX)
 467:../../tmk_core/common/command.c ****                 mk_max_speed += inc;
 468:../../tmk_core/common/command.c ****             else
 469:../../tmk_core/common/command.c ****                 mk_max_speed = UINT8_MAX;
 470:../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_max_speed);
 471:../../tmk_core/common/command.c ****             break;
 472:../../tmk_core/common/command.c ****         case 4:
 473:../../tmk_core/common/command.c ****             if (mk_time_to_max + inc < UINT8_MAX)
 474:../../tmk_core/common/command.c ****                 mk_time_to_max += inc;
 475:../../tmk_core/common/command.c ****             else
 476:../../tmk_core/common/command.c ****                 mk_time_to_max = UINT8_MAX;
 477:../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_time_to_max);
 478:../../tmk_core/common/command.c ****             break;
 479:../../tmk_core/common/command.c ****         case 5:
 480:../../tmk_core/common/command.c ****             if (mk_wheel_max_speed + inc < UINT8_MAX)
 481:../../tmk_core/common/command.c ****                 mk_wheel_max_speed += inc;
 482:../../tmk_core/common/command.c ****             else
 483:../../tmk_core/common/command.c ****                 mk_wheel_max_speed = UINT8_MAX;
 484:../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_wheel_max_speed);
 485:../../tmk_core/common/command.c ****             break;
 486:../../tmk_core/common/command.c ****         case 6:
 487:../../tmk_core/common/command.c ****             if (mk_wheel_time_to_max + inc < UINT8_MAX)
 488:../../tmk_core/common/command.c ****                 mk_wheel_time_to_max += inc;
 489:../../tmk_core/common/command.c ****             else
 490:../../tmk_core/common/command.c ****                 mk_wheel_time_to_max = UINT8_MAX;
 491:../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_wheel_time_to_max);
 492:../../tmk_core/common/command.c ****             break;
 493:../../tmk_core/common/command.c ****     }
 494:../../tmk_core/common/command.c **** }
 495:../../tmk_core/common/command.c **** 
 496:../../tmk_core/common/command.c **** static void mousekey_param_dec(uint8_t param, uint8_t dec)
 497:../../tmk_core/common/command.c **** {
 498:../../tmk_core/common/command.c ****     switch (param) {
 499:../../tmk_core/common/command.c ****         case 1:
 500:../../tmk_core/common/command.c ****             if (mk_delay > dec)
 501:../../tmk_core/common/command.c ****                 mk_delay -= dec;
 502:../../tmk_core/common/command.c ****             else
 503:../../tmk_core/common/command.c ****                 mk_delay = 0;
 504:../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_delay);
 505:../../tmk_core/common/command.c ****             break;
 506:../../tmk_core/common/command.c ****         case 2:
 507:../../tmk_core/common/command.c ****             if (mk_interval > dec)
 508:../../tmk_core/common/command.c ****                 mk_interval -= dec;
 509:../../tmk_core/common/command.c ****             else
 510:../../tmk_core/common/command.c ****                 mk_interval = 0;
 511:../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_interval);
 512:../../tmk_core/common/command.c ****             break;
 513:../../tmk_core/common/command.c ****         case 3:
 514:../../tmk_core/common/command.c ****             if (mk_max_speed > dec)
 515:../../tmk_core/common/command.c ****                 mk_max_speed -= dec;
 516:../../tmk_core/common/command.c ****             else
 517:../../tmk_core/common/command.c ****                 mk_max_speed = 0;
 518:../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_max_speed);
 519:../../tmk_core/common/command.c ****             break;
 520:../../tmk_core/common/command.c ****         case 4:
 521:../../tmk_core/common/command.c ****             if (mk_time_to_max > dec)
 522:../../tmk_core/common/command.c ****                 mk_time_to_max -= dec;
 523:../../tmk_core/common/command.c ****             else
 524:../../tmk_core/common/command.c ****                 mk_time_to_max = 0;
 525:../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_time_to_max);
 526:../../tmk_core/common/command.c ****             break;
 527:../../tmk_core/common/command.c ****         case 5:
 528:../../tmk_core/common/command.c ****             if (mk_wheel_max_speed > dec)
 529:../../tmk_core/common/command.c ****                 mk_wheel_max_speed -= dec;
 530:../../tmk_core/common/command.c ****             else
 531:../../tmk_core/common/command.c ****                 mk_wheel_max_speed = 0;
 532:../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_wheel_max_speed);
 533:../../tmk_core/common/command.c ****             break;
 534:../../tmk_core/common/command.c ****         case 6:
 535:../../tmk_core/common/command.c ****             if (mk_wheel_time_to_max > dec)
 536:../../tmk_core/common/command.c ****                 mk_wheel_time_to_max -= dec;
 537:../../tmk_core/common/command.c ****             else
 538:../../tmk_core/common/command.c ****                 mk_wheel_time_to_max = 0;
 539:../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_wheel_time_to_max);
 540:../../tmk_core/common/command.c ****             break;
 541:../../tmk_core/common/command.c ****     }
 542:../../tmk_core/common/command.c **** }
 543:../../tmk_core/common/command.c **** 
 544:../../tmk_core/common/command.c **** static void mousekey_console_help(void)
 545:../../tmk_core/common/command.c **** {
  15               		.loc 1 545 0
  16               		.cfi_startproc
  17               	/* prologue: function */
  18               	/* frame size = 0 */
  19               	/* stack size = 0 */
  20               	.L__stack_usage = 0
 546:../../tmk_core/common/command.c ****     print("\n\t- Mousekey -\n"
  21               		.loc 1 546 0
  22 0000 80E0      		ldi r24,lo8(__c.5324)
  23 0002 90E0      		ldi r25,hi8(__c.5324)
  24 0004 0E94 0000 		call xputs
  25               	.LVL0:
 547:../../tmk_core/common/command.c ****           "ESC/q:	quit\n"
 548:../../tmk_core/common/command.c ****           "1:	delay(*10ms)\n"
 549:../../tmk_core/common/command.c ****           "2:	interval(ms)\n"
 550:../../tmk_core/common/command.c ****           "3:	max_speed\n"
 551:../../tmk_core/common/command.c ****           "4:	time_to_max\n"
 552:../../tmk_core/common/command.c ****           "5:	wheel_max_speed\n"
 553:../../tmk_core/common/command.c ****           "6:	wheel_time_to_max\n"
 554:../../tmk_core/common/command.c ****           "\n"
 555:../../tmk_core/common/command.c ****           "p:	print values\n"
 556:../../tmk_core/common/command.c ****           "d:	set defaults\n"
 557:../../tmk_core/common/command.c ****           "up:	+1\n"
 558:../../tmk_core/common/command.c ****           "down:	-1\n"
 559:../../tmk_core/common/command.c ****           "pgup:	+10\n"
 560:../../tmk_core/common/command.c ****           "pgdown:	-10\n"
 561:../../tmk_core/common/command.c ****           "\n"
 562:../../tmk_core/common/command.c ****           "speed = delta * max_speed * (repeat / time_to_max)\n");
 563:../../tmk_core/common/command.c ****     xprintf("where delta: cursor=%d, wheel=%d\n" 
  26               		.loc 1 563 0
  27 0008 1F92      		push __zero_reg__
  28               	.LCFI0:
  29               		.cfi_def_cfa_offset 3
  30 000a 81E0      		ldi r24,lo8(1)
  31 000c 8F93      		push r24
  32               	.LCFI1:
  33               		.cfi_def_cfa_offset 4
  34 000e 1F92      		push __zero_reg__
  35               	.LCFI2:
  36               		.cfi_def_cfa_offset 5
  37 0010 85E0      		ldi r24,lo8(5)
  38 0012 8F93      		push r24
  39               	.LCFI3:
  40               		.cfi_def_cfa_offset 6
  41 0014 80E0      		ldi r24,lo8(__c.5326)
  42 0016 90E0      		ldi r25,hi8(__c.5326)
  43 0018 9F93      		push r25
  44               	.LCFI4:
  45               		.cfi_def_cfa_offset 7
  46 001a 8F93      		push r24
  47               	.LCFI5:
  48               		.cfi_def_cfa_offset 8
  49 001c 0E94 0000 		call __xprintf
  50               	.LVL1:
 564:../../tmk_core/common/command.c ****             "See http://en.wikipedia.org/wiki/Mouse_keys\n", MOUSEKEY_MOVE_DELTA,  MOUSEKEY_WHEEL_D
 565:../../tmk_core/common/command.c **** }
  51               		.loc 1 565 0
  52 0020 0F90      		pop __tmp_reg__
  53 0022 0F90      		pop __tmp_reg__
  54 0024 0F90      		pop __tmp_reg__
  55 0026 0F90      		pop __tmp_reg__
  56 0028 0F90      		pop __tmp_reg__
  57 002a 0F90      		pop __tmp_reg__
  58               	.LCFI6:
  59               		.cfi_def_cfa_offset 2
  60 002c 0895      		ret
  61               		.cfi_endproc
  62               	.LFE114:
  64               		.section	.text.mousekey_param_inc,"ax",@progbits
  66               	mousekey_param_inc:
  67               	.LFB112:
 449:../../tmk_core/common/command.c ****     switch (param) {
  68               		.loc 1 449 0
  69               		.cfi_startproc
  70               	.LVL2:
  71               	/* prologue: function */
  72               	/* frame size = 0 */
  73               	/* stack size = 0 */
  74               	.L__stack_usage = 0
 450:../../tmk_core/common/command.c ****         case 1:
  75               		.loc 1 450 0
  76 0000 8330      		cpi r24,lo8(3)
  77 0002 01F0      		breq .L4
  78 0004 00F4      		brsh .L5
  79 0006 8130      		cpi r24,lo8(1)
  80 0008 01F0      		breq .L6
  81 000a 8230      		cpi r24,lo8(2)
  82 000c 01F0      		breq .L7
  83 000e 0895      		ret
  84               	.L5:
  85 0010 8530      		cpi r24,lo8(5)
  86 0012 01F4      		brne .+2
  87 0014 00C0      		rjmp .L8
  88 0016 00F4      		brsh .+2
  89 0018 00C0      		rjmp .L9
  90 001a 8630      		cpi r24,lo8(6)
  91 001c 01F4      		brne .+2
  92 001e 00C0      		rjmp .L10
  93 0020 0895      		ret
  94               	.L6:
 452:../../tmk_core/common/command.c ****                 mk_delay += inc;
  95               		.loc 1 452 0
  96 0022 8091 0000 		lds r24,mk_delay
  97               	.LVL3:
  98 0026 262F      		mov r18,r22
  99 0028 30E0      		ldi r19,0
 100 002a 280F      		add r18,r24
 101 002c 311D      		adc r19,__zero_reg__
 102 002e 2F3F      		cpi r18,-1
 103 0030 3105      		cpc r19,__zero_reg__
 104 0032 04F4      		brge .L11
 453:../../tmk_core/common/command.c ****             else
 105               		.loc 1 453 0
 106 0034 680F      		add r22,r24
 107               	.LVL4:
 108 0036 6093 0000 		sts mk_delay,r22
 109 003a 00C0      		rjmp .L12
 110               	.LVL5:
 111               	.L11:
 455:../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_delay);
 112               		.loc 1 455 0
 113 003c 8FEF      		ldi r24,lo8(-1)
 114 003e 8093 0000 		sts mk_delay,r24
 115               	.LVL6:
 116               	.L12:
 456:../../tmk_core/common/command.c ****             break;
 117               		.loc 1 456 0
 118 0042 8091 0000 		lds r24,mk_delay
 119 0046 1F92      		push __zero_reg__
 120               	.LCFI7:
 121               		.cfi_remember_state
 122               		.cfi_def_cfa_offset 3
 123 0048 8F93      		push r24
 124               	.LCFI8:
 125               		.cfi_def_cfa_offset 4
 126 004a 80E0      		ldi r24,lo8(__c.5280)
 127 004c 90E0      		ldi r25,hi8(__c.5280)
 128 004e 00C0      		rjmp .L23
 129               	.LVL7:
 130               	.L7:
 131               	.LCFI9:
 132               		.cfi_restore_state
 459:../../tmk_core/common/command.c ****                 mk_interval += inc;
 133               		.loc 1 459 0
 134 0050 8091 0000 		lds r24,mk_interval
 135               	.LVL8:
 136 0054 262F      		mov r18,r22
 137 0056 30E0      		ldi r19,0
 138 0058 280F      		add r18,r24
 139 005a 311D      		adc r19,__zero_reg__
 140 005c 2F3F      		cpi r18,-1
 141 005e 3105      		cpc r19,__zero_reg__
 142 0060 04F4      		brge .L13
 460:../../tmk_core/common/command.c ****             else
 143               		.loc 1 460 0
 144 0062 680F      		add r22,r24
 145               	.LVL9:
 146 0064 6093 0000 		sts mk_interval,r22
 147 0068 00C0      		rjmp .L14
 148               	.LVL10:
 149               	.L13:
 462:../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_interval);
 150               		.loc 1 462 0
 151 006a 8FEF      		ldi r24,lo8(-1)
 152 006c 8093 0000 		sts mk_interval,r24
 153               	.LVL11:
 154               	.L14:
 463:../../tmk_core/common/command.c ****             break;
 155               		.loc 1 463 0
 156 0070 8091 0000 		lds r24,mk_interval
 157 0074 1F92      		push __zero_reg__
 158               	.LCFI10:
 159               		.cfi_remember_state
 160               		.cfi_def_cfa_offset 3
 161 0076 8F93      		push r24
 162               	.LCFI11:
 163               		.cfi_def_cfa_offset 4
 164 0078 80E0      		ldi r24,lo8(__c.5284)
 165 007a 90E0      		ldi r25,hi8(__c.5284)
 166 007c 00C0      		rjmp .L23
 167               	.LVL12:
 168               	.L4:
 169               	.LCFI12:
 170               		.cfi_restore_state
 466:../../tmk_core/common/command.c ****                 mk_max_speed += inc;
 171               		.loc 1 466 0
 172 007e 8091 0000 		lds r24,mk_max_speed
 173               	.LVL13:
 174 0082 262F      		mov r18,r22
 175 0084 30E0      		ldi r19,0
 176 0086 280F      		add r18,r24
 177 0088 311D      		adc r19,__zero_reg__
 178 008a 2F3F      		cpi r18,-1
 179 008c 3105      		cpc r19,__zero_reg__
 180 008e 04F4      		brge .L15
 467:../../tmk_core/common/command.c ****             else
 181               		.loc 1 467 0
 182 0090 680F      		add r22,r24
 183               	.LVL14:
 184 0092 6093 0000 		sts mk_max_speed,r22
 185 0096 00C0      		rjmp .L16
 186               	.LVL15:
 187               	.L15:
 469:../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_max_speed);
 188               		.loc 1 469 0
 189 0098 8FEF      		ldi r24,lo8(-1)
 190 009a 8093 0000 		sts mk_max_speed,r24
 191               	.LVL16:
 192               	.L16:
 470:../../tmk_core/common/command.c ****             break;
 193               		.loc 1 470 0
 194 009e 8091 0000 		lds r24,mk_max_speed
 195 00a2 1F92      		push __zero_reg__
 196               	.LCFI13:
 197               		.cfi_remember_state
 198               		.cfi_def_cfa_offset 3
 199 00a4 8F93      		push r24
 200               	.LCFI14:
 201               		.cfi_def_cfa_offset 4
 202 00a6 80E0      		ldi r24,lo8(__c.5287)
 203 00a8 90E0      		ldi r25,hi8(__c.5287)
 204 00aa 00C0      		rjmp .L23
 205               	.LVL17:
 206               	.L9:
 207               	.LCFI15:
 208               		.cfi_restore_state
 473:../../tmk_core/common/command.c ****                 mk_time_to_max += inc;
 209               		.loc 1 473 0
 210 00ac 8091 0000 		lds r24,mk_time_to_max
 211               	.LVL18:
 212 00b0 262F      		mov r18,r22
 213 00b2 30E0      		ldi r19,0
 214 00b4 280F      		add r18,r24
 215 00b6 311D      		adc r19,__zero_reg__
 216 00b8 2F3F      		cpi r18,-1
 217 00ba 3105      		cpc r19,__zero_reg__
 218 00bc 04F4      		brge .L17
 474:../../tmk_core/common/command.c ****             else
 219               		.loc 1 474 0
 220 00be 680F      		add r22,r24
 221               	.LVL19:
 222 00c0 6093 0000 		sts mk_time_to_max,r22
 223 00c4 00C0      		rjmp .L18
 224               	.LVL20:
 225               	.L17:
 476:../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_time_to_max);
 226               		.loc 1 476 0
 227 00c6 8FEF      		ldi r24,lo8(-1)
 228 00c8 8093 0000 		sts mk_time_to_max,r24
 229               	.LVL21:
 230               	.L18:
 477:../../tmk_core/common/command.c ****             break;
 231               		.loc 1 477 0
 232 00cc 8091 0000 		lds r24,mk_time_to_max
 233 00d0 1F92      		push __zero_reg__
 234               	.LCFI16:
 235               		.cfi_remember_state
 236               		.cfi_def_cfa_offset 3
 237 00d2 8F93      		push r24
 238               	.LCFI17:
 239               		.cfi_def_cfa_offset 4
 240 00d4 80E0      		ldi r24,lo8(__c.5290)
 241 00d6 90E0      		ldi r25,hi8(__c.5290)
 242 00d8 00C0      		rjmp .L23
 243               	.LVL22:
 244               	.L8:
 245               	.LCFI18:
 246               		.cfi_restore_state
 480:../../tmk_core/common/command.c ****                 mk_wheel_max_speed += inc;
 247               		.loc 1 480 0
 248 00da 8091 0000 		lds r24,mk_wheel_max_speed
 249               	.LVL23:
 250 00de 262F      		mov r18,r22
 251 00e0 30E0      		ldi r19,0
 252 00e2 280F      		add r18,r24
 253 00e4 311D      		adc r19,__zero_reg__
 254 00e6 2F3F      		cpi r18,-1
 255 00e8 3105      		cpc r19,__zero_reg__
 256 00ea 04F4      		brge .L19
 481:../../tmk_core/common/command.c ****             else
 257               		.loc 1 481 0
 258 00ec 680F      		add r22,r24
 259               	.LVL24:
 260 00ee 6093 0000 		sts mk_wheel_max_speed,r22
 261 00f2 00C0      		rjmp .L20
 262               	.LVL25:
 263               	.L19:
 483:../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_wheel_max_speed);
 264               		.loc 1 483 0
 265 00f4 8FEF      		ldi r24,lo8(-1)
 266 00f6 8093 0000 		sts mk_wheel_max_speed,r24
 267               	.LVL26:
 268               	.L20:
 484:../../tmk_core/common/command.c ****             break;
 269               		.loc 1 484 0
 270 00fa 8091 0000 		lds r24,mk_wheel_max_speed
 271 00fe 1F92      		push __zero_reg__
 272               	.LCFI19:
 273               		.cfi_remember_state
 274               		.cfi_def_cfa_offset 3
 275 0100 8F93      		push r24
 276               	.LCFI20:
 277               		.cfi_def_cfa_offset 4
 278 0102 80E0      		ldi r24,lo8(__c.5293)
 279 0104 90E0      		ldi r25,hi8(__c.5293)
 280 0106 00C0      		rjmp .L23
 281               	.LVL27:
 282               	.L10:
 283               	.LCFI21:
 284               		.cfi_restore_state
 487:../../tmk_core/common/command.c ****                 mk_wheel_time_to_max += inc;
 285               		.loc 1 487 0
 286 0108 8091 0000 		lds r24,mk_wheel_time_to_max
 287               	.LVL28:
 288 010c 262F      		mov r18,r22
 289 010e 30E0      		ldi r19,0
 290 0110 280F      		add r18,r24
 291 0112 311D      		adc r19,__zero_reg__
 292 0114 2F3F      		cpi r18,-1
 293 0116 3105      		cpc r19,__zero_reg__
 294 0118 04F4      		brge .L21
 488:../../tmk_core/common/command.c ****             else
 295               		.loc 1 488 0
 296 011a 680F      		add r22,r24
 297               	.LVL29:
 298 011c 6093 0000 		sts mk_wheel_time_to_max,r22
 299 0120 00C0      		rjmp .L22
 300               	.LVL30:
 301               	.L21:
 490:../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_wheel_time_to_max);
 302               		.loc 1 490 0
 303 0122 8FEF      		ldi r24,lo8(-1)
 304 0124 8093 0000 		sts mk_wheel_time_to_max,r24
 305               	.LVL31:
 306               	.L22:
 491:../../tmk_core/common/command.c ****             break;
 307               		.loc 1 491 0
 308 0128 8091 0000 		lds r24,mk_wheel_time_to_max
 309 012c 1F92      		push __zero_reg__
 310               	.LCFI22:
 311               		.cfi_def_cfa_offset 3
 312 012e 8F93      		push r24
 313               	.LCFI23:
 314               		.cfi_def_cfa_offset 4
 315 0130 80E0      		ldi r24,lo8(__c.5296)
 316 0132 90E0      		ldi r25,hi8(__c.5296)
 317               	.L23:
 318 0134 9F93      		push r25
 319               	.LCFI24:
 320               		.cfi_def_cfa_offset 5
 321 0136 8F93      		push r24
 322               	.LCFI25:
 323               		.cfi_def_cfa_offset 6
 324 0138 0E94 0000 		call __xprintf
 325               	.LVL32:
 492:../../tmk_core/common/command.c ****     }
 326               		.loc 1 492 0
 327 013c 0F90      		pop __tmp_reg__
 328 013e 0F90      		pop __tmp_reg__
 329 0140 0F90      		pop __tmp_reg__
 330 0142 0F90      		pop __tmp_reg__
 331               	.LCFI26:
 332               		.cfi_def_cfa_offset 2
 333 0144 0895      		ret
 334               		.cfi_endproc
 335               	.LFE112:
 337               		.section	.text.mousekey_param_dec,"ax",@progbits
 339               	mousekey_param_dec:
 340               	.LFB113:
 497:../../tmk_core/common/command.c ****     switch (param) {
 341               		.loc 1 497 0
 342               		.cfi_startproc
 343               	.LVL33:
 344               	/* prologue: function */
 345               	/* frame size = 0 */
 346               	/* stack size = 0 */
 347               	.L__stack_usage = 0
 498:../../tmk_core/common/command.c ****         case 1:
 348               		.loc 1 498 0
 349 0000 8330      		cpi r24,lo8(3)
 350 0002 01F0      		breq .L27
 351 0004 00F4      		brsh .L28
 352 0006 8130      		cpi r24,lo8(1)
 353 0008 01F0      		breq .L29
 354 000a 8230      		cpi r24,lo8(2)
 355 000c 01F0      		breq .L30
 356 000e 0895      		ret
 357               	.L28:
 358 0010 8530      		cpi r24,lo8(5)
 359 0012 01F4      		brne .+2
 360 0014 00C0      		rjmp .L31
 361 0016 00F0      		brlo .L32
 362 0018 8630      		cpi r24,lo8(6)
 363 001a 01F4      		brne .+2
 364 001c 00C0      		rjmp .L33
 365 001e 0895      		ret
 366               	.L29:
 500:../../tmk_core/common/command.c ****                 mk_delay -= dec;
 367               		.loc 1 500 0
 368 0020 8091 0000 		lds r24,mk_delay
 369               	.LVL34:
 370 0024 6817      		cp r22,r24
 371 0026 00F4      		brsh .L34
 501:../../tmk_core/common/command.c ****             else
 372               		.loc 1 501 0
 373 0028 861B      		sub r24,r22
 374 002a 8093 0000 		sts mk_delay,r24
 375 002e 00C0      		rjmp .L35
 376               	.L34:
 503:../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_delay);
 377               		.loc 1 503 0
 378 0030 1092 0000 		sts mk_delay,__zero_reg__
 379               	.L35:
 504:../../tmk_core/common/command.c ****             break;
 380               		.loc 1 504 0
 381 0034 8091 0000 		lds r24,mk_delay
 382 0038 1F92      		push __zero_reg__
 383               	.LCFI27:
 384               		.cfi_remember_state
 385               		.cfi_def_cfa_offset 3
 386 003a 8F93      		push r24
 387               	.LCFI28:
 388               		.cfi_def_cfa_offset 4
 389 003c 80E0      		ldi r24,lo8(__c.5303)
 390 003e 90E0      		ldi r25,hi8(__c.5303)
 391 0040 00C0      		rjmp .L46
 392               	.LVL35:
 393               	.L30:
 394               	.LCFI29:
 395               		.cfi_restore_state
 507:../../tmk_core/common/command.c ****                 mk_interval -= dec;
 396               		.loc 1 507 0
 397 0042 8091 0000 		lds r24,mk_interval
 398               	.LVL36:
 399 0046 6817      		cp r22,r24
 400 0048 00F4      		brsh .L36
 508:../../tmk_core/common/command.c ****             else
 401               		.loc 1 508 0
 402 004a 861B      		sub r24,r22
 403 004c 8093 0000 		sts mk_interval,r24
 404 0050 00C0      		rjmp .L37
 405               	.L36:
 510:../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_interval);
 406               		.loc 1 510 0
 407 0052 1092 0000 		sts mk_interval,__zero_reg__
 408               	.L37:
 511:../../tmk_core/common/command.c ****             break;
 409               		.loc 1 511 0
 410 0056 8091 0000 		lds r24,mk_interval
 411 005a 1F92      		push __zero_reg__
 412               	.LCFI30:
 413               		.cfi_remember_state
 414               		.cfi_def_cfa_offset 3
 415 005c 8F93      		push r24
 416               	.LCFI31:
 417               		.cfi_def_cfa_offset 4
 418 005e 80E0      		ldi r24,lo8(__c.5307)
 419 0060 90E0      		ldi r25,hi8(__c.5307)
 420 0062 00C0      		rjmp .L46
 421               	.LVL37:
 422               	.L27:
 423               	.LCFI32:
 424               		.cfi_restore_state
 514:../../tmk_core/common/command.c ****                 mk_max_speed -= dec;
 425               		.loc 1 514 0
 426 0064 8091 0000 		lds r24,mk_max_speed
 427               	.LVL38:
 428 0068 6817      		cp r22,r24
 429 006a 00F4      		brsh .L38
 515:../../tmk_core/common/command.c ****             else
 430               		.loc 1 515 0
 431 006c 861B      		sub r24,r22
 432 006e 8093 0000 		sts mk_max_speed,r24
 433 0072 00C0      		rjmp .L39
 434               	.L38:
 517:../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_max_speed);
 435               		.loc 1 517 0
 436 0074 1092 0000 		sts mk_max_speed,__zero_reg__
 437               	.L39:
 518:../../tmk_core/common/command.c ****             break;
 438               		.loc 1 518 0
 439 0078 8091 0000 		lds r24,mk_max_speed
 440 007c 1F92      		push __zero_reg__
 441               	.LCFI33:
 442               		.cfi_remember_state
 443               		.cfi_def_cfa_offset 3
 444 007e 8F93      		push r24
 445               	.LCFI34:
 446               		.cfi_def_cfa_offset 4
 447 0080 80E0      		ldi r24,lo8(__c.5310)
 448 0082 90E0      		ldi r25,hi8(__c.5310)
 449 0084 00C0      		rjmp .L46
 450               	.LVL39:
 451               	.L32:
 452               	.LCFI35:
 453               		.cfi_restore_state
 521:../../tmk_core/common/command.c ****                 mk_time_to_max -= dec;
 454               		.loc 1 521 0
 455 0086 8091 0000 		lds r24,mk_time_to_max
 456               	.LVL40:
 457 008a 6817      		cp r22,r24
 458 008c 00F4      		brsh .L40
 522:../../tmk_core/common/command.c ****             else
 459               		.loc 1 522 0
 460 008e 861B      		sub r24,r22
 461 0090 8093 0000 		sts mk_time_to_max,r24
 462 0094 00C0      		rjmp .L41
 463               	.L40:
 524:../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_time_to_max);
 464               		.loc 1 524 0
 465 0096 1092 0000 		sts mk_time_to_max,__zero_reg__
 466               	.L41:
 525:../../tmk_core/common/command.c ****             break;
 467               		.loc 1 525 0
 468 009a 8091 0000 		lds r24,mk_time_to_max
 469 009e 1F92      		push __zero_reg__
 470               	.LCFI36:
 471               		.cfi_remember_state
 472               		.cfi_def_cfa_offset 3
 473 00a0 8F93      		push r24
 474               	.LCFI37:
 475               		.cfi_def_cfa_offset 4
 476 00a2 80E0      		ldi r24,lo8(__c.5313)
 477 00a4 90E0      		ldi r25,hi8(__c.5313)
 478 00a6 00C0      		rjmp .L46
 479               	.LVL41:
 480               	.L31:
 481               	.LCFI38:
 482               		.cfi_restore_state
 528:../../tmk_core/common/command.c ****                 mk_wheel_max_speed -= dec;
 483               		.loc 1 528 0
 484 00a8 8091 0000 		lds r24,mk_wheel_max_speed
 485               	.LVL42:
 486 00ac 6817      		cp r22,r24
 487 00ae 00F4      		brsh .L42
 529:../../tmk_core/common/command.c ****             else
 488               		.loc 1 529 0
 489 00b0 861B      		sub r24,r22
 490 00b2 8093 0000 		sts mk_wheel_max_speed,r24
 491 00b6 00C0      		rjmp .L43
 492               	.L42:
 531:../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_wheel_max_speed);
 493               		.loc 1 531 0
 494 00b8 1092 0000 		sts mk_wheel_max_speed,__zero_reg__
 495               	.L43:
 532:../../tmk_core/common/command.c ****             break;
 496               		.loc 1 532 0
 497 00bc 8091 0000 		lds r24,mk_wheel_max_speed
 498 00c0 1F92      		push __zero_reg__
 499               	.LCFI39:
 500               		.cfi_remember_state
 501               		.cfi_def_cfa_offset 3
 502 00c2 8F93      		push r24
 503               	.LCFI40:
 504               		.cfi_def_cfa_offset 4
 505 00c4 80E0      		ldi r24,lo8(__c.5316)
 506 00c6 90E0      		ldi r25,hi8(__c.5316)
 507 00c8 00C0      		rjmp .L46
 508               	.LVL43:
 509               	.L33:
 510               	.LCFI41:
 511               		.cfi_restore_state
 535:../../tmk_core/common/command.c ****                 mk_wheel_time_to_max -= dec;
 512               		.loc 1 535 0
 513 00ca 8091 0000 		lds r24,mk_wheel_time_to_max
 514               	.LVL44:
 515 00ce 6817      		cp r22,r24
 516 00d0 00F4      		brsh .L44
 536:../../tmk_core/common/command.c ****             else
 517               		.loc 1 536 0
 518 00d2 861B      		sub r24,r22
 519 00d4 8093 0000 		sts mk_wheel_time_to_max,r24
 520 00d8 00C0      		rjmp .L45
 521               	.L44:
 538:../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_wheel_time_to_max);
 522               		.loc 1 538 0
 523 00da 1092 0000 		sts mk_wheel_time_to_max,__zero_reg__
 524               	.L45:
 539:../../tmk_core/common/command.c ****             break;
 525               		.loc 1 539 0
 526 00de 8091 0000 		lds r24,mk_wheel_time_to_max
 527 00e2 1F92      		push __zero_reg__
 528               	.LCFI42:
 529               		.cfi_def_cfa_offset 3
 530 00e4 8F93      		push r24
 531               	.LCFI43:
 532               		.cfi_def_cfa_offset 4
 533 00e6 80E0      		ldi r24,lo8(__c.5319)
 534 00e8 90E0      		ldi r25,hi8(__c.5319)
 535               	.L46:
 536 00ea 9F93      		push r25
 537               	.LCFI44:
 538               		.cfi_def_cfa_offset 5
 539 00ec 8F93      		push r24
 540               	.LCFI45:
 541               		.cfi_def_cfa_offset 6
 542 00ee 0E94 0000 		call __xprintf
 543               	.LVL45:
 540:../../tmk_core/common/command.c ****     }
 544               		.loc 1 540 0
 545 00f2 0F90      		pop __tmp_reg__
 546 00f4 0F90      		pop __tmp_reg__
 547 00f6 0F90      		pop __tmp_reg__
 548 00f8 0F90      		pop __tmp_reg__
 549               	.LCFI46:
 550               		.cfi_def_cfa_offset 2
 551 00fa 0895      		ret
 552               		.cfi_endproc
 553               	.LFE113:
 555               		.section	.text.switch_default_layer,"ax",@progbits
 557               	switch_default_layer:
 558               	.LFB117:
 566:../../tmk_core/common/command.c **** 
 567:../../tmk_core/common/command.c **** static bool mousekey_console(uint8_t code)
 568:../../tmk_core/common/command.c **** {
 569:../../tmk_core/common/command.c ****     switch (code) {
 570:../../tmk_core/common/command.c ****         case KC_H:
 571:../../tmk_core/common/command.c ****         case KC_SLASH: /* ? */
 572:../../tmk_core/common/command.c ****             mousekey_console_help();
 573:../../tmk_core/common/command.c ****             break;
 574:../../tmk_core/common/command.c ****         case KC_Q:
 575:../../tmk_core/common/command.c ****         case KC_ESC:
 576:../../tmk_core/common/command.c ****             if (mousekey_param) {
 577:../../tmk_core/common/command.c ****                 mousekey_param = 0;
 578:../../tmk_core/common/command.c ****             } else {
 579:../../tmk_core/common/command.c ****                 print("C> ");
 580:../../tmk_core/common/command.c ****                 command_state = CONSOLE;
 581:../../tmk_core/common/command.c ****                 return false;
 582:../../tmk_core/common/command.c ****             }
 583:../../tmk_core/common/command.c ****             break;
 584:../../tmk_core/common/command.c ****         case KC_P:
 585:../../tmk_core/common/command.c ****             mousekey_param_print();
 586:../../tmk_core/common/command.c ****             break;
 587:../../tmk_core/common/command.c ****         case KC_1:
 588:../../tmk_core/common/command.c ****         case KC_2:
 589:../../tmk_core/common/command.c ****         case KC_3:
 590:../../tmk_core/common/command.c ****         case KC_4:
 591:../../tmk_core/common/command.c ****         case KC_5:
 592:../../tmk_core/common/command.c ****         case KC_6:
 593:../../tmk_core/common/command.c ****             mousekey_param = numkey2num(code);
 594:../../tmk_core/common/command.c ****             break;
 595:../../tmk_core/common/command.c ****         case KC_UP:
 596:../../tmk_core/common/command.c ****             mousekey_param_inc(mousekey_param, 1);
 597:../../tmk_core/common/command.c ****             break;
 598:../../tmk_core/common/command.c ****         case KC_DOWN:
 599:../../tmk_core/common/command.c ****             mousekey_param_dec(mousekey_param, 1);
 600:../../tmk_core/common/command.c ****             break;
 601:../../tmk_core/common/command.c ****         case KC_PGUP:
 602:../../tmk_core/common/command.c ****             mousekey_param_inc(mousekey_param, 10);
 603:../../tmk_core/common/command.c ****             break;
 604:../../tmk_core/common/command.c ****         case KC_PGDN:
 605:../../tmk_core/common/command.c ****             mousekey_param_dec(mousekey_param, 10);
 606:../../tmk_core/common/command.c ****             break;
 607:../../tmk_core/common/command.c ****         case KC_D:
 608:../../tmk_core/common/command.c ****             mk_delay = MOUSEKEY_DELAY/10;
 609:../../tmk_core/common/command.c ****             mk_interval = MOUSEKEY_INTERVAL;
 610:../../tmk_core/common/command.c ****             mk_max_speed = MOUSEKEY_MAX_SPEED;
 611:../../tmk_core/common/command.c ****             mk_time_to_max = MOUSEKEY_TIME_TO_MAX;
 612:../../tmk_core/common/command.c ****             mk_wheel_max_speed = MOUSEKEY_WHEEL_MAX_SPEED;
 613:../../tmk_core/common/command.c ****             mk_wheel_time_to_max = MOUSEKEY_WHEEL_TIME_TO_MAX;
 614:../../tmk_core/common/command.c ****             print("set default\n");
 615:../../tmk_core/common/command.c ****             break;
 616:../../tmk_core/common/command.c ****         default:
 617:../../tmk_core/common/command.c ****             print("?");
 618:../../tmk_core/common/command.c ****             return false;
 619:../../tmk_core/common/command.c ****     }
 620:../../tmk_core/common/command.c ****     if (mousekey_param) {
 621:../../tmk_core/common/command.c ****         xprintf("M%d> ", mousekey_param);
 622:../../tmk_core/common/command.c ****     } else {
 623:../../tmk_core/common/command.c ****         print("M>" );
 624:../../tmk_core/common/command.c ****     }
 625:../../tmk_core/common/command.c ****     return true;
 626:../../tmk_core/common/command.c **** }
 627:../../tmk_core/common/command.c **** #endif
 628:../../tmk_core/common/command.c **** 
 629:../../tmk_core/common/command.c **** 
 630:../../tmk_core/common/command.c **** /***********************************************************
 631:../../tmk_core/common/command.c ****  * Utilities
 632:../../tmk_core/common/command.c ****  ***********************************************************/
 633:../../tmk_core/common/command.c **** #if MOUSEKEY_ENABLE
 634:../../tmk_core/common/command.c **** static uint8_t numkey2num(uint8_t code)
 635:../../tmk_core/common/command.c **** {
 636:../../tmk_core/common/command.c ****     switch (code) {
 637:../../tmk_core/common/command.c ****         case KC_1: return 1;
 638:../../tmk_core/common/command.c ****         case KC_2: return 2;
 639:../../tmk_core/common/command.c ****         case KC_3: return 3;
 640:../../tmk_core/common/command.c ****         case KC_4: return 4;
 641:../../tmk_core/common/command.c ****         case KC_5: return 5;
 642:../../tmk_core/common/command.c ****         case KC_6: return 6;
 643:../../tmk_core/common/command.c ****         case KC_7: return 7;
 644:../../tmk_core/common/command.c ****         case KC_8: return 8;
 645:../../tmk_core/common/command.c ****         case KC_9: return 9;
 646:../../tmk_core/common/command.c ****         case KC_0: return 0;
 647:../../tmk_core/common/command.c ****     }
 648:../../tmk_core/common/command.c ****     return 0;
 649:../../tmk_core/common/command.c **** }
 650:../../tmk_core/common/command.c **** #endif
 651:../../tmk_core/common/command.c **** 
 652:../../tmk_core/common/command.c **** static void switch_default_layer(uint8_t layer)
 653:../../tmk_core/common/command.c **** {
 559               		.loc 1 653 0
 560               		.cfi_startproc
 561               	.LVL46:
 562 0000 CF93      		push r28
 563               	.LCFI47:
 564               		.cfi_def_cfa_offset 3
 565               		.cfi_offset 28, -2
 566               	/* prologue: function */
 567               	/* frame size = 0 */
 568               	/* stack size = 1 */
 569               	.L__stack_usage = 1
 570 0002 C82F      		mov r28,r24
 654:../../tmk_core/common/command.c ****     xprintf("L%d\n", layer);
 571               		.loc 1 654 0
 572 0004 1F92      		push __zero_reg__
 573               	.LCFI48:
 574               		.cfi_def_cfa_offset 4
 575 0006 8F93      		push r24
 576               	.LCFI49:
 577               		.cfi_def_cfa_offset 5
 578 0008 80E0      		ldi r24,lo8(__c.5375)
 579 000a 90E0      		ldi r25,hi8(__c.5375)
 580               	.LVL47:
 581 000c 9F93      		push r25
 582               	.LCFI50:
 583               		.cfi_def_cfa_offset 6
 584 000e 8F93      		push r24
 585               	.LCFI51:
 586               		.cfi_def_cfa_offset 7
 587 0010 0E94 0000 		call __xprintf
 588               	.LVL48:
 655:../../tmk_core/common/command.c ****     default_layer_set(1UL<<layer);
 589               		.loc 1 655 0
 590 0014 81E0      		ldi r24,lo8(1)
 591 0016 90E0      		ldi r25,0
 592 0018 A0E0      		ldi r26,0
 593 001a B0E0      		ldi r27,0
 594 001c BC01      		movw r22,r24
 595 001e CD01      		movw r24,r26
 596 0020 00C0      		rjmp 2f
 597               		1:
 598 0022 660F      		lsl r22
 599 0024 771F      		rol r23
 600 0026 881F      		rol r24
 601 0028 991F      		rol r25
 602               		2:
 603 002a CA95      		dec r28
 604 002c 02F4      		brpl 1b
 605 002e 0E94 0000 		call default_layer_set
 606               	.LVL49:
 656:../../tmk_core/common/command.c ****     clear_keyboard();
 607               		.loc 1 656 0
 608 0032 0F90      		pop __tmp_reg__
 609 0034 0F90      		pop __tmp_reg__
 610 0036 0F90      		pop __tmp_reg__
 611 0038 0F90      		pop __tmp_reg__
 612               	.LCFI52:
 613               		.cfi_def_cfa_offset 3
 614               	/* epilogue start */
 657:../../tmk_core/common/command.c **** }
 615               		.loc 1 657 0
 616 003a CF91      		pop r28
 617               	.LVL50:
 656:../../tmk_core/common/command.c ****     clear_keyboard();
 618               		.loc 1 656 0
 619 003c 0C94 0000 		jmp clear_keyboard
 620               	.LVL51:
 621               		.cfi_endproc
 622               	.LFE117:
 624               		.section	.text.command_common,"ax",@progbits
 626               	command_common:
 627               	.LFB108:
 183:../../tmk_core/common/command.c **** #ifdef KEYBOARD_LOCK_ENABLE
 628               		.loc 1 183 0
 629               		.cfi_startproc
 630 0000 CF93      		push r28
 631               	.LCFI53:
 632               		.cfi_def_cfa_offset 3
 633               		.cfi_offset 28, -2
 634               	/* prologue: function */
 635               	/* frame size = 0 */
 636               	/* stack size = 1 */
 637               	.L__stack_usage = 1
 190:../../tmk_core/common/command.c **** #ifdef SLEEP_LED_ENABLE
 638               		.loc 1 190 0
 639 0002 8B31      		cpi r24,lo8(27)
 640 0004 01F4      		brne .+2
 641 0006 00C0      		rjmp .L50
 642 0008 00F0      		brlo .+2
 643 000a 00C0      		rjmp .L51
 644 000c 8E30      		cpi r24,lo8(14)
 645 000e 01F4      		brne .+2
 646 0010 00C0      		rjmp .L52
 647 0012 00F4      		brsh .L53
 648 0014 8730      		cpi r24,lo8(7)
 649 0016 01F4      		brne .+2
 650 0018 00C0      		rjmp .L54
 651 001a 00F4      		brsh .L55
 652 001c 8630      		cpi r24,lo8(6)
 653 001e 01F0      		breq .+2
 654 0020 00C0      		rjmp .L49
 228:../../tmk_core/common/command.c ****             debug_keyboard = false;
 655               		.loc 1 228 0
 656 0022 8091 0000 		lds r24,debug_config
 231:../../tmk_core/common/command.c ****             command_console_help();
 657               		.loc 1 231 0
 658 0026 817F      		andi r24,lo8(-15)
 659 0028 8E7F      		andi r24,lo8(~(1<<0))
 660 002a 8093 0000 		sts debug_config,r24
 661               	.LBB111:
 662               	.LBB112:
 394:../../tmk_core/common/command.c ****           "ESC/q:	quit\n"
 663               		.loc 1 394 0
 664 002e 80E0      		ldi r24,lo8(__c.5215)
 665 0030 90E0      		ldi r25,hi8(__c.5215)
 666 0032 0E94 0000 		call xputs
 667               	.LBE112:
 668               	.LBE111:
 233:../../tmk_core/common/command.c ****             command_state = CONSOLE;
 669               		.loc 1 233 0
 670 0036 80E0      		ldi r24,lo8(__c.5147)
 671 0038 90E0      		ldi r25,hi8(__c.5147)
 672 003a 0E94 0000 		call xputs
 234:../../tmk_core/common/command.c ****             break;
 673               		.loc 1 234 0
 674 003e 81E0      		ldi r24,lo8(1)
 675 0040 8093 0000 		sts command_state,r24
 676 0044 00C0      		rjmp .L96
 677               	.L55:
 190:../../tmk_core/common/command.c **** #ifdef SLEEP_LED_ENABLE
 678               		.loc 1 190 0
 679 0046 8830      		cpi r24,lo8(8)
 680 0048 01F4      		brne .+2
 681 004a 00C0      		rjmp .L57
 682 004c 8B30      		cpi r24,lo8(11)
 683 004e 01F4      		brne .+2
 684 0050 00C0      		rjmp .L58
 685 0052 00C0      		rjmp .L49
 686               	.L53:
 687 0054 8131      		cpi r24,lo8(17)
 688 0056 01F4      		brne .+2
 689 0058 00C0      		rjmp .L59
 690 005a 00F4      		brsh .L60
 691 005c 8031      		cpi r24,lo8(16)
 692 005e 01F4      		brne .+2
 693 0060 00C0      		rjmp .L61
 694 0062 00C0      		rjmp .L49
 695               	.L60:
 696 0064 8631      		cpi r24,lo8(22)
 697 0066 01F4      		brne .+2
 698 0068 00C0      		rjmp .L62
 699 006a 8931      		cpi r24,lo8(25)
 700 006c 01F0      		breq .+2
 701 006e 00C0      		rjmp .L49
 282:../../tmk_core/common/command.c ****             print("DESC: " STR(DESCRIPTION) "\n");
 702               		.loc 1 282 0
 703 0070 80E0      		ldi r24,lo8(__c.5173)
 704 0072 90E0      		ldi r25,hi8(__c.5173)
 705 0074 0E94 0000 		call xputs
 283:../../tmk_core/common/command.c ****             print("VID: " STR(VENDOR_ID) "(" STR(MANUFACTURER) ") "
 706               		.loc 1 283 0
 707 0078 80E0      		ldi r24,lo8(__c.5175)
 708 007a 90E0      		ldi r25,hi8(__c.5175)
 709 007c 0E94 0000 		call xputs
 284:../../tmk_core/common/command.c ****                   "PID: " STR(PRODUCT_ID) "(" STR(PRODUCT) ") "
 710               		.loc 1 284 0
 711 0080 80E0      		ldi r24,lo8(__c.5177)
 712 0082 90E0      		ldi r25,hi8(__c.5177)
 713 0084 0E94 0000 		call xputs
 287:../../tmk_core/common/command.c ****             /* build options */
 714               		.loc 1 287 0
 715 0088 80E0      		ldi r24,lo8(__c.5179)
 716 008a 90E0      		ldi r25,hi8(__c.5179)
 717 008c 0E94 0000 		call xputs
 289:../../tmk_core/common/command.c **** #ifdef PROTOCOL_PJRC
 718               		.loc 1 289 0
 719 0090 80E0      		ldi r24,lo8(__c.5181)
 720 0092 90E0      		ldi r25,hi8(__c.5181)
 721 0094 0E94 0000 		call xputs
 325:../../tmk_core/common/command.c **** #if defined(__AVR__)
 722               		.loc 1 325 0
 723 0098 80E0      		ldi r24,lo8(__c.5183)
 724 009a 90E0      		ldi r25,hi8(__c.5183)
 725 009c 00C0      		rjmp .L99
 726               	.L51:
 190:../../tmk_core/common/command.c **** #ifdef SLEEP_LED_ENABLE
 727               		.loc 1 190 0
 728 009e 8533      		cpi r24,lo8(53)
 729 00a0 01F4      		brne .+2
 730 00a2 00C0      		rjmp .L64
 731 00a4 00F4      		brsh .L65
 732 00a6 8732      		cpi r24,lo8(39)
 733 00a8 01F4      		brne .+2
 734 00aa 00C0      		rjmp .L64
 735 00ac 00F4      		brsh .L66
 736 00ae 8E31      		cpi r24,lo8(30)
 737 00b0 00F4      		brsh .+2
 738 00b2 00C0      		rjmp .L49
 376:../../tmk_core/common/command.c ****             break;
 739               		.loc 1 376 0
 740 00b4 8D51      		subi r24,lo8(-(-29))
 741 00b6 00C0      		rjmp .L100
 742               	.L66:
 190:../../tmk_core/common/command.c **** #ifdef SLEEP_LED_ENABLE
 743               		.loc 1 190 0
 744 00b8 8932      		cpi r24,lo8(41)
 745 00ba 01F4      		brne .+2
 746 00bc 00C0      		rjmp .L64
 747 00be 00C0      		rjmp .L49
 748               	.L65:
 749 00c0 8334      		cpi r24,lo8(67)
 750 00c2 00F4      		brsh .L68
 751 00c4 8A33      		cpi r24,lo8(58)
 752 00c6 00F0      		brlo .+2
 753 00c8 00C0      		rjmp .L69
 754 00ca 8833      		cpi r24,lo8(56)
 755 00cc 01F4      		brne .+2
 756 00ce 00C0      		rjmp .L58
 757 00d0 00C0      		rjmp .L49
 758               	.L68:
 759 00d2 8334      		cpi r24,lo8(67)
 760 00d4 01F4      		brne .+2
 761 00d6 00C0      		rjmp .L64
 762 00d8 8834      		cpi r24,lo8(72)
 763 00da 01F0      		breq .+2
 764 00dc 00C0      		rjmp .L49
 237:../../tmk_core/common/command.c ****             print("\n\nbootloader... ");
 765               		.loc 1 237 0
 766 00de 0E94 0000 		call clear_keyboard
 238:../../tmk_core/common/command.c ****             wait_ms(1000);
 767               		.loc 1 238 0
 768 00e2 80E0      		ldi r24,lo8(__c.5150)
 769 00e4 90E0      		ldi r25,hi8(__c.5150)
 770 00e6 0E94 0000 		call xputs
 771               	.LBB113:
 772               	.LBB114:
 773               		.file 2 "/usr/lib/avr/include/util/delay.h"
   1:/usr/lib/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/lib/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/lib/avr/include/util/delay.h **** 
   6:/usr/lib/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/lib/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/lib/avr/include/util/delay.h **** 
   9:/usr/lib/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/lib/avr/include/util/delay.h **** 
  12:/usr/lib/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/lib/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/lib/avr/include/util/delay.h ****      distribution.
  16:/usr/lib/avr/include/util/delay.h **** 
  17:/usr/lib/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/lib/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/lib/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/lib/avr/include/util/delay.h **** 
  21:/usr/lib/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/lib/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/lib/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/lib/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/lib/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/lib/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/lib/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/lib/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/lib/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/lib/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/lib/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/lib/avr/include/util/delay.h **** 
  33:/usr/lib/avr/include/util/delay.h **** /* $Id$ */
  34:/usr/lib/avr/include/util/delay.h **** 
  35:/usr/lib/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/lib/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/lib/avr/include/util/delay.h **** 
  38:/usr/lib/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/usr/lib/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/usr/lib/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/usr/lib/avr/include/util/delay.h **** #  endif
  42:/usr/lib/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/usr/lib/avr/include/util/delay.h **** 
  44:/usr/lib/avr/include/util/delay.h **** #include <inttypes.h>
  45:/usr/lib/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/usr/lib/avr/include/util/delay.h **** #include <math.h>
  47:/usr/lib/avr/include/util/delay.h **** 
  48:/usr/lib/avr/include/util/delay.h **** /** \file */
  49:/usr/lib/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/usr/lib/avr/include/util/delay.h ****     \code
  51:/usr/lib/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/usr/lib/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/usr/lib/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/usr/lib/avr/include/util/delay.h ****     \endcode
  55:/usr/lib/avr/include/util/delay.h **** 
  56:/usr/lib/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/usr/lib/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/usr/lib/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/usr/lib/avr/include/util/delay.h ****     used.
  60:/usr/lib/avr/include/util/delay.h **** 
  61:/usr/lib/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/usr/lib/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/usr/lib/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/usr/lib/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/usr/lib/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/usr/lib/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/usr/lib/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/usr/lib/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/usr/lib/avr/include/util/delay.h **** 
  70:/usr/lib/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/usr/lib/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/usr/lib/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/usr/lib/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/usr/lib/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/usr/lib/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/usr/lib/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/usr/lib/avr/include/util/delay.h ****     routines linked into the application.
  78:/usr/lib/avr/include/util/delay.h **** 
  79:/usr/lib/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/usr/lib/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/usr/lib/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/usr/lib/avr/include/util/delay.h **** 
  83:/usr/lib/avr/include/util/delay.h **** */
  84:/usr/lib/avr/include/util/delay.h **** 
  85:/usr/lib/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/usr/lib/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/usr/lib/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/usr/lib/avr/include/util/delay.h **** #endif
  89:/usr/lib/avr/include/util/delay.h **** 
  90:/usr/lib/avr/include/util/delay.h **** #ifndef F_CPU
  91:/usr/lib/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/usr/lib/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/usr/lib/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/usr/lib/avr/include/util/delay.h ****     \def F_CPU
  95:/usr/lib/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/usr/lib/avr/include/util/delay.h **** 
  97:/usr/lib/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/usr/lib/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/usr/lib/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/usr/lib/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/usr/lib/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/usr/lib/avr/include/util/delay.h **** 
 103:/usr/lib/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/usr/lib/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/usr/lib/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/usr/lib/avr/include/util/delay.h ****     integer value.
 107:/usr/lib/avr/include/util/delay.h ****  */
 108:/usr/lib/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/usr/lib/avr/include/util/delay.h **** #endif
 110:/usr/lib/avr/include/util/delay.h **** 
 111:/usr/lib/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/usr/lib/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/usr/lib/avr/include/util/delay.h **** #endif
 114:/usr/lib/avr/include/util/delay.h **** 
 115:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/usr/lib/avr/include/util/delay.h **** #  include <math.h>
 119:/usr/lib/avr/include/util/delay.h **** #endif
 120:/usr/lib/avr/include/util/delay.h **** 
 121:/usr/lib/avr/include/util/delay.h **** /**
 122:/usr/lib/avr/include/util/delay.h ****    \ingroup util_delay
 123:/usr/lib/avr/include/util/delay.h **** 
 124:/usr/lib/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/usr/lib/avr/include/util/delay.h **** 
 126:/usr/lib/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/usr/lib/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/usr/lib/avr/include/util/delay.h **** 
 129:/usr/lib/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/usr/lib/avr/include/util/delay.h **** 
 131:/usr/lib/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/usr/lib/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/usr/lib/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/usr/lib/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/usr/lib/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/usr/lib/avr/include/util/delay.h **** 
 137:/usr/lib/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/usr/lib/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/usr/lib/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/usr/lib/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/usr/lib/avr/include/util/delay.h **** 
 142:/usr/lib/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/usr/lib/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/usr/lib/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/usr/lib/avr/include/util/delay.h ****    microseconds of delay.
 146:/usr/lib/avr/include/util/delay.h **** 
 147:/usr/lib/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/usr/lib/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/usr/lib/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/usr/lib/avr/include/util/delay.h ****    respectively.
 151:/usr/lib/avr/include/util/delay.h **** 
 152:/usr/lib/avr/include/util/delay.h ****    \note
 153:/usr/lib/avr/include/util/delay.h **** 
 154:/usr/lib/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/usr/lib/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/usr/lib/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/usr/lib/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/usr/lib/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/usr/lib/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/usr/lib/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/usr/lib/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/usr/lib/avr/include/util/delay.h ****    not available to the compiler then.
 163:/usr/lib/avr/include/util/delay.h **** 
 164:/usr/lib/avr/include/util/delay.h ****  */
 165:/usr/lib/avr/include/util/delay.h **** void
 166:/usr/lib/avr/include/util/delay.h **** _delay_ms(double __ms)
 167:/usr/lib/avr/include/util/delay.h **** {
 168:/usr/lib/avr/include/util/delay.h **** 	double __tmp ;
 169:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/usr/lib/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 173:/usr/lib/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 174:/usr/lib/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 175:/usr/lib/avr/include/util/delay.h **** 
 176:/usr/lib/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/usr/lib/avr/include/util/delay.h **** 
 179:/usr/lib/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/usr/lib/avr/include/util/delay.h **** 
 182:/usr/lib/avr/include/util/delay.h **** 	#else
 183:/usr/lib/avr/include/util/delay.h **** 		//round up by default
 184:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 185:/usr/lib/avr/include/util/delay.h **** 	#endif
 186:/usr/lib/avr/include/util/delay.h **** 
 187:/usr/lib/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 774               		.loc 2 187 0
 775 00ea 9FEF      		ldi r25,lo8(3199999)
 776 00ec 23ED      		ldi r18,hi8(3199999)
 777 00ee 80E3      		ldi r24,hlo8(3199999)
 778 00f0 9150      	1:	subi r25,1
 779 00f2 2040      		sbci r18,0
 780 00f4 8040      		sbci r24,0
 781 00f6 01F4      		brne 1b
 782 00f8 00C0      		rjmp .
 783 00fa 0000      		nop
 784               	.LBE114:
 785               	.LBE113:
 240:../../tmk_core/common/command.c ****             break;
 786               		.loc 1 240 0
 787 00fc 0E94 0000 		call bootloader_jump
 788 0100 00C0      		rjmp .L96
 789               	.L57:
 206:../../tmk_core/common/command.c ****             print_eeconfig();
 790               		.loc 1 206 0
 791 0102 80E0      		ldi r24,lo8(__c.5141)
 792 0104 90E0      		ldi r25,hi8(__c.5141)
 793 0106 0E94 0000 		call xputs
 794               	.LBB115:
 795               	.LBB116:
 150:../../tmk_core/common/command.c **** 
 796               		.loc 1 150 0
 797 010a 80E0      		ldi r24,lo8(__c.5045)
 798 010c 90E0      		ldi r25,hi8(__c.5045)
 799 010e 0E94 0000 		call xputs
 800 0112 0E94 0000 		call eeconfig_read_default_layer
 801 0116 1F92      		push __zero_reg__
 802               	.LCFI54:
 803               		.cfi_def_cfa_offset 4
 804 0118 8F93      		push r24
 805               	.LCFI55:
 806               		.cfi_def_cfa_offset 5
 807 011a 80E0      		ldi r24,lo8(__c.5047)
 808 011c 90E0      		ldi r25,hi8(__c.5047)
 809 011e 9F93      		push r25
 810               	.LCFI56:
 811               		.cfi_def_cfa_offset 6
 812 0120 8F93      		push r24
 813               	.LCFI57:
 814               		.cfi_def_cfa_offset 7
 815 0122 0E94 0000 		call __xprintf
 816 0126 80E0      		ldi r24,lo8(__c.5049)
 817 0128 90E0      		ldi r25,hi8(__c.5049)
 818 012a 0E94 0000 		call xputs
 153:../../tmk_core/common/command.c ****     print("debug_config.raw: "); print_hex8(dc.raw); print("\n");
 819               		.loc 1 153 0
 820 012e 0E94 0000 		call eeconfig_read_debug
 821 0132 C82F      		mov r28,r24
 154:../../tmk_core/common/command.c ****     print(".enable: "); print_dec(dc.enable); print("\n");
 822               		.loc 1 154 0
 823 0134 80E0      		ldi r24,lo8(__c.5052)
 824 0136 90E0      		ldi r25,hi8(__c.5052)
 825 0138 0E94 0000 		call xputs
 826 013c 1F92      		push __zero_reg__
 827               	.LCFI58:
 828               		.cfi_def_cfa_offset 8
 829 013e CF93      		push r28
 830               	.LCFI59:
 831               		.cfi_def_cfa_offset 9
 832 0140 80E0      		ldi r24,lo8(__c.5054)
 833 0142 90E0      		ldi r25,hi8(__c.5054)
 834 0144 9F93      		push r25
 835               	.LCFI60:
 836               		.cfi_def_cfa_offset 10
 837 0146 8F93      		push r24
 838               	.LCFI61:
 839               		.cfi_def_cfa_offset 11
 840 0148 0E94 0000 		call __xprintf
 841 014c 80E0      		ldi r24,lo8(__c.5056)
 842 014e 90E0      		ldi r25,hi8(__c.5056)
 843 0150 0E94 0000 		call xputs
 155:../../tmk_core/common/command.c ****     print(".matrix: "); print_dec(dc.matrix); print("\n");
 844               		.loc 1 155 0
 845 0154 80E0      		ldi r24,lo8(__c.5058)
 846 0156 90E0      		ldi r25,hi8(__c.5058)
 847 0158 0E94 0000 		call xputs
 848 015c 8C2F      		mov r24,r28
 849 015e 8170      		andi r24,1
 850 0160 1F92      		push __zero_reg__
 851               	.LCFI62:
 852               		.cfi_def_cfa_offset 12
 853 0162 8F93      		push r24
 854               	.LCFI63:
 855               		.cfi_def_cfa_offset 13
 856 0164 80E0      		ldi r24,lo8(__c.5060)
 857 0166 90E0      		ldi r25,hi8(__c.5060)
 858 0168 9F93      		push r25
 859               	.LCFI64:
 860               		.cfi_def_cfa_offset 14
 861 016a 8F93      		push r24
 862               	.LCFI65:
 863               		.cfi_def_cfa_offset 15
 864 016c 0E94 0000 		call __xprintf
 865 0170 80E0      		ldi r24,lo8(__c.5062)
 866 0172 90E0      		ldi r25,hi8(__c.5062)
 867 0174 0E94 0000 		call xputs
 156:../../tmk_core/common/command.c ****     print(".keyboard: "); print_dec(dc.keyboard); print("\n");
 868               		.loc 1 156 0
 869 0178 80E0      		ldi r24,lo8(__c.5064)
 870 017a 90E0      		ldi r25,hi8(__c.5064)
 871 017c 0E94 0000 		call xputs
 872 0180 C1FB      		bst r28,1
 873 0182 8827      		clr r24
 874 0184 80F9      		bld r24,0
 875 0186 1F92      		push __zero_reg__
 876               	.LCFI66:
 877               		.cfi_def_cfa_offset 16
 878 0188 8F93      		push r24
 879               	.LCFI67:
 880               		.cfi_def_cfa_offset 17
 881 018a 80E0      		ldi r24,lo8(__c.5066)
 882 018c 90E0      		ldi r25,hi8(__c.5066)
 883 018e 9F93      		push r25
 884               	.LCFI68:
 885               		.cfi_def_cfa_offset 18
 886 0190 8F93      		push r24
 887               	.LCFI69:
 888               		.cfi_def_cfa_offset 19
 889 0192 0E94 0000 		call __xprintf
 890 0196 80E0      		ldi r24,lo8(__c.5068)
 891 0198 90E0      		ldi r25,hi8(__c.5068)
 892 019a 0E94 0000 		call xputs
 157:../../tmk_core/common/command.c ****     print(".mouse: "); print_dec(dc.mouse); print("\n");
 893               		.loc 1 157 0
 894 019e 80E0      		ldi r24,lo8(__c.5070)
 895 01a0 90E0      		ldi r25,hi8(__c.5070)
 896 01a2 0E94 0000 		call xputs
 897 01a6 C2FB      		bst r28,2
 898 01a8 8827      		clr r24
 899 01aa 80F9      		bld r24,0
 900 01ac 1F92      		push __zero_reg__
 901               	.LCFI70:
 902               		.cfi_def_cfa_offset 20
 903 01ae 8F93      		push r24
 904               	.LCFI71:
 905               		.cfi_def_cfa_offset 21
 906 01b0 80E0      		ldi r24,lo8(__c.5072)
 907 01b2 90E0      		ldi r25,hi8(__c.5072)
 908 01b4 9F93      		push r25
 909               	.LCFI72:
 910               		.cfi_def_cfa_offset 22
 911 01b6 8F93      		push r24
 912               	.LCFI73:
 913               		.cfi_def_cfa_offset 23
 914 01b8 0E94 0000 		call __xprintf
 915 01bc 80E0      		ldi r24,lo8(__c.5074)
 916 01be 90E0      		ldi r25,hi8(__c.5074)
 917 01c0 0E94 0000 		call xputs
 158:../../tmk_core/common/command.c **** 
 918               		.loc 1 158 0
 919 01c4 80E0      		ldi r24,lo8(__c.5076)
 920 01c6 90E0      		ldi r25,hi8(__c.5076)
 921 01c8 0E94 0000 		call xputs
 922 01cc C3FB      		bst r28,3
 923 01ce CC27      		clr r28
 924 01d0 C0F9      		bld r28,0
 925 01d2 1F92      		push __zero_reg__
 926               	.LCFI74:
 927               		.cfi_def_cfa_offset 24
 928 01d4 CF93      		push r28
 929               	.LCFI75:
 930               		.cfi_def_cfa_offset 25
 931 01d6 80E0      		ldi r24,lo8(__c.5078)
 932 01d8 90E0      		ldi r25,hi8(__c.5078)
 933 01da 9F93      		push r25
 934               	.LCFI76:
 935               		.cfi_def_cfa_offset 26
 936 01dc 8F93      		push r24
 937               	.LCFI77:
 938               		.cfi_def_cfa_offset 27
 939 01de 0E94 0000 		call __xprintf
 940 01e2 80E0      		ldi r24,lo8(__c.5080)
 941 01e4 90E0      		ldi r25,hi8(__c.5080)
 942 01e6 0E94 0000 		call xputs
 161:../../tmk_core/common/command.c ****     print("keymap_config.raw: "); print_hex8(kc.raw); print("\n");
 943               		.loc 1 161 0
 944 01ea 0E94 0000 		call eeconfig_read_keymap
 945 01ee C82F      		mov r28,r24
 162:../../tmk_core/common/command.c ****     print(".swap_control_capslock: "); print_dec(kc.swap_control_capslock); print("\n");
 946               		.loc 1 162 0
 947 01f0 80E0      		ldi r24,lo8(__c.5083)
 948 01f2 90E0      		ldi r25,hi8(__c.5083)
 949 01f4 0E94 0000 		call xputs
 950 01f8 1F92      		push __zero_reg__
 951               	.LCFI78:
 952               		.cfi_def_cfa_offset 28
 953 01fa CF93      		push r28
 954               	.LCFI79:
 955               		.cfi_def_cfa_offset 29
 956 01fc 80E0      		ldi r24,lo8(__c.5085)
 957 01fe 90E0      		ldi r25,hi8(__c.5085)
 958 0200 9F93      		push r25
 959               	.LCFI80:
 960               		.cfi_def_cfa_offset 30
 961 0202 8F93      		push r24
 962               	.LCFI81:
 963               		.cfi_def_cfa_offset 31
 964 0204 0E94 0000 		call __xprintf
 965 0208 80E0      		ldi r24,lo8(__c.5087)
 966 020a 90E0      		ldi r25,hi8(__c.5087)
 967 020c 0E94 0000 		call xputs
 163:../../tmk_core/common/command.c ****     print(".capslock_to_control: "); print_dec(kc.capslock_to_control); print("\n");
 968               		.loc 1 163 0
 969 0210 80E0      		ldi r24,lo8(__c.5089)
 970 0212 90E0      		ldi r25,hi8(__c.5089)
 971 0214 0E94 0000 		call xputs
 972 0218 8C2F      		mov r24,r28
 973 021a 8170      		andi r24,1
 974 021c 1F92      		push __zero_reg__
 975               	.LCFI82:
 976               		.cfi_def_cfa_offset 32
 977 021e 8F93      		push r24
 978               	.LCFI83:
 979               		.cfi_def_cfa_offset 33
 980 0220 80E0      		ldi r24,lo8(__c.5091)
 981 0222 90E0      		ldi r25,hi8(__c.5091)
 982 0224 9F93      		push r25
 983               	.LCFI84:
 984               		.cfi_def_cfa_offset 34
 985 0226 8F93      		push r24
 986               	.LCFI85:
 987               		.cfi_def_cfa_offset 35
 988 0228 0E94 0000 		call __xprintf
 989 022c 8DB7      		in r24,__SP_L__
 990 022e 9EB7      		in r25,__SP_H__
 991 0230 8096      		adiw r24,32
 992 0232 0FB6      		in __tmp_reg__,__SREG__
 993 0234 F894      		cli
 994 0236 9EBF      		out __SP_H__,r25
 995 0238 0FBE      		out __SREG__,__tmp_reg__
 996 023a 8DBF      		out __SP_L__,r24
 997               	.LCFI86:
 998               		.cfi_def_cfa_offset 3
 999 023c 80E0      		ldi r24,lo8(__c.5093)
 1000 023e 90E0      		ldi r25,hi8(__c.5093)
 1001 0240 0E94 0000 		call xputs
 164:../../tmk_core/common/command.c ****     print(".swap_lalt_lgui: "); print_dec(kc.swap_lalt_lgui); print("\n");
 1002               		.loc 1 164 0
 1003 0244 80E0      		ldi r24,lo8(__c.5095)
 1004 0246 90E0      		ldi r25,hi8(__c.5095)
 1005 0248 0E94 0000 		call xputs
 1006 024c C1FB      		bst r28,1
 1007 024e 8827      		clr r24
 1008 0250 80F9      		bld r24,0
 1009 0252 1F92      		push __zero_reg__
 1010               	.LCFI87:
 1011               		.cfi_def_cfa_offset 4
 1012 0254 8F93      		push r24
 1013               	.LCFI88:
 1014               		.cfi_def_cfa_offset 5
 1015 0256 80E0      		ldi r24,lo8(__c.5097)
 1016 0258 90E0      		ldi r25,hi8(__c.5097)
 1017 025a 9F93      		push r25
 1018               	.LCFI89:
 1019               		.cfi_def_cfa_offset 6
 1020 025c 8F93      		push r24
 1021               	.LCFI90:
 1022               		.cfi_def_cfa_offset 7
 1023 025e 0E94 0000 		call __xprintf
 1024 0262 80E0      		ldi r24,lo8(__c.5099)
 1025 0264 90E0      		ldi r25,hi8(__c.5099)
 1026 0266 0E94 0000 		call xputs
 165:../../tmk_core/common/command.c ****     print(".swap_ralt_rgui: "); print_dec(kc.swap_ralt_rgui); print("\n");
 1027               		.loc 1 165 0
 1028 026a 80E0      		ldi r24,lo8(__c.5101)
 1029 026c 90E0      		ldi r25,hi8(__c.5101)
 1030 026e 0E94 0000 		call xputs
 1031 0272 C2FB      		bst r28,2
 1032 0274 8827      		clr r24
 1033 0276 80F9      		bld r24,0
 1034 0278 1F92      		push __zero_reg__
 1035               	.LCFI91:
 1036               		.cfi_def_cfa_offset 8
 1037 027a 8F93      		push r24
 1038               	.LCFI92:
 1039               		.cfi_def_cfa_offset 9
 1040 027c 80E0      		ldi r24,lo8(__c.5103)
 1041 027e 90E0      		ldi r25,hi8(__c.5103)
 1042 0280 9F93      		push r25
 1043               	.LCFI93:
 1044               		.cfi_def_cfa_offset 10
 1045 0282 8F93      		push r24
 1046               	.LCFI94:
 1047               		.cfi_def_cfa_offset 11
 1048 0284 0E94 0000 		call __xprintf
 1049 0288 80E0      		ldi r24,lo8(__c.5105)
 1050 028a 90E0      		ldi r25,hi8(__c.5105)
 1051 028c 0E94 0000 		call xputs
 166:../../tmk_core/common/command.c ****     print(".no_gui: "); print_dec(kc.no_gui); print("\n");
 1052               		.loc 1 166 0
 1053 0290 80E0      		ldi r24,lo8(__c.5107)
 1054 0292 90E0      		ldi r25,hi8(__c.5107)
 1055 0294 0E94 0000 		call xputs
 1056 0298 C3FB      		bst r28,3
 1057 029a 8827      		clr r24
 1058 029c 80F9      		bld r24,0
 1059 029e 1F92      		push __zero_reg__
 1060               	.LCFI95:
 1061               		.cfi_def_cfa_offset 12
 1062 02a0 8F93      		push r24
 1063               	.LCFI96:
 1064               		.cfi_def_cfa_offset 13
 1065 02a2 80E0      		ldi r24,lo8(__c.5109)
 1066 02a4 90E0      		ldi r25,hi8(__c.5109)
 1067 02a6 9F93      		push r25
 1068               	.LCFI97:
 1069               		.cfi_def_cfa_offset 14
 1070 02a8 8F93      		push r24
 1071               	.LCFI98:
 1072               		.cfi_def_cfa_offset 15
 1073 02aa 0E94 0000 		call __xprintf
 1074 02ae 80E0      		ldi r24,lo8(__c.5111)
 1075 02b0 90E0      		ldi r25,hi8(__c.5111)
 1076 02b2 0E94 0000 		call xputs
 167:../../tmk_core/common/command.c ****     print(".swap_grave_esc: "); print_dec(kc.swap_grave_esc); print("\n");
 1077               		.loc 1 167 0
 1078 02b6 80E0      		ldi r24,lo8(__c.5113)
 1079 02b8 90E0      		ldi r25,hi8(__c.5113)
 1080 02ba 0E94 0000 		call xputs
 1081 02be C4FB      		bst r28,4
 1082 02c0 8827      		clr r24
 1083 02c2 80F9      		bld r24,0
 1084 02c4 1F92      		push __zero_reg__
 1085               	.LCFI99:
 1086               		.cfi_def_cfa_offset 16
 1087 02c6 8F93      		push r24
 1088               	.LCFI100:
 1089               		.cfi_def_cfa_offset 17
 1090 02c8 80E0      		ldi r24,lo8(__c.5115)
 1091 02ca 90E0      		ldi r25,hi8(__c.5115)
 1092 02cc 9F93      		push r25
 1093               	.LCFI101:
 1094               		.cfi_def_cfa_offset 18
 1095 02ce 8F93      		push r24
 1096               	.LCFI102:
 1097               		.cfi_def_cfa_offset 19
 1098 02d0 0E94 0000 		call __xprintf
 1099 02d4 80E0      		ldi r24,lo8(__c.5117)
 1100 02d6 90E0      		ldi r25,hi8(__c.5117)
 1101 02d8 0E94 0000 		call xputs
 168:../../tmk_core/common/command.c ****     print(".swap_backslash_backspace: "); print_dec(kc.swap_backslash_backspace); print("\n");
 1102               		.loc 1 168 0
 1103 02dc 80E0      		ldi r24,lo8(__c.5119)
 1104 02de 90E0      		ldi r25,hi8(__c.5119)
 1105 02e0 0E94 0000 		call xputs
 1106 02e4 C5FB      		bst r28,5
 1107 02e6 8827      		clr r24
 1108 02e8 80F9      		bld r24,0
 1109 02ea 1F92      		push __zero_reg__
 1110               	.LCFI103:
 1111               		.cfi_def_cfa_offset 20
 1112 02ec 8F93      		push r24
 1113               	.LCFI104:
 1114               		.cfi_def_cfa_offset 21
 1115 02ee 80E0      		ldi r24,lo8(__c.5121)
 1116 02f0 90E0      		ldi r25,hi8(__c.5121)
 1117 02f2 9F93      		push r25
 1118               	.LCFI105:
 1119               		.cfi_def_cfa_offset 22
 1120 02f4 8F93      		push r24
 1121               	.LCFI106:
 1122               		.cfi_def_cfa_offset 23
 1123 02f6 0E94 0000 		call __xprintf
 1124 02fa 80E0      		ldi r24,lo8(__c.5123)
 1125 02fc 90E0      		ldi r25,hi8(__c.5123)
 1126 02fe 0E94 0000 		call xputs
 169:../../tmk_core/common/command.c ****     print(".nkro: "); print_dec(kc.nkro); print("\n");
 1127               		.loc 1 169 0
 1128 0302 80E0      		ldi r24,lo8(__c.5125)
 1129 0304 90E0      		ldi r25,hi8(__c.5125)
 1130 0306 0E94 0000 		call xputs
 1131 030a C6FB      		bst r28,6
 1132 030c 8827      		clr r24
 1133 030e 80F9      		bld r24,0
 1134 0310 1F92      		push __zero_reg__
 1135               	.LCFI107:
 1136               		.cfi_def_cfa_offset 24
 1137 0312 8F93      		push r24
 1138               	.LCFI108:
 1139               		.cfi_def_cfa_offset 25
 1140 0314 80E0      		ldi r24,lo8(__c.5127)
 1141 0316 90E0      		ldi r25,hi8(__c.5127)
 1142 0318 9F93      		push r25
 1143               	.LCFI109:
 1144               		.cfi_def_cfa_offset 26
 1145 031a 8F93      		push r24
 1146               	.LCFI110:
 1147               		.cfi_def_cfa_offset 27
 1148 031c 0E94 0000 		call __xprintf
 1149 0320 80E0      		ldi r24,lo8(__c.5129)
 1150 0322 90E0      		ldi r25,hi8(__c.5129)
 1151 0324 0E94 0000 		call xputs
 170:../../tmk_core/common/command.c **** 
 1152               		.loc 1 170 0
 1153 0328 80E0      		ldi r24,lo8(__c.5131)
 1154 032a 90E0      		ldi r25,hi8(__c.5131)
 1155 032c 0E94 0000 		call xputs
 1156 0330 C7FB      		bst r28,7
 1157 0332 CC27      		clr r28
 1158 0334 C0F9      		bld r28,0
 1159 0336 1F92      		push __zero_reg__
 1160               	.LCFI111:
 1161               		.cfi_def_cfa_offset 28
 1162 0338 CF93      		push r28
 1163               	.LCFI112:
 1164               		.cfi_def_cfa_offset 29
 1165 033a 80E0      		ldi r24,lo8(__c.5133)
 1166 033c 90E0      		ldi r25,hi8(__c.5133)
 1167 033e 9F93      		push r25
 1168               	.LCFI113:
 1169               		.cfi_def_cfa_offset 30
 1170 0340 8F93      		push r24
 1171               	.LCFI114:
 1172               		.cfi_def_cfa_offset 31
 1173 0342 0E94 0000 		call __xprintf
 1174 0346 80E0      		ldi r24,lo8(__c.5135)
 1175 0348 90E0      		ldi r25,hi8(__c.5135)
 1176 034a 0E94 0000 		call xputs
 1177 034e 8DB7      		in r24,__SP_L__
 1178 0350 9EB7      		in r25,__SP_H__
 1179 0352 4C96      		adiw r24,28
 1180 0354 0FB6      		in __tmp_reg__,__SREG__
 1181 0356 F894      		cli
 1182 0358 9EBF      		out __SP_H__,r25
 1183 035a 0FBE      		out __SREG__,__tmp_reg__
 1184 035c 8DBF      		out __SP_L__,r24
 1185               	.LCFI115:
 1186               		.cfi_def_cfa_offset 3
 1187 035e 00C0      		rjmp .L96
 1188               	.L58:
 1189               	.LBE116:
 1190               	.LBE115:
 1191               	.LBB117:
 1192               	.LBB118:
 118:../../tmk_core/common/command.c ****           "d:	debug\n"
 1193               		.loc 1 118 0
 1194 0360 80E0      		ldi r24,lo8(__c.5040)
 1195 0362 90E0      		ldi r25,hi8(__c.5040)
 1196               	.L99:
 1197 0364 0E94 0000 		call xputs
 1198               	.L96:
 1199               	.LBE118:
 1200               	.LBE117:
 385:../../tmk_core/common/command.c **** }
 1201               		.loc 1 385 0
 1202 0368 C1E0      		ldi r28,lo8(1)
 1203 036a 00C0      		rjmp .L71
 1204               	.L54:
 243:../../tmk_core/common/command.c ****                 print("\ndebug: off\n");
 1205               		.loc 1 243 0
 1206 036c 8091 0000 		lds r24,debug_config
 1207 0370 C82F      		mov r28,r24
 1208 0372 C170      		andi r28,1
 1209 0374 80FF      		sbrs r24,0
 1210 0376 00C0      		rjmp .L72
 244:../../tmk_core/common/command.c ****                 debug_matrix   = false;
 1211               		.loc 1 244 0
 1212 0378 80E0      		ldi r24,lo8(__c.5153)
 1213 037a 90E0      		ldi r25,hi8(__c.5153)
 1214 037c 0E94 0000 		call xputs
 245:../../tmk_core/common/command.c ****                 debug_keyboard = false;
 1215               		.loc 1 245 0
 1216 0380 8091 0000 		lds r24,debug_config
 248:../../tmk_core/common/command.c ****             } else {
 1217               		.loc 1 248 0
 1218 0384 817F      		andi r24,lo8(-15)
 1219 0386 8E7F      		andi r24,lo8(~(1<<0))
 1220 0388 00C0      		rjmp .L97
 1221               	.L72:
 250:../../tmk_core/common/command.c ****                 debug_enable   = true;
 1222               		.loc 1 250 0
 1223 038a 80E0      		ldi r24,lo8(__c.5155)
 1224 038c 90E0      		ldi r25,hi8(__c.5155)
 1225 038e 0E94 0000 		call xputs
 251:../../tmk_core/common/command.c ****             }
 1226               		.loc 1 251 0
 1227 0392 8091 0000 		lds r24,debug_config
 1228 0396 8160      		ori r24,lo8(1<<0)
 1229 0398 8093 0000 		sts debug_config,r24
 1230 039c 00C0      		rjmp .L96
 1231               	.L50:
 255:../../tmk_core/common/command.c ****             if (debug_matrix) {
 1232               		.loc 1 255 0
 1233 039e 9091 0000 		lds r25,debug_config
 1234 03a2 91FB      		bst r25,1
 1235 03a4 CC27      		clr r28
 1236 03a6 C0F9      		bld r28,0
 1237 03a8 81E0      		ldi r24,lo8(1)
 1238 03aa C827      		eor r28,r24
 1239 03ac 892F      		mov r24,r25
 1240 03ae C0FB      		bst r28,0
 1241 03b0 81F9      		bld r24,1
 1242 03b2 8093 0000 		sts debug_config,r24
 256:../../tmk_core/common/command.c ****                 print("\nmatrix: on\n");
 1243               		.loc 1 256 0
 1244 03b6 CC23      		tst r28
 1245 03b8 01F0      		breq .L73
 257:../../tmk_core/common/command.c ****                 debug_enable = true;
 1246               		.loc 1 257 0
 1247 03ba 80E0      		ldi r24,lo8(__c.5158)
 1248 03bc 90E0      		ldi r25,hi8(__c.5158)
 1249 03be 00C0      		rjmp .L98
 1250               	.L73:
 260:../../tmk_core/common/command.c ****             }
 1251               		.loc 1 260 0
 1252 03c0 80E0      		ldi r24,lo8(__c.5160)
 1253 03c2 90E0      		ldi r25,hi8(__c.5160)
 1254 03c4 00C0      		rjmp .L99
 1255               	.L52:
 264:../../tmk_core/common/command.c ****             if (debug_keyboard) {
 1256               		.loc 1 264 0
 1257 03c6 9091 0000 		lds r25,debug_config
 1258 03ca 92FB      		bst r25,2
 1259 03cc CC27      		clr r28
 1260 03ce C0F9      		bld r28,0
 1261 03d0 81E0      		ldi r24,lo8(1)
 1262 03d2 C827      		eor r28,r24
 1263 03d4 892F      		mov r24,r25
 1264 03d6 C0FB      		bst r28,0
 1265 03d8 82F9      		bld r24,2
 1266 03da 8093 0000 		sts debug_config,r24
 265:../../tmk_core/common/command.c ****                 print("\nkeyboard: on\n");
 1267               		.loc 1 265 0
 1268 03de CC23      		tst r28
 1269 03e0 01F0      		breq .L74
 266:../../tmk_core/common/command.c ****                 debug_enable = true;
 1270               		.loc 1 266 0
 1271 03e2 80E0      		ldi r24,lo8(__c.5163)
 1272 03e4 90E0      		ldi r25,hi8(__c.5163)
 1273 03e6 00C0      		rjmp .L98
 1274               	.L74:
 269:../../tmk_core/common/command.c ****             }
 1275               		.loc 1 269 0
 1276 03e8 80E0      		ldi r24,lo8(__c.5165)
 1277 03ea 90E0      		ldi r25,hi8(__c.5165)
 1278 03ec 00C0      		rjmp .L99
 1279               	.L61:
 273:../../tmk_core/common/command.c ****             if (debug_mouse) {
 1280               		.loc 1 273 0
 1281 03ee 9091 0000 		lds r25,debug_config
 1282 03f2 93FB      		bst r25,3
 1283 03f4 CC27      		clr r28
 1284 03f6 C0F9      		bld r28,0
 1285 03f8 81E0      		ldi r24,lo8(1)
 1286 03fa C827      		eor r28,r24
 1287 03fc 892F      		mov r24,r25
 1288 03fe C0FB      		bst r28,0
 1289 0400 83F9      		bld r24,3
 1290 0402 8093 0000 		sts debug_config,r24
 274:../../tmk_core/common/command.c ****                 print("\nmouse: on\n");
 1291               		.loc 1 274 0
 1292 0406 CC23      		tst r28
 1293 0408 01F0      		breq .L75
 275:../../tmk_core/common/command.c ****                 debug_enable = true;
 1294               		.loc 1 275 0
 1295 040a 80E0      		ldi r24,lo8(__c.5168)
 1296 040c 90E0      		ldi r25,hi8(__c.5168)
 1297               	.L98:
 1298 040e 0E94 0000 		call xputs
 276:../../tmk_core/common/command.c ****             } else {
 1299               		.loc 1 276 0
 1300 0412 8091 0000 		lds r24,debug_config
 1301 0416 8160      		ori r24,lo8(1<<0)
 1302               	.L97:
 1303 0418 8093 0000 		sts debug_config,r24
 1304 041c 00C0      		rjmp .L71
 1305               	.L75:
 278:../../tmk_core/common/command.c ****             }
 1306               		.loc 1 278 0
 1307 041e 80E0      		ldi r24,lo8(__c.5170)
 1308 0420 90E0      		ldi r25,hi8(__c.5170)
 1309 0422 00C0      		rjmp .L99
 1310               	.L62:
 335:../../tmk_core/common/command.c ****             print_val_hex8(host_keyboard_leds());
 1311               		.loc 1 335 0
 1312 0424 80E0      		ldi r24,lo8(__c.5186)
 1313 0426 90E0      		ldi r25,hi8(__c.5186)
 1314 0428 0E94 0000 		call xputs
 336:../../tmk_core/common/command.c ****             print_val_hex8(keyboard_protocol);
 1315               		.loc 1 336 0
 1316 042c 0E94 0000 		call host_keyboard_leds
 1317 0430 1F92      		push __zero_reg__
 1318               	.LCFI116:
 1319               		.cfi_def_cfa_offset 4
 1320 0432 8F93      		push r24
 1321               	.LCFI117:
 1322               		.cfi_def_cfa_offset 5
 1323 0434 80E0      		ldi r24,lo8(__c.5188)
 1324 0436 90E0      		ldi r25,hi8(__c.5188)
 1325 0438 9F93      		push r25
 1326               	.LCFI118:
 1327               		.cfi_def_cfa_offset 6
 1328 043a 8F93      		push r24
 1329               	.LCFI119:
 1330               		.cfi_def_cfa_offset 7
 1331 043c 0E94 0000 		call __xprintf
 337:../../tmk_core/common/command.c ****             print_val_hex8(keyboard_idle);
 1332               		.loc 1 337 0
 1333 0440 8091 0000 		lds r24,keyboard_protocol
 1334 0444 1F92      		push __zero_reg__
 1335               	.LCFI120:
 1336               		.cfi_def_cfa_offset 8
 1337 0446 8F93      		push r24
 1338               	.LCFI121:
 1339               		.cfi_def_cfa_offset 9
 1340 0448 80E0      		ldi r24,lo8(__c.5190)
 1341 044a 90E0      		ldi r25,hi8(__c.5190)
 1342 044c 9F93      		push r25
 1343               	.LCFI122:
 1344               		.cfi_def_cfa_offset 10
 1345 044e 8F93      		push r24
 1346               	.LCFI123:
 1347               		.cfi_def_cfa_offset 11
 1348 0450 0E94 0000 		call __xprintf
 338:../../tmk_core/common/command.c **** #ifdef NKRO_ENABLE
 1349               		.loc 1 338 0
 1350 0454 8091 0000 		lds r24,keyboard_idle
 1351 0458 1F92      		push __zero_reg__
 1352               	.LCFI124:
 1353               		.cfi_def_cfa_offset 12
 1354 045a 8F93      		push r24
 1355               	.LCFI125:
 1356               		.cfi_def_cfa_offset 13
 1357 045c 80E0      		ldi r24,lo8(__c.5192)
 1358 045e 90E0      		ldi r25,hi8(__c.5192)
 1359 0460 9F93      		push r25
 1360               	.LCFI126:
 1361               		.cfi_def_cfa_offset 14
 1362 0462 8F93      		push r24
 1363               	.LCFI127:
 1364               		.cfi_def_cfa_offset 15
 1365 0464 0E94 0000 		call __xprintf
 340:../../tmk_core/common/command.c **** #endif
 1366               		.loc 1 340 0
 1367 0468 8091 0000 		lds r24,keyboard_nkro
 1368 046c 1F92      		push __zero_reg__
 1369               	.LCFI128:
 1370               		.cfi_def_cfa_offset 16
 1371 046e 8F93      		push r24
 1372               	.LCFI129:
 1373               		.cfi_def_cfa_offset 17
 1374 0470 80E0      		ldi r24,lo8(__c.5194)
 1375 0472 90E0      		ldi r25,hi8(__c.5194)
 1376 0474 9F93      		push r25
 1377               	.LCFI130:
 1378               		.cfi_def_cfa_offset 18
 1379 0476 8F93      		push r24
 1380               	.LCFI131:
 1381               		.cfi_def_cfa_offset 19
 1382 0478 0E94 0000 		call __xprintf
 342:../../tmk_core/common/command.c **** 
 1383               		.loc 1 342 0
 1384 047c 0E94 0000 		call timer_read32
 1385 0480 9F93      		push r25
 1386               	.LCFI132:
 1387               		.cfi_def_cfa_offset 20
 1388 0482 8F93      		push r24
 1389               	.LCFI133:
 1390               		.cfi_def_cfa_offset 21
 1391 0484 7F93      		push r23
 1392               	.LCFI134:
 1393               		.cfi_def_cfa_offset 22
 1394 0486 6F93      		push r22
 1395               	.LCFI135:
 1396               		.cfi_def_cfa_offset 23
 1397 0488 80E0      		ldi r24,lo8(__c.5196)
 1398 048a 90E0      		ldi r25,hi8(__c.5196)
 1399 048c 9F93      		push r25
 1400               	.LCFI136:
 1401               		.cfi_def_cfa_offset 24
 1402 048e 8F93      		push r24
 1403               	.LCFI137:
 1404               		.cfi_def_cfa_offset 25
 1405 0490 0E94 0000 		call __xprintf
 357:../../tmk_core/common/command.c **** #ifdef NKRO_ENABLE
 1406               		.loc 1 357 0
 1407 0494 8DB7      		in r24,__SP_L__
 1408 0496 9EB7      		in r25,__SP_H__
 1409 0498 4696      		adiw r24,22
 1410 049a 0FB6      		in __tmp_reg__,__SREG__
 1411 049c F894      		cli
 1412 049e 9EBF      		out __SP_H__,r25
 1413 04a0 0FBE      		out __SREG__,__tmp_reg__
 1414 04a2 8DBF      		out __SP_L__,r24
 1415               	.LCFI138:
 1416               		.cfi_def_cfa_offset 3
 1417 04a4 00C0      		rjmp .L96
 1418               	.L59:
 360:../../tmk_core/common/command.c ****             keyboard_nkro = !keyboard_nkro;
 1419               		.loc 1 360 0
 1420 04a6 0E94 0000 		call clear_keyboard
 361:../../tmk_core/common/command.c ****             if (keyboard_nkro) {
 1421               		.loc 1 361 0
 1422 04aa C091 0000 		lds r28,keyboard_nkro
 1423 04ae 81E0      		ldi r24,lo8(1)
 1424 04b0 C827      		eor r28,r24
 1425 04b2 C093 0000 		sts keyboard_nkro,r28
 362:../../tmk_core/common/command.c ****                 print("NKRO: on\n");
 1426               		.loc 1 362 0
 1427 04b6 CC23      		tst r28
 1428 04b8 01F0      		breq .L76
 363:../../tmk_core/common/command.c ****             } else {
 1429               		.loc 1 363 0
 1430 04ba 80E0      		ldi r24,lo8(__c.5199)
 1431 04bc 90E0      		ldi r25,hi8(__c.5199)
 1432 04be 0E94 0000 		call xputs
 1433 04c2 00C0      		rjmp .L71
 1434               	.L76:
 365:../../tmk_core/common/command.c ****             }
 1435               		.loc 1 365 0
 1436 04c4 80E0      		ldi r24,lo8(__c.5201)
 1437 04c6 90E0      		ldi r25,hi8(__c.5201)
 1438 04c8 00C0      		rjmp .L99
 1439               	.L64:
 373:../../tmk_core/common/command.c ****             break;
 1440               		.loc 1 373 0
 1441 04ca 80E0      		ldi r24,0
 1442 04cc 00C0      		rjmp .L100
 1443               	.L69:
 379:../../tmk_core/common/command.c ****             break;
 1444               		.loc 1 379 0
 1445 04ce 8953      		subi r24,lo8(-(-57))
 1446               	.L100:
 1447 04d0 0E94 0000 		call switch_default_layer
 1448 04d4 00C0      		rjmp .L96
 1449               	.L49:
 382:../../tmk_core/common/command.c ****             return false;
 1450               		.loc 1 382 0
 1451 04d6 80E0      		ldi r24,lo8(__c.5210)
 1452 04d8 90E0      		ldi r25,hi8(__c.5210)
 1453 04da 0E94 0000 		call xputs
 383:../../tmk_core/common/command.c ****     }
 1454               		.loc 1 383 0
 1455 04de C0E0      		ldi r28,0
 1456               	.L71:
 386:../../tmk_core/common/command.c **** 
 1457               		.loc 1 386 0
 1458 04e0 8C2F      		mov r24,r28
 1459               	/* epilogue start */
 1460 04e2 CF91      		pop r28
 1461 04e4 0895      		ret
 1462               		.cfi_endproc
 1463               	.LFE108:
 1465               		.section	.text.command_console_extra,"ax",@progbits
 1466               		.weak	command_console_extra
 1468               	command_console_extra:
 1469               	.LFB105:
 107:../../tmk_core/common/command.c ****     (void)code;
 1470               		.loc 1 107 0
 1471               		.cfi_startproc
 1472               	.LVL52:
 1473               	/* prologue: function */
 1474               	/* frame size = 0 */
 1475               	/* stack size = 0 */
 1476               	.L__stack_usage = 0
 110:../../tmk_core/common/command.c **** 
 1477               		.loc 1 110 0
 1478 0000 80E0      		ldi r24,0
 1479               	.LVL53:
 1480 0002 0895      		ret
 1481               		.cfi_endproc
 1482               	.LFE105:
 1484               		.set	command_console_extra.localalias.0,command_console_extra
 1485               		.section	.text.command_extra,"ax",@progbits
 1486               		.weak	command_extra
 1488               	command_extra:
 1489               	.LFB119:
 1490               		.cfi_startproc
 1491               	/* prologue: function */
 1492               	/* frame size = 0 */
 1493               	/* stack size = 0 */
 1494               	.L__stack_usage = 0
 1495 0000 0C94 0000 		jmp command_console_extra.localalias.0
 1496               		.cfi_endproc
 1497               	.LFE119:
 1499               		.section	.text.command_proc,"ax",@progbits
 1500               	.global	command_proc
 1502               	command_proc:
 1503               	.LFB103:
  71:../../tmk_core/common/command.c ****     switch (command_state) {
 1504               		.loc 1 71 0
 1505               		.cfi_startproc
  71:../../tmk_core/common/command.c ****     switch (command_state) {
 1506               		.loc 1 71 0
 1507 0000 CF93      		push r28
 1508               	.LCFI139:
 1509               		.cfi_def_cfa_offset 3
 1510               		.cfi_offset 28, -2
 1511               	/* prologue: function */
 1512               	/* frame size = 0 */
 1513               	/* stack size = 1 */
 1514               	.L__stack_usage = 1
 1515 0002 C82F      		mov r28,r24
  72:../../tmk_core/common/command.c ****         case ONESHOT:
 1516               		.loc 1 72 0
 1517 0004 8091 0000 		lds r24,command_state
 1518 0008 8130      		cpi r24,lo8(1)
 1519 000a 01F0      		breq .L105
 1520 000c 00F0      		brlo .L106
 1521 000e 8230      		cpi r24,lo8(2)
 1522 0010 01F4      		brne .+2
 1523 0012 00C0      		rjmp .L107
 1524 0014 00C0      		rjmp .L172
 1525               	.L106:
  74:../../tmk_core/common/command.c ****                 return false;
 1526               		.loc 1 74 0
 1527 0016 E091 0000 		lds r30,keyboard_report
 1528 001a F091 0000 		lds r31,keyboard_report+1
 1529 001e 8081      		ld r24,Z
 1530 0020 8232      		cpi r24,lo8(34)
 1531 0022 01F0      		breq .+2
 1532 0024 00C0      		rjmp .L136
 1533 0026 00C0      		rjmp .L171
 1534               	.L105:
  79:../../tmk_core/common/command.c ****                 return (command_extra(code) || command_common(code));
 1535               		.loc 1 79 0
 1536 0028 E091 0000 		lds r30,keyboard_report
 1537 002c F091 0000 		lds r31,keyboard_report+1
 1538 0030 8081      		ld r24,Z
 1539 0032 8232      		cpi r24,lo8(34)
 1540 0034 01F4      		brne .L110
 1541               	.L171:
  80:../../tmk_core/common/command.c ****             else
 1542               		.loc 1 80 0
 1543 0036 8C2F      		mov r24,r28
 1544 0038 0E94 0000 		call command_extra
 1545 003c 8111      		cpse r24,__zero_reg__
 1546 003e 00C0      		rjmp .L138
  80:../../tmk_core/common/command.c ****             else
 1547               		.loc 1 80 0 is_stmt 0 discriminator 2
 1548 0040 8C2F      		mov r24,r28
 1549 0042 0E94 0000 		call command_common
 1550 0046 00C0      		rjmp .L135
 1551               	.L138:
  80:../../tmk_core/common/command.c ****             else
 1552               		.loc 1 80 0
 1553 0048 81E0      		ldi r24,lo8(1)
 1554 004a 90E0      		ldi r25,0
 1555 004c 00C0      		rjmp .L135
 1556               	.L110:
  82:../../tmk_core/common/command.c ****             break;
 1557               		.loc 1 82 0 is_stmt 1
 1558 004e 8C2F      		mov r24,r28
 1559 0050 0E94 0000 		call command_console_extra
 1560 0054 8111      		cpse r24,__zero_reg__
 1561 0056 00C0      		rjmp .L112
 1562               	.LBB157:
 1563               	.LBB158:
 404:../../tmk_core/common/command.c ****         case KC_H:
 1564               		.loc 1 404 0
 1565 0058 C431      		cpi r28,lo8(20)
 1566 005a 01F0      		breq .L114
 1567 005c 00F4      		brsh .L115
 1568 005e CB30      		cpi r28,lo8(11)
 1569 0060 01F0      		breq .L116
 1570 0062 C031      		cpi r28,lo8(16)
 1571 0064 01F4      		brne .L113
 415:../../tmk_core/common/command.c ****             print("M> ");
 1572               		.loc 1 415 0
 1573 0066 0E94 0000 		call mousekey_console_help
 416:../../tmk_core/common/command.c ****             command_state = MOUSEKEY;
 1574               		.loc 1 416 0
 1575 006a 80E0      		ldi r24,lo8(__c.5226)
 1576 006c 90E0      		ldi r25,hi8(__c.5226)
 1577 006e 0E94 0000 		call xputs
 417:../../tmk_core/common/command.c ****             return true;
 1578               		.loc 1 417 0
 1579 0072 82E0      		ldi r24,lo8(2)
 1580 0074 8093 0000 		sts command_state,r24
 1581 0078 00C0      		rjmp .L112
 1582               	.L115:
 404:../../tmk_core/common/command.c ****         case KC_H:
 1583               		.loc 1 404 0
 1584 007a C932      		cpi r28,lo8(41)
 1585 007c 01F0      		breq .L114
 1586 007e C833      		cpi r28,lo8(56)
 1587 0080 01F4      		brne .L113
 1588               	.L116:
 1589               	.LBB159:
 1590               	.LBB160:
 394:../../tmk_core/common/command.c ****           "ESC/q:	quit\n"
 1591               		.loc 1 394 0
 1592 0082 80E0      		ldi r24,lo8(__c.5215)
 1593 0084 90E0      		ldi r25,hi8(__c.5215)
 1594 0086 0E94 0000 		call xputs
 1595               	.LBE160:
 1596               	.LBE159:
 424:../../tmk_core/common/command.c ****     return true;
 1597               		.loc 1 424 0
 1598 008a 80E0      		ldi r24,lo8(__c.5231)
 1599 008c 90E0      		ldi r25,hi8(__c.5231)
 1600 008e 0E94 0000 		call xputs
 1601 0092 00C0      		rjmp .L112
 1602               	.L114:
 411:../../tmk_core/common/command.c ****             return false;
 1603               		.loc 1 411 0
 1604 0094 1092 0000 		sts command_state,__zero_reg__
 1605 0098 00C0      		rjmp .L118
 1606               	.L113:
 421:../../tmk_core/common/command.c ****             return false;
 1607               		.loc 1 421 0
 1608 009a 80E0      		ldi r24,lo8(__c.5229)
 1609 009c 90E0      		ldi r25,hi8(__c.5229)
 1610 009e 0E94 0000 		call xputs
 1611 00a2 00C0      		rjmp .L118
 1612               	.L112:
 1613               	.LBE158:
 1614               	.LBE157:
  82:../../tmk_core/common/command.c ****             break;
 1615               		.loc 1 82 0
 1616 00a4 81E0      		ldi r24,lo8(1)
 1617               	.L135:
  82:../../tmk_core/common/command.c ****             break;
 1618               		.loc 1 82 0 is_stmt 0 discriminator 6
 1619 00a6 8170      		andi r24,lo8(1)
 1620 00a8 00C0      		rjmp .L164
 1621               	.L107:
 1622               	.LBB161:
 1623               	.LBB162:
 569:../../tmk_core/common/command.c ****         case KC_H:
 1624               		.loc 1 569 0 is_stmt 1
 1625 00aa C432      		cpi r28,lo8(36)
 1626 00ac 00F4      		brsh .L120
 1627 00ae CE31      		cpi r28,lo8(30)
 1628 00b0 00F0      		brlo .+2
 1629 00b2 00C0      		rjmp .L121
 1630 00b4 CB30      		cpi r28,lo8(11)
 1631 00b6 01F0      		breq .L122
 1632 00b8 00F4      		brsh .L123
 1633 00ba C730      		cpi r28,lo8(7)
 1634 00bc 01F0      		breq .+2
 1635 00be 00C0      		rjmp .L119
 608:../../tmk_core/common/command.c ****             mk_interval = MOUSEKEY_INTERVAL;
 1636               		.loc 1 608 0
 1637 00c0 8EE1      		ldi r24,lo8(30)
 1638 00c2 8093 0000 		sts mk_delay,r24
 609:../../tmk_core/common/command.c ****             mk_max_speed = MOUSEKEY_MAX_SPEED;
 1639               		.loc 1 609 0
 1640 00c6 82E3      		ldi r24,lo8(50)
 1641 00c8 8093 0000 		sts mk_interval,r24
 610:../../tmk_core/common/command.c ****             mk_time_to_max = MOUSEKEY_TIME_TO_MAX;
 1642               		.loc 1 610 0
 1643 00cc 8AE0      		ldi r24,lo8(10)
 1644 00ce 8093 0000 		sts mk_max_speed,r24
 611:../../tmk_core/common/command.c ****             mk_wheel_max_speed = MOUSEKEY_WHEEL_MAX_SPEED;
 1645               		.loc 1 611 0
 1646 00d2 84E1      		ldi r24,lo8(20)
 1647 00d4 8093 0000 		sts mk_time_to_max,r24
 612:../../tmk_core/common/command.c ****             mk_wheel_time_to_max = MOUSEKEY_WHEEL_TIME_TO_MAX;
 1648               		.loc 1 612 0
 1649 00d8 88E0      		ldi r24,lo8(8)
 1650 00da 8093 0000 		sts mk_wheel_max_speed,r24
 613:../../tmk_core/common/command.c ****             print("set default\n");
 1651               		.loc 1 613 0
 1652 00de 88E2      		ldi r24,lo8(40)
 1653 00e0 8093 0000 		sts mk_wheel_time_to_max,r24
 614:../../tmk_core/common/command.c ****             break;
 1654               		.loc 1 614 0
 1655 00e4 80E0      		ldi r24,lo8(__c.5350)
 1656 00e6 90E0      		ldi r25,hi8(__c.5350)
 1657 00e8 0E94 0000 		call xputs
 1658 00ec 00C0      		rjmp .L132
 1659               	.L123:
 569:../../tmk_core/common/command.c ****         case KC_H:
 1660               		.loc 1 569 0
 1661 00ee C331      		cpi r28,lo8(19)
 1662 00f0 01F0      		breq .L125
 1663 00f2 C431      		cpi r28,lo8(20)
 1664 00f4 01F0      		breq .L126
 1665 00f6 00C0      		rjmp .L119
 1666               	.L120:
 1667 00f8 CB34      		cpi r28,lo8(75)
 1668 00fa 01F4      		brne .+2
 1669 00fc 00C0      		rjmp .L127
 1670 00fe 00F4      		brsh .L128
 1671 0100 C932      		cpi r28,lo8(41)
 1672 0102 01F0      		breq .L126
 1673 0104 C833      		cpi r28,lo8(56)
 1674 0106 01F0      		breq .L122
 1675 0108 00C0      		rjmp .L119
 1676               	.L128:
 1677 010a C135      		cpi r28,lo8(81)
 1678 010c 01F4      		brne .+2
 1679 010e 00C0      		rjmp .L129
 1680 0110 C235      		cpi r28,lo8(82)
 1681 0112 01F4      		brne .+2
 1682 0114 00C0      		rjmp .L130
 1683 0116 CE34      		cpi r28,lo8(78)
 1684 0118 01F0      		breq .+2
 1685 011a 00C0      		rjmp .L119
 605:../../tmk_core/common/command.c ****             break;
 1686               		.loc 1 605 0
 1687 011c 6AE0      		ldi r22,lo8(10)
 1688 011e 00C0      		rjmp .L166
 1689               	.L122:
 572:../../tmk_core/common/command.c ****             break;
 1690               		.loc 1 572 0
 1691 0120 0E94 0000 		call mousekey_console_help
 1692 0124 00C0      		rjmp .L132
 1693               	.L126:
 576:../../tmk_core/common/command.c ****                 mousekey_param = 0;
 1694               		.loc 1 576 0
 1695 0126 8091 0000 		lds r24,mousekey_param
 1696 012a 8823      		tst r24
 1697 012c 01F0      		breq .L133
 577:../../tmk_core/common/command.c ****             } else {
 1698               		.loc 1 577 0
 1699 012e 1092 0000 		sts mousekey_param,__zero_reg__
 1700 0132 00C0      		rjmp .L132
 1701               	.L133:
 579:../../tmk_core/common/command.c ****                 command_state = CONSOLE;
 1702               		.loc 1 579 0
 1703 0134 80E0      		ldi r24,lo8(__c.5336)
 1704 0136 90E0      		ldi r25,hi8(__c.5336)
 1705 0138 0E94 0000 		call xputs
 580:../../tmk_core/common/command.c ****                 return false;
 1706               		.loc 1 580 0
 1707 013c 81E0      		ldi r24,lo8(1)
 1708 013e 8093 0000 		sts command_state,r24
 1709 0142 00C0      		rjmp .L164
 1710               	.L125:
 1711               	.LBB163:
 1712               	.LBB164:
 437:../../tmk_core/common/command.c ****     print("1: delay(*10ms): "); pdec(mk_delay); print("\n");
 1713               		.loc 1 437 0
 1714 0144 80E0      		ldi r24,lo8(__c.5237)
 1715 0146 90E0      		ldi r25,hi8(__c.5237)
 1716 0148 0E94 0000 		call xputs
 438:../../tmk_core/common/command.c ****     print("2: interval(ms): "); pdec(mk_interval); print("\n");
 1717               		.loc 1 438 0
 1718 014c 80E0      		ldi r24,lo8(__c.5239)
 1719 014e 90E0      		ldi r25,hi8(__c.5239)
 1720 0150 0E94 0000 		call xputs
 1721 0154 8091 0000 		lds r24,mk_delay
 1722 0158 1F92      		push __zero_reg__
 1723               	.LCFI140:
 1724               		.cfi_def_cfa_offset 4
 1725 015a 8F93      		push r24
 1726               	.LCFI141:
 1727               		.cfi_def_cfa_offset 5
 1728 015c 80E0      		ldi r24,lo8(__c.5241)
 1729 015e 90E0      		ldi r25,hi8(__c.5241)
 1730 0160 9F93      		push r25
 1731               	.LCFI142:
 1732               		.cfi_def_cfa_offset 6
 1733 0162 8F93      		push r24
 1734               	.LCFI143:
 1735               		.cfi_def_cfa_offset 7
 1736 0164 0E94 0000 		call __xprintf
 1737 0168 80E0      		ldi r24,lo8(__c.5243)
 1738 016a 90E0      		ldi r25,hi8(__c.5243)
 1739 016c 0E94 0000 		call xputs
 439:../../tmk_core/common/command.c ****     print("3: max_speed: "); pdec(mk_max_speed); print("\n");
 1740               		.loc 1 439 0
 1741 0170 80E0      		ldi r24,lo8(__c.5245)
 1742 0172 90E0      		ldi r25,hi8(__c.5245)
 1743 0174 0E94 0000 		call xputs
 1744 0178 8091 0000 		lds r24,mk_interval
 1745 017c 1F92      		push __zero_reg__
 1746               	.LCFI144:
 1747               		.cfi_def_cfa_offset 8
 1748 017e 8F93      		push r24
 1749               	.LCFI145:
 1750               		.cfi_def_cfa_offset 9
 1751 0180 80E0      		ldi r24,lo8(__c.5247)
 1752 0182 90E0      		ldi r25,hi8(__c.5247)
 1753 0184 9F93      		push r25
 1754               	.LCFI146:
 1755               		.cfi_def_cfa_offset 10
 1756 0186 8F93      		push r24
 1757               	.LCFI147:
 1758               		.cfi_def_cfa_offset 11
 1759 0188 0E94 0000 		call __xprintf
 1760 018c 80E0      		ldi r24,lo8(__c.5249)
 1761 018e 90E0      		ldi r25,hi8(__c.5249)
 1762 0190 0E94 0000 		call xputs
 440:../../tmk_core/common/command.c ****     print("4: time_to_max: "); pdec(mk_time_to_max); print("\n");
 1763               		.loc 1 440 0
 1764 0194 80E0      		ldi r24,lo8(__c.5251)
 1765 0196 90E0      		ldi r25,hi8(__c.5251)
 1766 0198 0E94 0000 		call xputs
 1767 019c 8091 0000 		lds r24,mk_max_speed
 1768 01a0 1F92      		push __zero_reg__
 1769               	.LCFI148:
 1770               		.cfi_def_cfa_offset 12
 1771 01a2 8F93      		push r24
 1772               	.LCFI149:
 1773               		.cfi_def_cfa_offset 13
 1774 01a4 80E0      		ldi r24,lo8(__c.5253)
 1775 01a6 90E0      		ldi r25,hi8(__c.5253)
 1776 01a8 9F93      		push r25
 1777               	.LCFI150:
 1778               		.cfi_def_cfa_offset 14
 1779 01aa 8F93      		push r24
 1780               	.LCFI151:
 1781               		.cfi_def_cfa_offset 15
 1782 01ac 0E94 0000 		call __xprintf
 1783 01b0 80E0      		ldi r24,lo8(__c.5255)
 1784 01b2 90E0      		ldi r25,hi8(__c.5255)
 1785 01b4 0E94 0000 		call xputs
 441:../../tmk_core/common/command.c ****     print("5: wheel_max_speed: "); pdec(mk_wheel_max_speed); print("\n");
 1786               		.loc 1 441 0
 1787 01b8 80E0      		ldi r24,lo8(__c.5257)
 1788 01ba 90E0      		ldi r25,hi8(__c.5257)
 1789 01bc 0E94 0000 		call xputs
 1790 01c0 8091 0000 		lds r24,mk_time_to_max
 1791 01c4 1F92      		push __zero_reg__
 1792               	.LCFI152:
 1793               		.cfi_def_cfa_offset 16
 1794 01c6 8F93      		push r24
 1795               	.LCFI153:
 1796               		.cfi_def_cfa_offset 17
 1797 01c8 80E0      		ldi r24,lo8(__c.5259)
 1798 01ca 90E0      		ldi r25,hi8(__c.5259)
 1799 01cc 9F93      		push r25
 1800               	.LCFI154:
 1801               		.cfi_def_cfa_offset 18
 1802 01ce 8F93      		push r24
 1803               	.LCFI155:
 1804               		.cfi_def_cfa_offset 19
 1805 01d0 0E94 0000 		call __xprintf
 1806 01d4 80E0      		ldi r24,lo8(__c.5261)
 1807 01d6 90E0      		ldi r25,hi8(__c.5261)
 1808 01d8 0E94 0000 		call xputs
 442:../../tmk_core/common/command.c ****     print("6: wheel_time_to_max: "); pdec(mk_wheel_time_to_max); print("\n");
 1809               		.loc 1 442 0
 1810 01dc 80E0      		ldi r24,lo8(__c.5263)
 1811 01de 90E0      		ldi r25,hi8(__c.5263)
 1812 01e0 0E94 0000 		call xputs
 1813 01e4 8091 0000 		lds r24,mk_wheel_max_speed
 1814 01e8 1F92      		push __zero_reg__
 1815               	.LCFI156:
 1816               		.cfi_def_cfa_offset 20
 1817 01ea 8F93      		push r24
 1818               	.LCFI157:
 1819               		.cfi_def_cfa_offset 21
 1820 01ec 80E0      		ldi r24,lo8(__c.5265)
 1821 01ee 90E0      		ldi r25,hi8(__c.5265)
 1822 01f0 9F93      		push r25
 1823               	.LCFI158:
 1824               		.cfi_def_cfa_offset 22
 1825 01f2 8F93      		push r24
 1826               	.LCFI159:
 1827               		.cfi_def_cfa_offset 23
 1828 01f4 0E94 0000 		call __xprintf
 1829 01f8 80E0      		ldi r24,lo8(__c.5267)
 1830 01fa 90E0      		ldi r25,hi8(__c.5267)
 1831 01fc 0E94 0000 		call xputs
 443:../../tmk_core/common/command.c **** }
 1832               		.loc 1 443 0
 1833 0200 80E0      		ldi r24,lo8(__c.5269)
 1834 0202 90E0      		ldi r25,hi8(__c.5269)
 1835 0204 0E94 0000 		call xputs
 1836 0208 8091 0000 		lds r24,mk_wheel_time_to_max
 1837 020c 1F92      		push __zero_reg__
 1838               	.LCFI160:
 1839               		.cfi_def_cfa_offset 24
 1840 020e 8F93      		push r24
 1841               	.LCFI161:
 1842               		.cfi_def_cfa_offset 25
 1843 0210 80E0      		ldi r24,lo8(__c.5271)
 1844 0212 90E0      		ldi r25,hi8(__c.5271)
 1845 0214 9F93      		push r25
 1846               	.LCFI162:
 1847               		.cfi_def_cfa_offset 26
 1848 0216 8F93      		push r24
 1849               	.LCFI163:
 1850               		.cfi_def_cfa_offset 27
 1851 0218 0E94 0000 		call __xprintf
 1852 021c 80E0      		ldi r24,lo8(__c.5273)
 1853 021e 90E0      		ldi r25,hi8(__c.5273)
 1854 0220 0E94 0000 		call xputs
 1855 0224 8DB7      		in r24,__SP_L__
 1856 0226 9EB7      		in r25,__SP_H__
 1857 0228 4896      		adiw r24,24
 1858 022a 0FB6      		in __tmp_reg__,__SREG__
 1859 022c F894      		cli
 1860 022e 9EBF      		out __SP_H__,r25
 1861 0230 0FBE      		out __SREG__,__tmp_reg__
 1862 0232 8DBF      		out __SP_L__,r24
 1863               	.LCFI164:
 1864               		.cfi_def_cfa_offset 3
 1865 0234 00C0      		rjmp .L132
 1866               	.L121:
 1867 0236 CE51      		subi r28,lo8(-(-30))
 1868 0238 EC2F      		mov r30,r28
 1869 023a F0E0      		ldi r31,0
 1870 023c E050      		subi r30,lo8(-(CSWTCH.43))
 1871 023e F040      		sbci r31,hi8(-(CSWTCH.43))
 1872               	.LBE164:
 1873               	.LBE163:
 593:../../tmk_core/common/command.c ****             break;
 1874               		.loc 1 593 0
 1875 0240 8081      		ld r24,Z
 1876 0242 8093 0000 		sts mousekey_param,r24
 1877 0246 00C0      		rjmp .L132
 1878               	.L130:
 596:../../tmk_core/common/command.c ****             break;
 1879               		.loc 1 596 0
 1880 0248 61E0      		ldi r22,lo8(1)
 1881 024a 00C0      		rjmp .L165
 1882               	.L129:
 599:../../tmk_core/common/command.c ****             break;
 1883               		.loc 1 599 0
 1884 024c 61E0      		ldi r22,lo8(1)
 1885 024e 00C0      		rjmp .L166
 1886               	.L127:
 602:../../tmk_core/common/command.c ****             break;
 1887               		.loc 1 602 0
 1888 0250 6AE0      		ldi r22,lo8(10)
 1889               	.L165:
 1890 0252 8091 0000 		lds r24,mousekey_param
 1891 0256 0E94 0000 		call mousekey_param_inc
 1892 025a 00C0      		rjmp .L132
 1893               	.L166:
 605:../../tmk_core/common/command.c ****             break;
 1894               		.loc 1 605 0
 1895 025c 8091 0000 		lds r24,mousekey_param
 1896 0260 0E94 0000 		call mousekey_param_dec
 1897 0264 00C0      		rjmp .L132
 1898               	.L119:
 617:../../tmk_core/common/command.c ****             return false;
 1899               		.loc 1 617 0
 1900 0266 80E0      		ldi r24,lo8(__c.5353)
 1901 0268 90E0      		ldi r25,hi8(__c.5353)
 1902 026a 00C0      		rjmp .L168
 1903               	.L132:
 620:../../tmk_core/common/command.c ****         xprintf("M%d> ", mousekey_param);
 1904               		.loc 1 620 0
 1905 026c 8091 0000 		lds r24,mousekey_param
 1906 0270 8823      		tst r24
 1907 0272 01F0      		breq .L134
 621:../../tmk_core/common/command.c ****     } else {
 1908               		.loc 1 621 0
 1909 0274 1F92      		push __zero_reg__
 1910               	.LCFI165:
 1911               		.cfi_def_cfa_offset 4
 1912 0276 8F93      		push r24
 1913               	.LCFI166:
 1914               		.cfi_def_cfa_offset 5
 1915 0278 80E0      		ldi r24,lo8(__c.5355)
 1916 027a 90E0      		ldi r25,hi8(__c.5355)
 1917 027c 9F93      		push r25
 1918               	.LCFI167:
 1919               		.cfi_def_cfa_offset 6
 1920 027e 8F93      		push r24
 1921               	.LCFI168:
 1922               		.cfi_def_cfa_offset 7
 1923 0280 0E94 0000 		call __xprintf
 1924 0284 0F90      		pop __tmp_reg__
 1925 0286 0F90      		pop __tmp_reg__
 1926 0288 0F90      		pop __tmp_reg__
 1927 028a 0F90      		pop __tmp_reg__
 1928               	.LCFI169:
 1929               		.cfi_def_cfa_offset 3
 1930 028c 00C0      		rjmp .L167
 1931               	.L134:
 623:../../tmk_core/common/command.c ****     }
 1932               		.loc 1 623 0
 1933 028e 80E0      		ldi r24,lo8(__c.5357)
 1934 0290 90E0      		ldi r25,hi8(__c.5357)
 1935               	.L168:
 1936 0292 0E94 0000 		call xputs
 1937               	.L167:
 1938               	.LBE162:
 1939               	.LBE161:
  93:../../tmk_core/common/command.c **** }
 1940               		.loc 1 93 0
 1941 0296 81E0      		ldi r24,lo8(1)
 1942 0298 00C0      		rjmp .L164
 1943               	.L172:
  90:../../tmk_core/common/command.c ****             return false;
 1944               		.loc 1 90 0
 1945 029a 1092 0000 		sts command_state,__zero_reg__
 1946               	.L136:
  75:../../tmk_core/common/command.c ****             return (command_extra(code) || command_common(code));
 1947               		.loc 1 75 0
 1948 029e 80E0      		ldi r24,0
 1949 02a0 00C0      		rjmp .L164
 1950               	.L118:
  82:../../tmk_core/common/command.c ****             break;
 1951               		.loc 1 82 0
 1952 02a2 80E0      		ldi r24,0
 1953 02a4 00C0      		rjmp .L135
 1954               	.L164:
 1955               	/* epilogue start */
  94:../../tmk_core/common/command.c **** 
 1956               		.loc 1 94 0
 1957 02a6 CF91      		pop r28
 1958 02a8 0895      		ret
 1959               		.cfi_endproc
 1960               	.LFE103:
 1962               		.section	.rodata.CSWTCH.43,"a",@progbits
 1965               	CSWTCH.43:
 1966 0000 01        		.byte	1
 1967 0001 02        		.byte	2
 1968 0002 03        		.byte	3
 1969 0003 04        		.byte	4
 1970 0004 05        		.byte	5
 1971 0005 06        		.byte	6
 1972 0006 07        		.byte	7
 1973 0007 08        		.byte	8
 1974 0008 09        		.byte	9
 1975 0009 00        		.byte	0
 1976               		.section	.progmem.data.__c.5319,"a",@progbits
 1979               	__c.5319:
 1980 0000 6D6B 5F77 		.string	"mk_wheel_time_to_max = %d\n"
 1980      6865 656C 
 1980      5F74 696D 
 1980      655F 746F 
 1980      5F6D 6178 
 1981               		.section	.progmem.data.__c.5316,"a",@progbits
 1984               	__c.5316:
 1985 0000 6D6B 5F77 		.string	"mk_wheel_max_speed = %d\n"
 1985      6865 656C 
 1985      5F6D 6178 
 1985      5F73 7065 
 1985      6564 203D 
 1986               		.section	.progmem.data.__c.5313,"a",@progbits
 1989               	__c.5313:
 1990 0000 6D6B 5F74 		.string	"mk_time_to_max = %d\n"
 1990      696D 655F 
 1990      746F 5F6D 
 1990      6178 203D 
 1990      2025 640A 
 1991               		.section	.progmem.data.__c.5310,"a",@progbits
 1994               	__c.5310:
 1995 0000 6D6B 5F6D 		.string	"mk_max_speed = %d\n"
 1995      6178 5F73 
 1995      7065 6564 
 1995      203D 2025 
 1995      640A 00
 1996               		.section	.progmem.data.__c.5307,"a",@progbits
 1999               	__c.5307:
 2000 0000 6D6B 5F69 		.string	"mk_interval = %d\n"
 2000      6E74 6572 
 2000      7661 6C20 
 2000      3D20 2564 
 2000      0A00 
 2001               		.section	.progmem.data.__c.5303,"a",@progbits
 2004               	__c.5303:
 2005 0000 6D6B 5F64 		.string	"mk_delay = %d\n"
 2005      656C 6179 
 2005      203D 2025 
 2005      640A 00
 2006               		.section	.progmem.data.__c.5296,"a",@progbits
 2009               	__c.5296:
 2010 0000 6D6B 5F77 		.string	"mk_wheel_time_to_max = %d\n"
 2010      6865 656C 
 2010      5F74 696D 
 2010      655F 746F 
 2010      5F6D 6178 
 2011               		.section	.progmem.data.__c.5293,"a",@progbits
 2014               	__c.5293:
 2015 0000 6D6B 5F77 		.string	"mk_wheel_max_speed = %d\n"
 2015      6865 656C 
 2015      5F6D 6178 
 2015      5F73 7065 
 2015      6564 203D 
 2016               		.section	.progmem.data.__c.5290,"a",@progbits
 2019               	__c.5290:
 2020 0000 6D6B 5F74 		.string	"mk_time_to_max = %d\n"
 2020      696D 655F 
 2020      746F 5F6D 
 2020      6178 203D 
 2020      2025 640A 
 2021               		.section	.progmem.data.__c.5287,"a",@progbits
 2024               	__c.5287:
 2025 0000 6D6B 5F6D 		.string	"mk_max_speed = %d\n"
 2025      6178 5F73 
 2025      7065 6564 
 2025      203D 2025 
 2025      640A 00
 2026               		.section	.progmem.data.__c.5284,"a",@progbits
 2029               	__c.5284:
 2030 0000 6D6B 5F69 		.string	"mk_interval = %d\n"
 2030      6E74 6572 
 2030      7661 6C20 
 2030      3D20 2564 
 2030      0A00 
 2031               		.section	.progmem.data.__c.5280,"a",@progbits
 2034               	__c.5280:
 2035 0000 6D6B 5F64 		.string	"mk_delay = %d\n"
 2035      656C 6179 
 2035      203D 2025 
 2035      640A 00
 2036               		.section	.progmem.data.__c.5273,"a",@progbits
 2039               	__c.5273:
 2040 0000 0A00      		.string	"\n"
 2041               		.section	.progmem.data.__c.5271,"a",@progbits
 2044               	__c.5271:
 2045 0000 2575 00   		.string	"%u"
 2046               		.section	.progmem.data.__c.5269,"a",@progbits
 2049               	__c.5269:
 2050 0000 363A 2077 		.string	"6: wheel_time_to_max: "
 2050      6865 656C 
 2050      5F74 696D 
 2050      655F 746F 
 2050      5F6D 6178 
 2051               		.section	.progmem.data.__c.5267,"a",@progbits
 2054               	__c.5267:
 2055 0000 0A00      		.string	"\n"
 2056               		.section	.progmem.data.__c.5265,"a",@progbits
 2059               	__c.5265:
 2060 0000 2575 00   		.string	"%u"
 2061               		.section	.progmem.data.__c.5263,"a",@progbits
 2064               	__c.5263:
 2065 0000 353A 2077 		.string	"5: wheel_max_speed: "
 2065      6865 656C 
 2065      5F6D 6178 
 2065      5F73 7065 
 2065      6564 3A20 
 2066               		.section	.progmem.data.__c.5261,"a",@progbits
 2069               	__c.5261:
 2070 0000 0A00      		.string	"\n"
 2071               		.section	.progmem.data.__c.5259,"a",@progbits
 2074               	__c.5259:
 2075 0000 2575 00   		.string	"%u"
 2076               		.section	.progmem.data.__c.5257,"a",@progbits
 2079               	__c.5257:
 2080 0000 343A 2074 		.string	"4: time_to_max: "
 2080      696D 655F 
 2080      746F 5F6D 
 2080      6178 3A20 
 2080      00
 2081               		.section	.progmem.data.__c.5255,"a",@progbits
 2084               	__c.5255:
 2085 0000 0A00      		.string	"\n"
 2086               		.section	.progmem.data.__c.5253,"a",@progbits
 2089               	__c.5253:
 2090 0000 2575 00   		.string	"%u"
 2091               		.section	.progmem.data.__c.5251,"a",@progbits
 2094               	__c.5251:
 2095 0000 333A 206D 		.string	"3: max_speed: "
 2095      6178 5F73 
 2095      7065 6564 
 2095      3A20 00
 2096               		.section	.progmem.data.__c.5249,"a",@progbits
 2099               	__c.5249:
 2100 0000 0A00      		.string	"\n"
 2101               		.section	.progmem.data.__c.5247,"a",@progbits
 2104               	__c.5247:
 2105 0000 2575 00   		.string	"%u"
 2106               		.section	.progmem.data.__c.5245,"a",@progbits
 2109               	__c.5245:
 2110 0000 323A 2069 		.string	"2: interval(ms): "
 2110      6E74 6572 
 2110      7661 6C28 
 2110      6D73 293A 
 2110      2000 
 2111               		.section	.progmem.data.__c.5243,"a",@progbits
 2114               	__c.5243:
 2115 0000 0A00      		.string	"\n"
 2116               		.section	.progmem.data.__c.5241,"a",@progbits
 2119               	__c.5241:
 2120 0000 2575 00   		.string	"%u"
 2121               		.section	.progmem.data.__c.5239,"a",@progbits
 2124               	__c.5239:
 2125 0000 313A 2064 		.string	"1: delay(*10ms): "
 2125      656C 6179 
 2125      282A 3130 
 2125      6D73 293A 
 2125      2000 
 2126               		.section	.progmem.data.__c.5237,"a",@progbits
 2129               	__c.5237:
 2130 0000 0A09 2D20 		.string	"\n\t- Values -\n"
 2130      5661 6C75 
 2130      6573 202D 
 2130      0A00 
 2131               		.section	.progmem.data.__c.5357,"a",@progbits
 2134               	__c.5357:
 2135 0000 4D3E 00   		.string	"M>"
 2136               		.section	.progmem.data.__c.5355,"a",@progbits
 2139               	__c.5355:
 2140 0000 4D25 643E 		.string	"M%d> "
 2140      2000 
 2141               		.section	.progmem.data.__c.5353,"a",@progbits
 2144               	__c.5353:
 2145 0000 3F00      		.string	"?"
 2146               		.section	.progmem.data.__c.5350,"a",@progbits
 2149               	__c.5350:
 2150 0000 7365 7420 		.string	"set default\n"
 2150      6465 6661 
 2150      756C 740A 
 2150      00
 2151               		.section	.progmem.data.__c.5336,"a",@progbits
 2154               	__c.5336:
 2155 0000 433E 2000 		.string	"C> "
 2156               		.section	.progmem.data.__c.5326,"a",@progbits
 2159               	__c.5326:
 2160 0000 7768 6572 		.string	"where delta: cursor=%d, wheel=%d\nSee http://en.wikipedia.org/wiki/Mouse_keys\n"
 2160      6520 6465 
 2160      6C74 613A 
 2160      2063 7572 
 2160      736F 723D 
 2161               		.section	.progmem.data.__c.5324,"a",@progbits
 2164               	__c.5324:
 2165 0000 0A09 2D20 		.string	"\n\t- Mousekey -\nESC/q:\tquit\n1:\tdelay(*10ms)\n2:\tinterval(ms)\n3:\tmax_speed\n4:\tti
 2165      4D6F 7573 
 2165      656B 6579 
 2165      202D 0A45 
 2165      5343 2F71 
 2166               		.section	.progmem.data.__c.5229,"a",@progbits
 2169               	__c.5229:
 2170 0000 3F00      		.string	"?"
 2171               		.section	.progmem.data.__c.5226,"a",@progbits
 2174               	__c.5226:
 2175 0000 4D3E 2000 		.string	"M> "
 2176               		.section	.progmem.data.__c.5231,"a",@progbits
 2179               	__c.5231:
 2180 0000 433E 2000 		.string	"C> "
 2181               		.section	.progmem.data.__c.5375,"a",@progbits
 2184               	__c.5375:
 2185 0000 4C25 640A 		.string	"L%d\n"
 2185      00
 2186               		.section	.progmem.data.__c.5215,"a",@progbits
 2189               	__c.5215:
 2190 0000 0A09 2D20 		.string	"\n\t- Console -\nESC/q:\tquit\nm:\tmousekey\n"
 2190      436F 6E73 
 2190      6F6C 6520 
 2190      2D0A 4553 
 2190      432F 713A 
 2191               		.section	.progmem.data.__c.5040,"a",@progbits
 2194               	__c.5040:
 2195 0000 0A09 2D20 		.string	"\n\t- Magic -\nd:\tdebug\nx:\tdebug matrix\nk:\tdebug keyboard\nm:\tdebug mouse\nv:\tvers
 2195      4D61 6769 
 2195      6320 2D0A 
 2195      643A 0964 
 2195      6562 7567 
 2196               		.section	.progmem.data.__c.5135,"a",@progbits
 2199               	__c.5135:
 2200 0000 0A00      		.string	"\n"
 2201               		.section	.progmem.data.__c.5133,"a",@progbits
 2204               	__c.5133:
 2205 0000 2575 00   		.string	"%u"
 2206               		.section	.progmem.data.__c.5131,"a",@progbits
 2209               	__c.5131:
 2210 0000 2E6E 6B72 		.string	".nkro: "
 2210      6F3A 2000 
 2211               		.section	.progmem.data.__c.5129,"a",@progbits
 2214               	__c.5129:
 2215 0000 0A00      		.string	"\n"
 2216               		.section	.progmem.data.__c.5127,"a",@progbits
 2219               	__c.5127:
 2220 0000 2575 00   		.string	"%u"
 2221               		.section	.progmem.data.__c.5125,"a",@progbits
 2224               	__c.5125:
 2225 0000 2E73 7761 		.string	".swap_backslash_backspace: "
 2225      705F 6261 
 2225      636B 736C 
 2225      6173 685F 
 2225      6261 636B 
 2226               		.section	.progmem.data.__c.5123,"a",@progbits
 2229               	__c.5123:
 2230 0000 0A00      		.string	"\n"
 2231               		.section	.progmem.data.__c.5121,"a",@progbits
 2234               	__c.5121:
 2235 0000 2575 00   		.string	"%u"
 2236               		.section	.progmem.data.__c.5119,"a",@progbits
 2239               	__c.5119:
 2240 0000 2E73 7761 		.string	".swap_grave_esc: "
 2240      705F 6772 
 2240      6176 655F 
 2240      6573 633A 
 2240      2000 
 2241               		.section	.progmem.data.__c.5117,"a",@progbits
 2244               	__c.5117:
 2245 0000 0A00      		.string	"\n"
 2246               		.section	.progmem.data.__c.5115,"a",@progbits
 2249               	__c.5115:
 2250 0000 2575 00   		.string	"%u"
 2251               		.section	.progmem.data.__c.5113,"a",@progbits
 2254               	__c.5113:
 2255 0000 2E6E 6F5F 		.string	".no_gui: "
 2255      6775 693A 
 2255      2000 
 2256               		.section	.progmem.data.__c.5111,"a",@progbits
 2259               	__c.5111:
 2260 0000 0A00      		.string	"\n"
 2261               		.section	.progmem.data.__c.5109,"a",@progbits
 2264               	__c.5109:
 2265 0000 2575 00   		.string	"%u"
 2266               		.section	.progmem.data.__c.5107,"a",@progbits
 2269               	__c.5107:
 2270 0000 2E73 7761 		.string	".swap_ralt_rgui: "
 2270      705F 7261 
 2270      6C74 5F72 
 2270      6775 693A 
 2270      2000 
 2271               		.section	.progmem.data.__c.5105,"a",@progbits
 2274               	__c.5105:
 2275 0000 0A00      		.string	"\n"
 2276               		.section	.progmem.data.__c.5103,"a",@progbits
 2279               	__c.5103:
 2280 0000 2575 00   		.string	"%u"
 2281               		.section	.progmem.data.__c.5101,"a",@progbits
 2284               	__c.5101:
 2285 0000 2E73 7761 		.string	".swap_lalt_lgui: "
 2285      705F 6C61 
 2285      6C74 5F6C 
 2285      6775 693A 
 2285      2000 
 2286               		.section	.progmem.data.__c.5099,"a",@progbits
 2289               	__c.5099:
 2290 0000 0A00      		.string	"\n"
 2291               		.section	.progmem.data.__c.5097,"a",@progbits
 2294               	__c.5097:
 2295 0000 2575 00   		.string	"%u"
 2296               		.section	.progmem.data.__c.5095,"a",@progbits
 2299               	__c.5095:
 2300 0000 2E63 6170 		.string	".capslock_to_control: "
 2300      736C 6F63 
 2300      6B5F 746F 
 2300      5F63 6F6E 
 2300      7472 6F6C 
 2301               		.section	.progmem.data.__c.5093,"a",@progbits
 2304               	__c.5093:
 2305 0000 0A00      		.string	"\n"
 2306               		.section	.progmem.data.__c.5091,"a",@progbits
 2309               	__c.5091:
 2310 0000 2575 00   		.string	"%u"
 2311               		.section	.progmem.data.__c.5089,"a",@progbits
 2314               	__c.5089:
 2315 0000 2E73 7761 		.string	".swap_control_capslock: "
 2315      705F 636F 
 2315      6E74 726F 
 2315      6C5F 6361 
 2315      7073 6C6F 
 2316               		.section	.progmem.data.__c.5087,"a",@progbits
 2319               	__c.5087:
 2320 0000 0A00      		.string	"\n"
 2321               		.section	.progmem.data.__c.5085,"a",@progbits
 2324               	__c.5085:
 2325 0000 2530 3258 		.string	"%02X"
 2325      00
 2326               		.section	.progmem.data.__c.5083,"a",@progbits
 2329               	__c.5083:
 2330 0000 6B65 796D 		.string	"keymap_config.raw: "
 2330      6170 5F63 
 2330      6F6E 6669 
 2330      672E 7261 
 2330      773A 2000 
 2331               		.section	.progmem.data.__c.5080,"a",@progbits
 2334               	__c.5080:
 2335 0000 0A00      		.string	"\n"
 2336               		.section	.progmem.data.__c.5078,"a",@progbits
 2339               	__c.5078:
 2340 0000 2575 00   		.string	"%u"
 2341               		.section	.progmem.data.__c.5076,"a",@progbits
 2344               	__c.5076:
 2345 0000 2E6D 6F75 		.string	".mouse: "
 2345      7365 3A20 
 2345      00
 2346               		.section	.progmem.data.__c.5074,"a",@progbits
 2349               	__c.5074:
 2350 0000 0A00      		.string	"\n"
 2351               		.section	.progmem.data.__c.5072,"a",@progbits
 2354               	__c.5072:
 2355 0000 2575 00   		.string	"%u"
 2356               		.section	.progmem.data.__c.5070,"a",@progbits
 2359               	__c.5070:
 2360 0000 2E6B 6579 		.string	".keyboard: "
 2360      626F 6172 
 2360      643A 2000 
 2361               		.section	.progmem.data.__c.5068,"a",@progbits
 2364               	__c.5068:
 2365 0000 0A00      		.string	"\n"
 2366               		.section	.progmem.data.__c.5066,"a",@progbits
 2369               	__c.5066:
 2370 0000 2575 00   		.string	"%u"
 2371               		.section	.progmem.data.__c.5064,"a",@progbits
 2374               	__c.5064:
 2375 0000 2E6D 6174 		.string	".matrix: "
 2375      7269 783A 
 2375      2000 
 2376               		.section	.progmem.data.__c.5062,"a",@progbits
 2379               	__c.5062:
 2380 0000 0A00      		.string	"\n"
 2381               		.section	.progmem.data.__c.5060,"a",@progbits
 2384               	__c.5060:
 2385 0000 2575 00   		.string	"%u"
 2386               		.section	.progmem.data.__c.5058,"a",@progbits
 2389               	__c.5058:
 2390 0000 2E65 6E61 		.string	".enable: "
 2390      626C 653A 
 2390      2000 
 2391               		.section	.progmem.data.__c.5056,"a",@progbits
 2394               	__c.5056:
 2395 0000 0A00      		.string	"\n"
 2396               		.section	.progmem.data.__c.5054,"a",@progbits
 2399               	__c.5054:
 2400 0000 2530 3258 		.string	"%02X"
 2400      00
 2401               		.section	.progmem.data.__c.5052,"a",@progbits
 2404               	__c.5052:
 2405 0000 6465 6275 		.string	"debug_config.raw: "
 2405      675F 636F 
 2405      6E66 6967 
 2405      2E72 6177 
 2405      3A20 00
 2406               		.section	.progmem.data.__c.5049,"a",@progbits
 2409               	__c.5049:
 2410 0000 0A00      		.string	"\n"
 2411               		.section	.progmem.data.__c.5047,"a",@progbits
 2414               	__c.5047:
 2415 0000 2575 00   		.string	"%u"
 2416               		.section	.progmem.data.__c.5045,"a",@progbits
 2419               	__c.5045:
 2420 0000 6465 6661 		.string	"default_layer: "
 2420      756C 745F 
 2420      6C61 7965 
 2420      723A 2000 
 2421               		.section	.progmem.data.__c.5210,"a",@progbits
 2424               	__c.5210:
 2425 0000 3F00      		.string	"?"
 2426               		.section	.progmem.data.__c.5201,"a",@progbits
 2429               	__c.5201:
 2430 0000 4E4B 524F 		.string	"NKRO: off\n"
 2430      3A20 6F66 
 2430      660A 00
 2431               		.section	.progmem.data.__c.5199,"a",@progbits
 2434               	__c.5199:
 2435 0000 4E4B 524F 		.string	"NKRO: on\n"
 2435      3A20 6F6E 
 2435      0A00 
 2436               		.section	.progmem.data.__c.5196,"a",@progbits
 2439               	__c.5196:
 2440 0000 7469 6D65 		.string	"timer_read32(): %04lX\n"
 2440      725F 7265 
 2440      6164 3332 
 2440      2829 3A20 
 2440      2530 346C 
 2441               		.section	.progmem.data.__c.5194,"a",@progbits
 2444               	__c.5194:
 2445 0000 6B65 7962 		.string	"keyboard_nkro: %X\n"
 2445      6F61 7264 
 2445      5F6E 6B72 
 2445      6F3A 2025 
 2445      580A 00
 2446               		.section	.progmem.data.__c.5192,"a",@progbits
 2449               	__c.5192:
 2450 0000 6B65 7962 		.string	"keyboard_idle: %X\n"
 2450      6F61 7264 
 2450      5F69 646C 
 2450      653A 2025 
 2450      580A 00
 2451               		.section	.progmem.data.__c.5190,"a",@progbits
 2454               	__c.5190:
 2455 0000 6B65 7962 		.string	"keyboard_protocol: %X\n"
 2455      6F61 7264 
 2455      5F70 726F 
 2455      746F 636F 
 2455      6C3A 2025 
 2456               		.section	.progmem.data.__c.5188,"a",@progbits
 2459               	__c.5188:
 2460 0000 686F 7374 		.string	"host_keyboard_leds(): %X\n"
 2460      5F6B 6579 
 2460      626F 6172 
 2460      645F 6C65 
 2460      6473 2829 
 2461               		.section	.progmem.data.__c.5186,"a",@progbits
 2464               	__c.5186:
 2465 0000 0A09 2D20 		.string	"\n\t- Status -\n"
 2465      5374 6174 
 2465      7573 202D 
 2465      0A00 
 2466               		.section	.progmem.data.__c.5183,"a",@progbits
 2469               	__c.5183:
 2470 0000 4743 433A 		.string	"GCC: 5.4.0 AVR-LIBC: 2.0.0 AVR_ARCH: avr5\n"
 2470      2035 2E34 
 2470      2E30 2041 
 2470      5652 2D4C 
 2470      4942 433A 
 2471               		.section	.progmem.data.__c.5181,"a",@progbits
 2474               	__c.5181:
 2475 0000 4F50 5449 		.string	"OPTIONS: LUFA BOOTMAGIC MOUSEKEY EXTRAKEY CONSOLE COMMAND NKRO 4096\n"
 2475      4F4E 533A 
 2475      204C 5546 
 2475      4120 424F 
 2475      4F54 4D41 
 2476               		.section	.progmem.data.__c.5179,"a",@progbits
 2479               	__c.5179:
 2480 0000 4255 494C 		.string	"BUILD: unknown (11:51:55 Mar 12 2019)\n"
 2480      443A 2075 
 2480      6E6B 6E6F 
 2480      776E 2028 
 2480      3131 3A35 
 2481               		.section	.progmem.data.__c.5177,"a",@progbits
 2484               	__c.5177:
 2485 0000 5649 443A 		.string	"VID: 0xFEED(nickhack) PID: 0x6060(ergopad) VER: 0x0001\n"
 2485      2030 7846 
 2485      4545 4428 
 2485      6E69 636B 
 2485      6861 636B 
 2486               		.section	.progmem.data.__c.5175,"a",@progbits
 2489               	__c.5175:
 2490 0000 4445 5343 		.string	"DESC: t.m.k. keyboard firmware for ergodoxl\n"
 2490      3A20 742E 
 2490      6D2E 6B2E 
 2490      206B 6579 
 2490      626F 6172 
 2491               		.section	.progmem.data.__c.5173,"a",@progbits
 2494               	__c.5173:
 2495 0000 0A09 2D20 		.string	"\n\t- Version -\n"
 2495      5665 7273 
 2495      696F 6E20 
 2495      2D0A 00
 2496               		.section	.progmem.data.__c.5170,"a",@progbits
 2499               	__c.5170:
 2500 0000 0A6D 6F75 		.string	"\nmouse: off\n"
 2500      7365 3A20 
 2500      6F66 660A 
 2500      00
 2501               		.section	.progmem.data.__c.5168,"a",@progbits
 2504               	__c.5168:
 2505 0000 0A6D 6F75 		.string	"\nmouse: on\n"
 2505      7365 3A20 
 2505      6F6E 0A00 
 2506               		.section	.progmem.data.__c.5165,"a",@progbits
 2509               	__c.5165:
 2510 0000 0A6B 6579 		.string	"\nkeyboard: off\n"
 2510      626F 6172 
 2510      643A 206F 
 2510      6666 0A00 
 2511               		.section	.progmem.data.__c.5163,"a",@progbits
 2514               	__c.5163:
 2515 0000 0A6B 6579 		.string	"\nkeyboard: on\n"
 2515      626F 6172 
 2515      643A 206F 
 2515      6E0A 00
 2516               		.section	.progmem.data.__c.5160,"a",@progbits
 2519               	__c.5160:
 2520 0000 0A6D 6174 		.string	"\nmatrix: off\n"
 2520      7269 783A 
 2520      206F 6666 
 2520      0A00 
 2521               		.section	.progmem.data.__c.5158,"a",@progbits
 2524               	__c.5158:
 2525 0000 0A6D 6174 		.string	"\nmatrix: on\n"
 2525      7269 783A 
 2525      206F 6E0A 
 2525      00
 2526               		.section	.progmem.data.__c.5155,"a",@progbits
 2529               	__c.5155:
 2530 0000 0A64 6562 		.string	"\ndebug: on\n"
 2530      7567 3A20 
 2530      6F6E 0A00 
 2531               		.section	.progmem.data.__c.5153,"a",@progbits
 2534               	__c.5153:
 2535 0000 0A64 6562 		.string	"\ndebug: off\n"
 2535      7567 3A20 
 2535      6F66 660A 
 2535      00
 2536               		.section	.progmem.data.__c.5150,"a",@progbits
 2539               	__c.5150:
 2540 0000 0A0A 626F 		.string	"\n\nbootloader... "
 2540      6F74 6C6F 
 2540      6164 6572 
 2540      2E2E 2E20 
 2540      00
 2541               		.section	.progmem.data.__c.5147,"a",@progbits
 2544               	__c.5147:
 2545 0000 433E 2000 		.string	"C> "
 2546               		.section	.progmem.data.__c.5141,"a",@progbits
 2549               	__c.5141:
 2550 0000 6565 636F 		.string	"eeconfig:\n"
 2550      6E66 6967 
 2550      3A0A 00
 2551               		.section	.bss.mousekey_param,"aw",@nobits
 2554               	mousekey_param:
 2555 0000 00        		.zero	1
 2556               	.global	command_state
 2557               		.section	.bss.command_state,"aw",@nobits
 2560               	command_state:
 2561 0000 00        		.zero	1
 2562               		.text
 2563               	.Letext0:
 2564               		.file 3 "/usr/lib/avr/include/stdint.h"
 2565               		.file 4 "../../tmk_core/common/report.h"
 2566               		.file 5 "../../tmk_core/common/keymap.h"
 2567               		.file 6 "../../tmk_core/common/debug.h"
 2568               		.file 7 "../../tmk_core/common/command.h"
 2569               		.file 8 "../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/USBTask.h"
 2570               		.file 9 "../../tmk_core/common/host.h"
 2571               		.file 10 "../../tmk_core/common/action_util.h"
 2572               		.file 11 "../../tmk_core/common/mousekey.h"
 2573               		.file 12 "../../tmk_core/common/avr/xprintf.h"
 2574               		.file 13 "../../tmk_core/common/action_layer.h"
 2575               		.file 14 "../../tmk_core/common/action.h"
 2576               		.file 15 "../../tmk_core/common/keycode.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 command.c
     /tmp/ccqoYbdN.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccqoYbdN.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccqoYbdN.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccqoYbdN.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccqoYbdN.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccqoYbdN.s:12     .text.mousekey_console_help:0000000000000000 mousekey_console_help
     /tmp/ccqoYbdN.s:2164   .progmem.data.__c.5324:0000000000000000 __c.5324
     /tmp/ccqoYbdN.s:2159   .progmem.data.__c.5326:0000000000000000 __c.5326
     /tmp/ccqoYbdN.s:66     .text.mousekey_param_inc:0000000000000000 mousekey_param_inc
     /tmp/ccqoYbdN.s:2034   .progmem.data.__c.5280:0000000000000000 __c.5280
     /tmp/ccqoYbdN.s:2029   .progmem.data.__c.5284:0000000000000000 __c.5284
     /tmp/ccqoYbdN.s:2024   .progmem.data.__c.5287:0000000000000000 __c.5287
     /tmp/ccqoYbdN.s:2019   .progmem.data.__c.5290:0000000000000000 __c.5290
     /tmp/ccqoYbdN.s:2014   .progmem.data.__c.5293:0000000000000000 __c.5293
     /tmp/ccqoYbdN.s:2009   .progmem.data.__c.5296:0000000000000000 __c.5296
     /tmp/ccqoYbdN.s:339    .text.mousekey_param_dec:0000000000000000 mousekey_param_dec
     /tmp/ccqoYbdN.s:2004   .progmem.data.__c.5303:0000000000000000 __c.5303
     /tmp/ccqoYbdN.s:1999   .progmem.data.__c.5307:0000000000000000 __c.5307
     /tmp/ccqoYbdN.s:1994   .progmem.data.__c.5310:0000000000000000 __c.5310
     /tmp/ccqoYbdN.s:1989   .progmem.data.__c.5313:0000000000000000 __c.5313
     /tmp/ccqoYbdN.s:1984   .progmem.data.__c.5316:0000000000000000 __c.5316
     /tmp/ccqoYbdN.s:1979   .progmem.data.__c.5319:0000000000000000 __c.5319
     /tmp/ccqoYbdN.s:557    .text.switch_default_layer:0000000000000000 switch_default_layer
     /tmp/ccqoYbdN.s:2184   .progmem.data.__c.5375:0000000000000000 __c.5375
     /tmp/ccqoYbdN.s:626    .text.command_common:0000000000000000 command_common
     /tmp/ccqoYbdN.s:2189   .progmem.data.__c.5215:0000000000000000 __c.5215
     /tmp/ccqoYbdN.s:2544   .progmem.data.__c.5147:0000000000000000 __c.5147
     /tmp/ccqoYbdN.s:2560   .bss.command_state:0000000000000000 command_state
     /tmp/ccqoYbdN.s:2494   .progmem.data.__c.5173:0000000000000000 __c.5173
     /tmp/ccqoYbdN.s:2489   .progmem.data.__c.5175:0000000000000000 __c.5175
     /tmp/ccqoYbdN.s:2484   .progmem.data.__c.5177:0000000000000000 __c.5177
     /tmp/ccqoYbdN.s:2479   .progmem.data.__c.5179:0000000000000000 __c.5179
     /tmp/ccqoYbdN.s:2474   .progmem.data.__c.5181:0000000000000000 __c.5181
     /tmp/ccqoYbdN.s:2469   .progmem.data.__c.5183:0000000000000000 __c.5183
     /tmp/ccqoYbdN.s:2539   .progmem.data.__c.5150:0000000000000000 __c.5150
     /tmp/ccqoYbdN.s:2549   .progmem.data.__c.5141:0000000000000000 __c.5141
     /tmp/ccqoYbdN.s:2419   .progmem.data.__c.5045:0000000000000000 __c.5045
     /tmp/ccqoYbdN.s:2414   .progmem.data.__c.5047:0000000000000000 __c.5047
     /tmp/ccqoYbdN.s:2409   .progmem.data.__c.5049:0000000000000000 __c.5049
     /tmp/ccqoYbdN.s:2404   .progmem.data.__c.5052:0000000000000000 __c.5052
     /tmp/ccqoYbdN.s:2399   .progmem.data.__c.5054:0000000000000000 __c.5054
     /tmp/ccqoYbdN.s:2394   .progmem.data.__c.5056:0000000000000000 __c.5056
     /tmp/ccqoYbdN.s:2389   .progmem.data.__c.5058:0000000000000000 __c.5058
     /tmp/ccqoYbdN.s:2384   .progmem.data.__c.5060:0000000000000000 __c.5060
     /tmp/ccqoYbdN.s:2379   .progmem.data.__c.5062:0000000000000000 __c.5062
     /tmp/ccqoYbdN.s:2374   .progmem.data.__c.5064:0000000000000000 __c.5064
     /tmp/ccqoYbdN.s:2369   .progmem.data.__c.5066:0000000000000000 __c.5066
     /tmp/ccqoYbdN.s:2364   .progmem.data.__c.5068:0000000000000000 __c.5068
     /tmp/ccqoYbdN.s:2359   .progmem.data.__c.5070:0000000000000000 __c.5070
     /tmp/ccqoYbdN.s:2354   .progmem.data.__c.5072:0000000000000000 __c.5072
     /tmp/ccqoYbdN.s:2349   .progmem.data.__c.5074:0000000000000000 __c.5074
     /tmp/ccqoYbdN.s:2344   .progmem.data.__c.5076:0000000000000000 __c.5076
     /tmp/ccqoYbdN.s:2339   .progmem.data.__c.5078:0000000000000000 __c.5078
     /tmp/ccqoYbdN.s:2334   .progmem.data.__c.5080:0000000000000000 __c.5080
     /tmp/ccqoYbdN.s:2329   .progmem.data.__c.5083:0000000000000000 __c.5083
     /tmp/ccqoYbdN.s:2324   .progmem.data.__c.5085:0000000000000000 __c.5085
     /tmp/ccqoYbdN.s:2319   .progmem.data.__c.5087:0000000000000000 __c.5087
     /tmp/ccqoYbdN.s:2314   .progmem.data.__c.5089:0000000000000000 __c.5089
     /tmp/ccqoYbdN.s:2309   .progmem.data.__c.5091:0000000000000000 __c.5091
     /tmp/ccqoYbdN.s:2304   .progmem.data.__c.5093:0000000000000000 __c.5093
     /tmp/ccqoYbdN.s:2299   .progmem.data.__c.5095:0000000000000000 __c.5095
     /tmp/ccqoYbdN.s:2294   .progmem.data.__c.5097:0000000000000000 __c.5097
     /tmp/ccqoYbdN.s:2289   .progmem.data.__c.5099:0000000000000000 __c.5099
     /tmp/ccqoYbdN.s:2284   .progmem.data.__c.5101:0000000000000000 __c.5101
     /tmp/ccqoYbdN.s:2279   .progmem.data.__c.5103:0000000000000000 __c.5103
     /tmp/ccqoYbdN.s:2274   .progmem.data.__c.5105:0000000000000000 __c.5105
     /tmp/ccqoYbdN.s:2269   .progmem.data.__c.5107:0000000000000000 __c.5107
     /tmp/ccqoYbdN.s:2264   .progmem.data.__c.5109:0000000000000000 __c.5109
     /tmp/ccqoYbdN.s:2259   .progmem.data.__c.5111:0000000000000000 __c.5111
     /tmp/ccqoYbdN.s:2254   .progmem.data.__c.5113:0000000000000000 __c.5113
     /tmp/ccqoYbdN.s:2249   .progmem.data.__c.5115:0000000000000000 __c.5115
     /tmp/ccqoYbdN.s:2244   .progmem.data.__c.5117:0000000000000000 __c.5117
     /tmp/ccqoYbdN.s:2239   .progmem.data.__c.5119:0000000000000000 __c.5119
     /tmp/ccqoYbdN.s:2234   .progmem.data.__c.5121:0000000000000000 __c.5121
     /tmp/ccqoYbdN.s:2229   .progmem.data.__c.5123:0000000000000000 __c.5123
     /tmp/ccqoYbdN.s:2224   .progmem.data.__c.5125:0000000000000000 __c.5125
     /tmp/ccqoYbdN.s:2219   .progmem.data.__c.5127:0000000000000000 __c.5127
     /tmp/ccqoYbdN.s:2214   .progmem.data.__c.5129:0000000000000000 __c.5129
     /tmp/ccqoYbdN.s:2209   .progmem.data.__c.5131:0000000000000000 __c.5131
     /tmp/ccqoYbdN.s:2204   .progmem.data.__c.5133:0000000000000000 __c.5133
     /tmp/ccqoYbdN.s:2199   .progmem.data.__c.5135:0000000000000000 __c.5135
     /tmp/ccqoYbdN.s:2194   .progmem.data.__c.5040:0000000000000000 __c.5040
     /tmp/ccqoYbdN.s:2534   .progmem.data.__c.5153:0000000000000000 __c.5153
     /tmp/ccqoYbdN.s:2529   .progmem.data.__c.5155:0000000000000000 __c.5155
     /tmp/ccqoYbdN.s:2524   .progmem.data.__c.5158:0000000000000000 __c.5158
     /tmp/ccqoYbdN.s:2519   .progmem.data.__c.5160:0000000000000000 __c.5160
     /tmp/ccqoYbdN.s:2514   .progmem.data.__c.5163:0000000000000000 __c.5163
     /tmp/ccqoYbdN.s:2509   .progmem.data.__c.5165:0000000000000000 __c.5165
     /tmp/ccqoYbdN.s:2504   .progmem.data.__c.5168:0000000000000000 __c.5168
     /tmp/ccqoYbdN.s:2499   .progmem.data.__c.5170:0000000000000000 __c.5170
     /tmp/ccqoYbdN.s:2464   .progmem.data.__c.5186:0000000000000000 __c.5186
     /tmp/ccqoYbdN.s:2459   .progmem.data.__c.5188:0000000000000000 __c.5188
     /tmp/ccqoYbdN.s:2454   .progmem.data.__c.5190:0000000000000000 __c.5190
     /tmp/ccqoYbdN.s:2449   .progmem.data.__c.5192:0000000000000000 __c.5192
     /tmp/ccqoYbdN.s:2444   .progmem.data.__c.5194:0000000000000000 __c.5194
     /tmp/ccqoYbdN.s:2439   .progmem.data.__c.5196:0000000000000000 __c.5196
     /tmp/ccqoYbdN.s:2434   .progmem.data.__c.5199:0000000000000000 __c.5199
     /tmp/ccqoYbdN.s:2429   .progmem.data.__c.5201:0000000000000000 __c.5201
     /tmp/ccqoYbdN.s:2424   .progmem.data.__c.5210:0000000000000000 __c.5210
     /tmp/ccqoYbdN.s:1468   .text.command_console_extra:0000000000000000 command_console_extra
     /tmp/ccqoYbdN.s:1468   .text.command_console_extra:0000000000000000 command_console_extra.localalias.0
     /tmp/ccqoYbdN.s:1488   .text.command_extra:0000000000000000 command_extra
     /tmp/ccqoYbdN.s:1502   .text.command_proc:0000000000000000 command_proc
     /tmp/ccqoYbdN.s:2174   .progmem.data.__c.5226:0000000000000000 __c.5226
     /tmp/ccqoYbdN.s:2179   .progmem.data.__c.5231:0000000000000000 __c.5231
     /tmp/ccqoYbdN.s:2169   .progmem.data.__c.5229:0000000000000000 __c.5229
     /tmp/ccqoYbdN.s:2149   .progmem.data.__c.5350:0000000000000000 __c.5350
     /tmp/ccqoYbdN.s:2554   .bss.mousekey_param:0000000000000000 mousekey_param
     /tmp/ccqoYbdN.s:2154   .progmem.data.__c.5336:0000000000000000 __c.5336
     /tmp/ccqoYbdN.s:2129   .progmem.data.__c.5237:0000000000000000 __c.5237
     /tmp/ccqoYbdN.s:2124   .progmem.data.__c.5239:0000000000000000 __c.5239
     /tmp/ccqoYbdN.s:2119   .progmem.data.__c.5241:0000000000000000 __c.5241
     /tmp/ccqoYbdN.s:2114   .progmem.data.__c.5243:0000000000000000 __c.5243
     /tmp/ccqoYbdN.s:2109   .progmem.data.__c.5245:0000000000000000 __c.5245
     /tmp/ccqoYbdN.s:2104   .progmem.data.__c.5247:0000000000000000 __c.5247
     /tmp/ccqoYbdN.s:2099   .progmem.data.__c.5249:0000000000000000 __c.5249
     /tmp/ccqoYbdN.s:2094   .progmem.data.__c.5251:0000000000000000 __c.5251
     /tmp/ccqoYbdN.s:2089   .progmem.data.__c.5253:0000000000000000 __c.5253
     /tmp/ccqoYbdN.s:2084   .progmem.data.__c.5255:0000000000000000 __c.5255
     /tmp/ccqoYbdN.s:2079   .progmem.data.__c.5257:0000000000000000 __c.5257
     /tmp/ccqoYbdN.s:2074   .progmem.data.__c.5259:0000000000000000 __c.5259
     /tmp/ccqoYbdN.s:2069   .progmem.data.__c.5261:0000000000000000 __c.5261
     /tmp/ccqoYbdN.s:2064   .progmem.data.__c.5263:0000000000000000 __c.5263
     /tmp/ccqoYbdN.s:2059   .progmem.data.__c.5265:0000000000000000 __c.5265
     /tmp/ccqoYbdN.s:2054   .progmem.data.__c.5267:0000000000000000 __c.5267
     /tmp/ccqoYbdN.s:2049   .progmem.data.__c.5269:0000000000000000 __c.5269
     /tmp/ccqoYbdN.s:2044   .progmem.data.__c.5271:0000000000000000 __c.5271
     /tmp/ccqoYbdN.s:2039   .progmem.data.__c.5273:0000000000000000 __c.5273
     /tmp/ccqoYbdN.s:1965   .rodata.CSWTCH.43:0000000000000000 CSWTCH.43
     /tmp/ccqoYbdN.s:2144   .progmem.data.__c.5353:0000000000000000 __c.5353
     /tmp/ccqoYbdN.s:2139   .progmem.data.__c.5355:0000000000000000 __c.5355
     /tmp/ccqoYbdN.s:2134   .progmem.data.__c.5357:0000000000000000 __c.5357

UNDEFINED SYMBOLS
xputs
__xprintf
mk_delay
mk_interval
mk_max_speed
mk_time_to_max
mk_wheel_max_speed
mk_wheel_time_to_max
default_layer_set
clear_keyboard
debug_config
bootloader_jump
eeconfig_read_default_layer
eeconfig_read_debug
eeconfig_read_keymap
host_keyboard_leds
keyboard_protocol
keyboard_idle
keyboard_nkro
timer_read32
keyboard_report
__do_copy_data
__do_clear_bss
