   1               		.file	"action_macro.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.action_macro_play,"ax",@progbits
  11               	.global	action_macro_play
  13               	action_macro_play:
  14               	.LFB103:
  15               		.file 1 "../../tmk_core/common/action_macro.c"
   1:../../tmk_core/common/action_macro.c **** /*
   2:../../tmk_core/common/action_macro.c **** Copyright 2013 Jun Wako <wakojun@gmail.com>
   3:../../tmk_core/common/action_macro.c **** 
   4:../../tmk_core/common/action_macro.c **** This program is free software: you can redistribute it and/or modify
   5:../../tmk_core/common/action_macro.c **** it under the terms of the GNU General Public License as published by
   6:../../tmk_core/common/action_macro.c **** the Free Software Foundation, either version 2 of the License, or
   7:../../tmk_core/common/action_macro.c **** (at your option) any later version.
   8:../../tmk_core/common/action_macro.c **** 
   9:../../tmk_core/common/action_macro.c **** This program is distributed in the hope that it will be useful,
  10:../../tmk_core/common/action_macro.c **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:../../tmk_core/common/action_macro.c **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:../../tmk_core/common/action_macro.c **** GNU General Public License for more details.
  13:../../tmk_core/common/action_macro.c **** 
  14:../../tmk_core/common/action_macro.c **** You should have received a copy of the GNU General Public License
  15:../../tmk_core/common/action_macro.c **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:../../tmk_core/common/action_macro.c **** */
  17:../../tmk_core/common/action_macro.c **** #include "action.h"
  18:../../tmk_core/common/action_macro.c **** #include "action_util.h"
  19:../../tmk_core/common/action_macro.c **** #include "action_macro.h"
  20:../../tmk_core/common/action_macro.c **** #include "wait.h"
  21:../../tmk_core/common/action_macro.c **** 
  22:../../tmk_core/common/action_macro.c **** #ifdef DEBUG_ACTION
  23:../../tmk_core/common/action_macro.c **** #include "debug.h"
  24:../../tmk_core/common/action_macro.c **** #else
  25:../../tmk_core/common/action_macro.c **** #include "nodebug.h"
  26:../../tmk_core/common/action_macro.c **** #endif
  27:../../tmk_core/common/action_macro.c **** 
  28:../../tmk_core/common/action_macro.c **** 
  29:../../tmk_core/common/action_macro.c **** #ifndef NO_ACTION_MACRO
  30:../../tmk_core/common/action_macro.c **** 
  31:../../tmk_core/common/action_macro.c **** #define MACRO_READ()  (macro = MACRO_GET(macro_p++))
  32:../../tmk_core/common/action_macro.c **** void action_macro_play(const macro_t *macro_p)
  33:../../tmk_core/common/action_macro.c **** {
  16               		.loc 1 33 0
  17               		.cfi_startproc
  18               	.LVL0:
  19 0000 DF92      		push r13
  20               	.LCFI0:
  21               		.cfi_def_cfa_offset 3
  22               		.cfi_offset 13, -2
  23 0002 EF92      		push r14
  24               	.LCFI1:
  25               		.cfi_def_cfa_offset 4
  26               		.cfi_offset 14, -3
  27 0004 FF92      		push r15
  28               	.LCFI2:
  29               		.cfi_def_cfa_offset 5
  30               		.cfi_offset 15, -4
  31 0006 0F93      		push r16
  32               	.LCFI3:
  33               		.cfi_def_cfa_offset 6
  34               		.cfi_offset 16, -5
  35 0008 1F93      		push r17
  36               	.LCFI4:
  37               		.cfi_def_cfa_offset 7
  38               		.cfi_offset 17, -6
  39 000a CF93      		push r28
  40               	.LCFI5:
  41               		.cfi_def_cfa_offset 8
  42               		.cfi_offset 28, -7
  43 000c DF93      		push r29
  44               	.LCFI6:
  45               		.cfi_def_cfa_offset 9
  46               		.cfi_offset 29, -8
  47               	/* prologue: function */
  48               	/* frame size = 0 */
  49               	/* stack size = 7 */
  50               	.L__stack_usage = 7
  51 000e FC01      		movw r30,r24
  52               	.LVL1:
  34:../../tmk_core/common/action_macro.c ****     macro_t macro = END;
  35:../../tmk_core/common/action_macro.c ****     uint8_t interval = 0;
  36:../../tmk_core/common/action_macro.c **** 
  37:../../tmk_core/common/action_macro.c ****     uint8_t mod_storage = 0;
  38:../../tmk_core/common/action_macro.c **** 
  39:../../tmk_core/common/action_macro.c ****     if (!macro_p) return;
  53               		.loc 1 39 0
  54 0010 892B      		or r24,r25
  55 0012 01F4      		brne .+2
  56 0014 00C0      		rjmp .L1
  57 0016 E12C      		mov r14,__zero_reg__
  58 0018 F12C      		mov r15,__zero_reg__
  40:../../tmk_core/common/action_macro.c ****     while (true) {
  41:../../tmk_core/common/action_macro.c ****         switch (MACRO_READ()) {
  42:../../tmk_core/common/action_macro.c ****             case KEY_DOWN:
  43:../../tmk_core/common/action_macro.c ****                 MACRO_READ();
  44:../../tmk_core/common/action_macro.c ****                 dprintf("KEY_DOWN(%02X)\n", macro);
  45:../../tmk_core/common/action_macro.c ****                 if (IS_MOD(macro)) {
  46:../../tmk_core/common/action_macro.c ****                     add_weak_mods(MOD_BIT(macro));
  59               		.loc 1 46 0
  60 001a DD24      		clr r13
  61 001c D394      		inc r13
  62               	.LVL2:
  63               	.L21:
  64               	.LBB13:
  41:../../tmk_core/common/action_macro.c ****             case KEY_DOWN:
  65               		.loc 1 41 0
  66 001e EF01      		movw r28,r30
  67 0020 2196      		adiw r28,1
  68               	.LVL3:
  69               	/* #APP */
  70               	 ;  41 "../../tmk_core/common/action_macro.c" 1
  71 0022 8491      		lpm r24, Z
  72               		
  73               	 ;  0 "" 2
  74               	.LVL4:
  75               	/* #NOAPP */
  76               	.LBE13:
  77 0024 8537      		cpi r24,lo8(117)
  78 0026 01F4      		brne .+2
  79 0028 00C0      		rjmp .L3
  80 002a 00F4      		brsh .L4
  81 002c 8437      		cpi r24,lo8(116)
  82 002e 00F0      		brlo .+2
  83 0030 00C0      		rjmp .L5
  84 0032 8430      		cpi r24,lo8(4)
  85 0034 00F0      		brlo .+2
  86 0036 00C0      		rjmp .L6
  87 0038 8130      		cpi r24,lo8(1)
  88 003a 01F0      		breq .L7
  89 003c 8230      		cpi r24,lo8(2)
  90 003e 01F0      		breq .L8
  91 0040 00C0      		rjmp .L1
  92               	.L4:
  93 0042 8837      		cpi r24,lo8(120)
  94 0044 01F4      		brne .+2
  95 0046 00C0      		rjmp .L9
  96 0048 00F4      		brsh .L10
  97 004a 8637      		cpi r24,lo8(118)
  98 004c 01F4      		brne .+2
  99 004e 00C0      		rjmp .L11
 100 0050 8737      		cpi r24,lo8(119)
 101 0052 01F0      		breq .+2
 102 0054 00C0      		rjmp .L1
  47:../../tmk_core/common/action_macro.c ****                     send_keyboard_report();
  48:../../tmk_core/common/action_macro.c ****                 } else {
  49:../../tmk_core/common/action_macro.c ****                     register_code(macro);
  50:../../tmk_core/common/action_macro.c ****                 }
  51:../../tmk_core/common/action_macro.c ****                 break;
  52:../../tmk_core/common/action_macro.c ****             case KEY_UP:
  53:../../tmk_core/common/action_macro.c ****                 MACRO_READ();
  54:../../tmk_core/common/action_macro.c ****                 dprintf("KEY_UP(%02X)\n", macro);
  55:../../tmk_core/common/action_macro.c ****                 if (IS_MOD(macro)) {
  56:../../tmk_core/common/action_macro.c ****                     del_weak_mods(MOD_BIT(macro));
  57:../../tmk_core/common/action_macro.c ****                     send_keyboard_report();
  58:../../tmk_core/common/action_macro.c ****                 } else {
  59:../../tmk_core/common/action_macro.c ****                     unregister_code(macro);
  60:../../tmk_core/common/action_macro.c ****                 }
  61:../../tmk_core/common/action_macro.c ****                 break;
  62:../../tmk_core/common/action_macro.c ****             case WAIT:
  63:../../tmk_core/common/action_macro.c ****                 MACRO_READ();
  64:../../tmk_core/common/action_macro.c ****                 dprintf("WAIT(%u)\n", macro);
  65:../../tmk_core/common/action_macro.c ****                 { uint8_t ms = macro; while (ms--) wait_ms(1); }
  66:../../tmk_core/common/action_macro.c ****                 break;
  67:../../tmk_core/common/action_macro.c ****             case INTERVAL:
  68:../../tmk_core/common/action_macro.c ****                 interval = MACRO_READ();
  69:../../tmk_core/common/action_macro.c ****                 dprintf("INTERVAL(%u)\n", interval);
  70:../../tmk_core/common/action_macro.c ****                 break;
  71:../../tmk_core/common/action_macro.c ****             case MOD_STORE:
  72:../../tmk_core/common/action_macro.c ****                 mod_storage = get_mods();
  73:../../tmk_core/common/action_macro.c ****                 break;
  74:../../tmk_core/common/action_macro.c ****             case MOD_RESTORE:
  75:../../tmk_core/common/action_macro.c ****                 set_mods(mod_storage);
 103               		.loc 1 75 0
 104 0056 8E2D      		mov r24,r14
 105               	.LVL5:
 106 0058 0E94 0000 		call set_mods
 107               	.LVL6:
 108 005c 00C0      		rjmp .L29
 109               	.LVL7:
 110               	.L10:
  41:../../tmk_core/common/action_macro.c ****             case KEY_DOWN:
 111               		.loc 1 41 0
 112 005e 9CE7      		ldi r25,lo8(124)
 113 0060 980F      		add r25,r24
 114 0062 9037      		cpi r25,lo8(112)
 115 0064 00F0      		brlo .+2
 116 0066 00C0      		rjmp .L1
  76:../../tmk_core/common/action_macro.c ****                 send_keyboard_report();
  77:../../tmk_core/common/action_macro.c ****                 break;
  78:../../tmk_core/common/action_macro.c ****             case MOD_CLEAR:
  79:../../tmk_core/common/action_macro.c ****                 clear_mods();
  80:../../tmk_core/common/action_macro.c ****                 send_keyboard_report();
  81:../../tmk_core/common/action_macro.c ****                 break;
  82:../../tmk_core/common/action_macro.c ****             case 0x04 ... 0x73:
  83:../../tmk_core/common/action_macro.c ****                 dprintf("DOWN(%02X)\n", macro);
  84:../../tmk_core/common/action_macro.c ****                 register_code(macro);
  85:../../tmk_core/common/action_macro.c ****                 break;
  86:../../tmk_core/common/action_macro.c ****             case 0x84 ... 0xF3:
  87:../../tmk_core/common/action_macro.c ****                 dprintf("UP(%02X)\n", macro);
  88:../../tmk_core/common/action_macro.c ****                 unregister_code(macro&0x7F);
 117               		.loc 1 88 0
 118 0068 8F77      		andi r24,lo8(127)
 119               	.LVL8:
 120 006a 0E94 0000 		call unregister_code
 121               	.LVL9:
  89:../../tmk_core/common/action_macro.c ****                 break;
 122               		.loc 1 89 0
 123 006e 00C0      		rjmp .L15
 124               	.LVL10:
 125               	.L7:
 126               	.LBB14:
  43:../../tmk_core/common/action_macro.c ****                 dprintf("KEY_DOWN(%02X)\n", macro);
 127               		.loc 1 43 0
 128 0070 8F01      		movw r16,r30
 129 0072 0E5F      		subi r16,-2
 130 0074 1F4F      		sbci r17,-1
 131               	.LVL11:
 132 0076 FE01      		movw r30,r28
 133               	.LVL12:
 134               	/* #APP */
 135               	 ;  43 "../../tmk_core/common/action_macro.c" 1
 136 0078 8491      		lpm r24, Z
 137               		
 138               	 ;  0 "" 2
 139               	.LVL13:
 140               	/* #NOAPP */
 141               	.LBE14:
  45:../../tmk_core/common/action_macro.c ****                     add_weak_mods(MOD_BIT(macro));
 142               		.loc 1 45 0
 143 007a 90E2      		ldi r25,lo8(32)
 144 007c 980F      		add r25,r24
 145 007e 9830      		cpi r25,lo8(8)
 146 0080 00F4      		brsh .L14
  46:../../tmk_core/common/action_macro.c ****                     send_keyboard_report();
 147               		.loc 1 46 0
 148 0082 8770      		andi r24,lo8(7)
 149               	.LVL14:
 150 0084 FD2D      		mov r31,r13
 151 0086 00C0      		rjmp 2f
 152               		1:
 153 0088 FF0F      		lsl r31
 154               		2:
 155 008a 8A95      		dec r24
 156 008c 02F4      		brpl 1b
 157 008e 8F2F      		mov r24,r31
 158 0090 0E94 0000 		call add_weak_mods
 159               	.LVL15:
 160 0094 00C0      		rjmp .L26
 161               	.LVL16:
 162               	.L14:
  49:../../tmk_core/common/action_macro.c ****                 }
 163               		.loc 1 49 0
 164 0096 0E94 0000 		call register_code
 165               	.LVL17:
 166 009a 00C0      		rjmp .L27
 167               	.LVL18:
 168               	.L8:
 169               	.LBB15:
  53:../../tmk_core/common/action_macro.c ****                 dprintf("KEY_UP(%02X)\n", macro);
 170               		.loc 1 53 0
 171 009c 8F01      		movw r16,r30
 172 009e 0E5F      		subi r16,-2
 173 00a0 1F4F      		sbci r17,-1
 174               	.LVL19:
 175 00a2 FE01      		movw r30,r28
 176               	.LVL20:
 177               	/* #APP */
 178               	 ;  53 "../../tmk_core/common/action_macro.c" 1
 179 00a4 8491      		lpm r24, Z
 180               		
 181               	 ;  0 "" 2
 182               	.LVL21:
 183               	/* #NOAPP */
 184               	.LBE15:
  55:../../tmk_core/common/action_macro.c ****                     del_weak_mods(MOD_BIT(macro));
 185               		.loc 1 55 0
 186 00a6 90E2      		ldi r25,lo8(32)
 187 00a8 980F      		add r25,r24
 188 00aa 9830      		cpi r25,lo8(8)
 189 00ac 00F4      		brsh .L16
  56:../../tmk_core/common/action_macro.c ****                     send_keyboard_report();
 190               		.loc 1 56 0
 191 00ae 8770      		andi r24,lo8(7)
 192               	.LVL22:
 193 00b0 FD2D      		mov r31,r13
 194 00b2 00C0      		rjmp 2f
 195               		1:
 196 00b4 FF0F      		lsl r31
 197               		2:
 198 00b6 8A95      		dec r24
 199 00b8 02F4      		brpl 1b
 200 00ba 8F2F      		mov r24,r31
 201 00bc 0E94 0000 		call del_weak_mods
 202               	.LVL23:
 203               	.L26:
  57:../../tmk_core/common/action_macro.c ****                 } else {
 204               		.loc 1 57 0
 205 00c0 0E94 0000 		call send_keyboard_report
 206               	.LVL24:
 207               	.L27:
 208               	.LBB16:
  53:../../tmk_core/common/action_macro.c ****                 dprintf("KEY_UP(%02X)\n", macro);
 209               		.loc 1 53 0
 210 00c4 E801      		movw r28,r16
 211               	.LVL25:
 212               	.LBE16:
 213 00c6 00C0      		rjmp .L15
 214               	.LVL26:
 215               	.L16:
  59:../../tmk_core/common/action_macro.c ****                 }
 216               		.loc 1 59 0
 217 00c8 0E94 0000 		call unregister_code
 218               	.LVL27:
 219 00cc 00C0      		rjmp .L27
 220               	.LVL28:
 221               	.L5:
 222               	.LBB17:
  63:../../tmk_core/common/action_macro.c ****                 dprintf("WAIT(%u)\n", macro);
 223               		.loc 1 63 0
 224 00ce CF01      		movw r24,r30
 225               	.LVL29:
 226 00d0 0296      		adiw r24,2
 227               	.LVL30:
 228 00d2 FE01      		movw r30,r28
 229               	.LVL31:
 230               	/* #APP */
 231               	 ;  63 "../../tmk_core/common/action_macro.c" 1
 232 00d4 C491      		lpm r28, Z
 233               		
 234               	 ;  0 "" 2
 235               	.LVL32:
 236               	/* #NOAPP */
 237               	.L17:
 238               	.LBE17:
 239               	.LBB18:
  65:../../tmk_core/common/action_macro.c ****                 break;
 240               		.loc 1 65 0 discriminator 1
 241 00d6 CC23      		tst r28
 242 00d8 01F0      		breq .L28
 243               	.LVL33:
 244               	.LBB19:
 245               	.LBB20:
 246               		.file 2 "/usr/lib/avr/include/util/delay.h"
   1:/usr/lib/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/lib/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/lib/avr/include/util/delay.h **** 
   6:/usr/lib/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/lib/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/lib/avr/include/util/delay.h **** 
   9:/usr/lib/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/lib/avr/include/util/delay.h **** 
  12:/usr/lib/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/lib/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/lib/avr/include/util/delay.h ****      distribution.
  16:/usr/lib/avr/include/util/delay.h **** 
  17:/usr/lib/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/lib/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/lib/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/lib/avr/include/util/delay.h **** 
  21:/usr/lib/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/lib/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/lib/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/lib/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/lib/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/lib/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/lib/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/lib/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/lib/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/lib/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/lib/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/lib/avr/include/util/delay.h **** 
  33:/usr/lib/avr/include/util/delay.h **** /* $Id$ */
  34:/usr/lib/avr/include/util/delay.h **** 
  35:/usr/lib/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/lib/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/lib/avr/include/util/delay.h **** 
  38:/usr/lib/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/usr/lib/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/usr/lib/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/usr/lib/avr/include/util/delay.h **** #  endif
  42:/usr/lib/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/usr/lib/avr/include/util/delay.h **** 
  44:/usr/lib/avr/include/util/delay.h **** #include <inttypes.h>
  45:/usr/lib/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/usr/lib/avr/include/util/delay.h **** #include <math.h>
  47:/usr/lib/avr/include/util/delay.h **** 
  48:/usr/lib/avr/include/util/delay.h **** /** \file */
  49:/usr/lib/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/usr/lib/avr/include/util/delay.h ****     \code
  51:/usr/lib/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/usr/lib/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/usr/lib/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/usr/lib/avr/include/util/delay.h ****     \endcode
  55:/usr/lib/avr/include/util/delay.h **** 
  56:/usr/lib/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/usr/lib/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/usr/lib/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/usr/lib/avr/include/util/delay.h ****     used.
  60:/usr/lib/avr/include/util/delay.h **** 
  61:/usr/lib/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/usr/lib/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/usr/lib/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/usr/lib/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/usr/lib/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/usr/lib/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/usr/lib/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/usr/lib/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/usr/lib/avr/include/util/delay.h **** 
  70:/usr/lib/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/usr/lib/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/usr/lib/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/usr/lib/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/usr/lib/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/usr/lib/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/usr/lib/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/usr/lib/avr/include/util/delay.h ****     routines linked into the application.
  78:/usr/lib/avr/include/util/delay.h **** 
  79:/usr/lib/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/usr/lib/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/usr/lib/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/usr/lib/avr/include/util/delay.h **** 
  83:/usr/lib/avr/include/util/delay.h **** */
  84:/usr/lib/avr/include/util/delay.h **** 
  85:/usr/lib/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/usr/lib/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/usr/lib/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/usr/lib/avr/include/util/delay.h **** #endif
  89:/usr/lib/avr/include/util/delay.h **** 
  90:/usr/lib/avr/include/util/delay.h **** #ifndef F_CPU
  91:/usr/lib/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/usr/lib/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/usr/lib/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/usr/lib/avr/include/util/delay.h ****     \def F_CPU
  95:/usr/lib/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/usr/lib/avr/include/util/delay.h **** 
  97:/usr/lib/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/usr/lib/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/usr/lib/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/usr/lib/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/usr/lib/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/usr/lib/avr/include/util/delay.h **** 
 103:/usr/lib/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/usr/lib/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/usr/lib/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/usr/lib/avr/include/util/delay.h ****     integer value.
 107:/usr/lib/avr/include/util/delay.h ****  */
 108:/usr/lib/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/usr/lib/avr/include/util/delay.h **** #endif
 110:/usr/lib/avr/include/util/delay.h **** 
 111:/usr/lib/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/usr/lib/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/usr/lib/avr/include/util/delay.h **** #endif
 114:/usr/lib/avr/include/util/delay.h **** 
 115:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/usr/lib/avr/include/util/delay.h **** #  include <math.h>
 119:/usr/lib/avr/include/util/delay.h **** #endif
 120:/usr/lib/avr/include/util/delay.h **** 
 121:/usr/lib/avr/include/util/delay.h **** /**
 122:/usr/lib/avr/include/util/delay.h ****    \ingroup util_delay
 123:/usr/lib/avr/include/util/delay.h **** 
 124:/usr/lib/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/usr/lib/avr/include/util/delay.h **** 
 126:/usr/lib/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/usr/lib/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/usr/lib/avr/include/util/delay.h **** 
 129:/usr/lib/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/usr/lib/avr/include/util/delay.h **** 
 131:/usr/lib/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/usr/lib/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/usr/lib/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/usr/lib/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/usr/lib/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/usr/lib/avr/include/util/delay.h **** 
 137:/usr/lib/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/usr/lib/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/usr/lib/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/usr/lib/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/usr/lib/avr/include/util/delay.h **** 
 142:/usr/lib/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/usr/lib/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/usr/lib/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/usr/lib/avr/include/util/delay.h ****    microseconds of delay.
 146:/usr/lib/avr/include/util/delay.h **** 
 147:/usr/lib/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/usr/lib/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/usr/lib/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/usr/lib/avr/include/util/delay.h ****    respectively.
 151:/usr/lib/avr/include/util/delay.h **** 
 152:/usr/lib/avr/include/util/delay.h ****    \note
 153:/usr/lib/avr/include/util/delay.h **** 
 154:/usr/lib/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/usr/lib/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/usr/lib/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/usr/lib/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/usr/lib/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/usr/lib/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/usr/lib/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/usr/lib/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/usr/lib/avr/include/util/delay.h ****    not available to the compiler then.
 163:/usr/lib/avr/include/util/delay.h **** 
 164:/usr/lib/avr/include/util/delay.h ****  */
 165:/usr/lib/avr/include/util/delay.h **** void
 166:/usr/lib/avr/include/util/delay.h **** _delay_ms(double __ms)
 167:/usr/lib/avr/include/util/delay.h **** {
 168:/usr/lib/avr/include/util/delay.h **** 	double __tmp ;
 169:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/usr/lib/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 173:/usr/lib/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 174:/usr/lib/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 175:/usr/lib/avr/include/util/delay.h **** 
 176:/usr/lib/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/usr/lib/avr/include/util/delay.h **** 
 179:/usr/lib/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/usr/lib/avr/include/util/delay.h **** 
 182:/usr/lib/avr/include/util/delay.h **** 	#else
 183:/usr/lib/avr/include/util/delay.h **** 		//round up by default
 184:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 185:/usr/lib/avr/include/util/delay.h **** 	#endif
 186:/usr/lib/avr/include/util/delay.h **** 
 187:/usr/lib/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 247               		.loc 2 187 0
 248 00da EFE9      		ldi r30,lo8(3999)
 249 00dc FFE0      		ldi r31,hi8(3999)
 250 00de 3197      	1:	sbiw r30,1
 251 00e0 01F4      		brne 1b
 252 00e2 00C0      		rjmp .
 253 00e4 0000      		nop
 254 00e6 C150      		subi r28,lo8(-(-1))
 255               	.LVL34:
 256 00e8 00C0      		rjmp .L17
 257               	.LVL35:
 258               	.L3:
 259               	.LBE20:
 260               	.LBE19:
 261               	.LBE18:
 262               	.LBB21:
  68:../../tmk_core/common/action_macro.c ****                 dprintf("INTERVAL(%u)\n", interval);
 263               		.loc 1 68 0
 264 00ea CF01      		movw r24,r30
 265               	.LVL36:
 266 00ec 0296      		adiw r24,2
 267               	.LVL37:
 268 00ee FE01      		movw r30,r28
 269               	.LVL38:
 270               	/* #APP */
 271               	 ;  68 "../../tmk_core/common/action_macro.c" 1
 272 00f0 F490      		lpm r15, Z
 273               		
 274               	 ;  0 "" 2
 275               	.LVL39:
 276               	/* #NOAPP */
 277               	.L28:
 278 00f2 EC01      		movw r28,r24
 279               	.LBE21:
  70:../../tmk_core/common/action_macro.c ****             case MOD_STORE:
 280               		.loc 1 70 0
 281 00f4 00C0      		rjmp .L15
 282               	.LVL40:
 283               	.L11:
  72:../../tmk_core/common/action_macro.c ****                 break;
 284               		.loc 1 72 0
 285 00f6 0E94 0000 		call get_mods
 286               	.LVL41:
 287 00fa E82E      		mov r14,r24
 288               	.LVL42:
  73:../../tmk_core/common/action_macro.c ****             case MOD_RESTORE:
 289               		.loc 1 73 0
 290 00fc 00C0      		rjmp .L15
 291               	.LVL43:
 292               	.L9:
  79:../../tmk_core/common/action_macro.c ****                 send_keyboard_report();
 293               		.loc 1 79 0
 294 00fe 0E94 0000 		call clear_mods
 295               	.LVL44:
 296               	.L29:
  80:../../tmk_core/common/action_macro.c ****                 break;
 297               		.loc 1 80 0
 298 0102 0E94 0000 		call send_keyboard_report
 299               	.LVL45:
  81:../../tmk_core/common/action_macro.c ****             case 0x04 ... 0x73:
 300               		.loc 1 81 0
 301 0106 00C0      		rjmp .L15
 302               	.LVL46:
 303               	.L6:
  84:../../tmk_core/common/action_macro.c ****                 break;
 304               		.loc 1 84 0
 305 0108 0E94 0000 		call register_code
 306               	.LVL47:
 307               	.L15:
 308               	.LBB22:
  90:../../tmk_core/common/action_macro.c ****             case END:
  91:../../tmk_core/common/action_macro.c ****             default:
  92:../../tmk_core/common/action_macro.c ****                 return;
  93:../../tmk_core/common/action_macro.c ****         }
  94:../../tmk_core/common/action_macro.c ****         // interval
  95:../../tmk_core/common/action_macro.c ****         { uint8_t ms = interval; while (ms--) wait_ms(1); }
 309               		.loc 1 95 0
 310 010c 8F2D      		mov r24,r15
 311               	.LVL48:
 312               	.L19:
 313               		.loc 1 95 0 is_stmt 0 discriminator 1
 314 010e 8823      		tst r24
 315 0110 01F0      		breq .L31
 316               	.LVL49:
 317               	.LBB23:
 318               	.LBB24:
 319               		.loc 2 187 0 is_stmt 1
 320 0112 EFE9      		ldi r30,lo8(3999)
 321 0114 FFE0      		ldi r31,hi8(3999)
 322 0116 3197      	1:	sbiw r30,1
 323 0118 01F4      		brne 1b
 324 011a 00C0      		rjmp .
 325 011c 0000      		nop
 326 011e 8150      		subi r24,lo8(-(-1))
 327               	.LVL50:
 328 0120 00C0      		rjmp .L19
 329               	.LVL51:
 330               	.L31:
 331               	.LBE24:
 332               	.LBE23:
 333 0122 FE01      		movw r30,r28
 334 0124 00C0      		rjmp .L21
 335               	.LVL52:
 336               	.L1:
 337               	/* epilogue start */
 338               	.LBE22:
  96:../../tmk_core/common/action_macro.c ****     }
  97:../../tmk_core/common/action_macro.c **** }
 339               		.loc 1 97 0
 340 0126 DF91      		pop r29
 341 0128 CF91      		pop r28
 342 012a 1F91      		pop r17
 343 012c 0F91      		pop r16
 344 012e FF90      		pop r15
 345 0130 EF90      		pop r14
 346 0132 DF90      		pop r13
 347 0134 0895      		ret
 348               		.cfi_endproc
 349               	.LFE103:
 351               		.text
 352               	.Letext0:
 353               		.file 3 "/usr/lib/avr/include/stdint.h"
 354               		.file 4 "../../tmk_core/common/action_macro.h"
 355               		.file 5 "../../tmk_core/common/keycode.h"
 356               		.file 6 "../../tmk_core/common/action_util.h"
 357               		.file 7 "../../tmk_core/common/action.h"
 358               		.file 8 "../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/USBTask.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 action_macro.c
     /tmp/cc8CcOf8.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/cc8CcOf8.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/cc8CcOf8.s:4      *ABS*:000000000000003f __SREG__
     /tmp/cc8CcOf8.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/cc8CcOf8.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/cc8CcOf8.s:13     .text.action_macro_play:0000000000000000 action_macro_play

UNDEFINED SYMBOLS
set_mods
unregister_code
add_weak_mods
register_code
del_weak_mods
send_keyboard_report
get_mods
clear_mods
