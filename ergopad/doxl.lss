
doxl.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003e  00800100  0000565a  000056ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000565a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001ed  0080013e  0080013e  0000572c  2**0
                  ALLOC
  3 .noinit       00000004  0080032b  0080032b  0000572c  2**0
                  ALLOC
  4 .stab         000008b8  00000000  00000000  0000572c  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      00000073  00000000  00000000  00005fe4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000011  00000000  00000000  00006057  2**0
                  CONTENTS, READONLY
  7 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00006068  2**2
                  CONTENTS, READONLY
  8 .debug_aranges 00000920  00000000  00000000  000060a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00010aa0  00000000  00000000  000069c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00004419  00000000  00000000  00017468  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000079f1  00000000  00000000  0001b881  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001a90  00000000  00000000  00023274  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000045ba  00000000  00000000  00024d04  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00008a18  00000000  00000000  000292be  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000aa8  00000000  00000000  00031cd6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 24 06 	jmp	0xc48	; 0xc48 <__ctors_end>
       4:	0c 94 6b 06 	jmp	0xcd6	; 0xcd6 <__bad_interrupt>
       8:	0c 94 6b 06 	jmp	0xcd6	; 0xcd6 <__bad_interrupt>
       c:	0c 94 6b 06 	jmp	0xcd6	; 0xcd6 <__bad_interrupt>
      10:	0c 94 6b 06 	jmp	0xcd6	; 0xcd6 <__bad_interrupt>
      14:	0c 94 6b 06 	jmp	0xcd6	; 0xcd6 <__bad_interrupt>
      18:	0c 94 6b 06 	jmp	0xcd6	; 0xcd6 <__bad_interrupt>
      1c:	0c 94 6b 06 	jmp	0xcd6	; 0xcd6 <__bad_interrupt>
      20:	0c 94 6b 06 	jmp	0xcd6	; 0xcd6 <__bad_interrupt>
      24:	0c 94 6b 06 	jmp	0xcd6	; 0xcd6 <__bad_interrupt>
      28:	0c 94 de 0d 	jmp	0x1bbc	; 0x1bbc <__vector_10>
      2c:	0c 94 b0 0e 	jmp	0x1d60	; 0x1d60 <__vector_11>
      30:	0c 94 0d 1e 	jmp	0x3c1a	; 0x3c1a <__vector_12>
      34:	0c 94 6b 06 	jmp	0xcd6	; 0xcd6 <__bad_interrupt>
      38:	0c 94 6b 06 	jmp	0xcd6	; 0xcd6 <__bad_interrupt>
      3c:	0c 94 6b 06 	jmp	0xcd6	; 0xcd6 <__bad_interrupt>
      40:	0c 94 6b 06 	jmp	0xcd6	; 0xcd6 <__bad_interrupt>
      44:	0c 94 6b 06 	jmp	0xcd6	; 0xcd6 <__bad_interrupt>
      48:	0c 94 6b 06 	jmp	0xcd6	; 0xcd6 <__bad_interrupt>
      4c:	0c 94 6b 06 	jmp	0xcd6	; 0xcd6 <__bad_interrupt>
      50:	0c 94 6b 06 	jmp	0xcd6	; 0xcd6 <__bad_interrupt>
      54:	0c 94 81 1e 	jmp	0x3d02	; 0x3d02 <__vector_21>
      58:	0c 94 6b 06 	jmp	0xcd6	; 0xcd6 <__bad_interrupt>
      5c:	0c 94 6b 06 	jmp	0xcd6	; 0xcd6 <__bad_interrupt>
      60:	0c 94 6b 06 	jmp	0xcd6	; 0xcd6 <__bad_interrupt>
      64:	0c 94 6b 06 	jmp	0xcd6	; 0xcd6 <__bad_interrupt>
      68:	0c 94 6b 06 	jmp	0xcd6	; 0xcd6 <__bad_interrupt>
      6c:	0c 94 6b 06 	jmp	0xcd6	; 0xcd6 <__bad_interrupt>
      70:	0c 94 6b 06 	jmp	0xcd6	; 0xcd6 <__bad_interrupt>
      74:	0c 94 6b 06 	jmp	0xcd6	; 0xcd6 <__bad_interrupt>
      78:	0c 94 6b 06 	jmp	0xcd6	; 0xcd6 <__bad_interrupt>
      7c:	0c 94 6b 06 	jmp	0xcd6	; 0xcd6 <__bad_interrupt>
      80:	0c 94 6b 06 	jmp	0xcd6	; 0xcd6 <__bad_interrupt>
      84:	0c 94 6b 06 	jmp	0xcd6	; 0xcd6 <__bad_interrupt>
      88:	0c 94 6b 06 	jmp	0xcd6	; 0xcd6 <__bad_interrupt>
      8c:	0c 94 6b 06 	jmp	0xcd6	; 0xcd6 <__bad_interrupt>
      90:	0c 94 6b 06 	jmp	0xcd6	; 0xcd6 <__bad_interrupt>
      94:	0c 94 6b 06 	jmp	0xcd6	; 0xcd6 <__bad_interrupt>
      98:	0c 94 6b 06 	jmp	0xcd6	; 0xcd6 <__bad_interrupt>
      9c:	0c 94 6b 06 	jmp	0xcd6	; 0xcd6 <__bad_interrupt>
      a0:	0c 94 6b 06 	jmp	0xcd6	; 0xcd6 <__bad_interrupt>
      a4:	0c 94 6b 06 	jmp	0xcd6	; 0xcd6 <__bad_interrupt>
      a8:	0c 94 6b 06 	jmp	0xcd6	; 0xcd6 <__bad_interrupt>
      ac:	1d 0f       	add	r17, r29
      ae:	3f 0f       	add	r19, r31
      b0:	32 10       	cpse	r3, r2
      b2:	3f 0f       	add	r19, r31
      b4:	32 10       	cpse	r3, r2
      b6:	84 0f       	add	r24, r20
      b8:	a7 0f       	add	r26, r23
      ba:	32 10       	cpse	r3, r2
      bc:	fc 0f       	add	r31, r28
      be:	0f 10       	cpse	r0, r15
      c0:	df 13       	cpse	r29, r31
      c2:	df 13       	cpse	r29, r31
      c4:	09 14       	cp	r0, r9
      c6:	09 14       	cp	r0, r9
      c8:	64 14       	cp	r6, r4
      ca:	98 14       	cp	r9, r8
      cc:	88 16       	cp	r8, r24
      ce:	88 16       	cp	r8, r24
      d0:	af 14       	cp	r10, r15
      d2:	88 16       	cp	r8, r24
      d4:	9a 15       	cp	r25, r10
      d6:	9a 15       	cp	r25, r10
      d8:	60 16       	cp	r6, r16
      da:	88 16       	cp	r8, r24
      dc:	88 16       	cp	r8, r24
      de:	75 16       	cp	r7, r21

000000e0 <__trampolines_end>:
      e0:	46 a4       	ldd	r4, Z+46	; 0x2e
      e2:	01 8c       	ldd	r0, Z+25	; 0x19
      e4:	02 8c       	ldd	r0, Z+26	; 0x1a
      e6:	04 8c       	ldd	r0, Z+28	; 0x1c
      e8:	08 8c       	ldd	r0, Y+24	; 0x18
      ea:	00 f0       	brcs	.+0      	; 0xec <__trampolines_end+0xc>
      ec:	00 00       	nop
      ee:	00 00       	nop
      f0:	00 00       	nop
      f2:	00 00       	nop
      f4:	3a 02       	muls	r19, r26
      f6:	3b 02       	muls	r19, r27
      f8:	00 00       	nop
      fa:	68 02       	muls	r22, r24
      fc:	69 02       	muls	r22, r25
      fe:	6a 02       	muls	r22, r26
     100:	6b 02       	muls	r22, r27
     102:	6c 02       	muls	r22, r28
     104:	6d 02       	muls	r22, r29
     106:	6e 02       	muls	r22, r30
     108:	6f 02       	muls	r22, r31
     10a:	70 02       	muls	r23, r16
     10c:	71 02       	muls	r23, r17
     10e:	72 02       	muls	r23, r18
     110:	73 02       	muls	r23, r19
     112:	45 01       	movw	r8, r10
     114:	68 01       	movw	r12, r16

00000116 <keymaps>:
     116:	00 00 c0 c1 c2 c3 c4 00 00 53 57 54 55 56 49 4a     .........SWTUVIJ
     126:	4b 5f 60 61 4c 4c 4d 4e 5c 5d 5e 50 aa 52 a9 59     K_`aLLMN\]^P.R.Y
     136:	5a 5b 4f 50 51 4f 62 2a 63 28 00 00 c0 c1 c2 c3     Z[OPQOb*c(......
     146:	c4 00 00 53 57 54 55 56 3a 3b 3c 5f 60 61 4c 3d     ...SWTUV:;<_`aL=
     156:	3e 3f 5c 5d 5e 50 40 41 42 59 5a 5b 4f 43 44 45     >?\]^P@ABYZ[OCDE
     166:	62 2a 63 28 00 00 d9 c1 c2 c3 c4 00 00 da 57 54     b*c(..........WT
     176:	55 56 68 69 6a 5f 60 61 4c 6b 6c 6d 5c 5d 5e 50     UVhij_`aLklm\]^P
     186:	6e 6f 70 59 5a 5b 4f 71 72 73 62 2a 63 28 00 00     nopYZ[Oqrsb*c(..
     196:	d9 c1 c2 c3 c4 00 00 da 57 54 55 56 cd ce cf 5f     ........WTUV..._
     1a6:	60 61 4c d0 d1 d2 5c 5d 5e 50 d3 d4 d5 59 5a 5b     `aL...\]^P...YZ[
     1b6:	4f d6 d7 d8 62 2a 63 28 00 00 01 c1 c2 c3 c4 00     O...b*c(........
     1c6:	00 c5 57 54 55 56 01 01 01 5f 60 61 4c 01 01 01     ..WTUV..._`aL...
     1d6:	5c 5d 5e 50 01 01 01 59 5a 5b 4f 01 01 01 62 2a     \]^P...YZ[O...b*
     1e6:	63 28                                               c(

000001e8 <__c.1995>:
     1e8:	0a 00                                               ..

000001ea <__c.1993>:
     1ea:	25 30 32 58 00                                      %02X.

000001ef <__c.1991>:
     1ef:	62 6f 75 6e 63 65 21 3a 20 00                       bounce!: .

000001f9 <__c.5116>:
     1f9:	0a 4b 65 79 62 6f 61 72 64 20 73 74 61 72 74 2e     .Keyboard start.
     209:	0a 00                                               ..

0000020b <__c.5111>:
     20b:	4b 65 79 62 6f 61 72 64 20 69 6e 69 74 2e 0a 00     Keyboard init...

0000021b <__c.5018>:
     21b:	5b 44 5d 00                                         [D].

0000021f <__c.5013>:
     21f:	5b 43 5d 00                                         [C].

00000223 <ProductString>:
     223:	10 03 65 00 72 00 67 00 6f 00 70 00 61 00 64 00     ..e.r.g.o.p.a.d.
     233:	00 00                                               ..

00000235 <ManufacturerString>:
     235:	12 03 6e 00 69 00 63 00 6b 00 68 00 61 00 63 00     ..n.i.c.k.h.a.c.
     245:	6b 00 00 00                                         k...

00000249 <LanguageString>:
     249:	04 03 09 04                                         ....

0000024d <ConfigurationDescriptor>:
     24d:	09 02 8d 00 05 01 00 a0 32 09 04 00 00 01 03 01     ........2.......
     25d:	01 00 09 21 11 01 00 01 22 40 00 07 05 81 03 08     ...!...."@......
     26d:	00 0a 09 04 01 00 01 03 01 02 00 09 21 11 01 00     ............!...
     27d:	01 22 4d 00 07 05 82 03 08 00 0a 09 04 02 00 01     ."M.............
     28d:	03 00 00 00 09 21 11 01 00 01 22 36 00 07 05 83     .....!...."6....
     29d:	03 08 00 0a 09 04 03 00 02 03 00 00 00 09 21 11     ..............!.
     2ad:	01 00 01 22 22 00 07 05 84 03 20 00 01 07 05 04     ...""..... .....
     2bd:	03 20 00 01 09 04 04 00 01 03 00 00 00 09 21 11     . ............!.
     2cd:	01 00 01 22 39 00 07 05 85 03 20 00 01              ..."9..... ..

000002da <DeviceDescriptor>:
     2da:	12 01 10 01 00 00 00 08 ed fe 60 60 01 00 01 02     ..........``....
     2ea:	00 01                                               ..

000002ec <NKROReport>:
     2ec:	05 01 09 06 a1 01 05 07 19 e0 29 e7 15 00 25 01     ..........)...%.
     2fc:	95 08 75 01 81 02 05 08 19 01 29 05 95 05 75 01     ..u.......)...u.
     30c:	91 02 95 01 75 03 91 01 05 07 19 00 29 f7 15 00     ....u.......)...
     31c:	25 01 95 f8 75 01 81 02 c0                          %...u....

00000325 <ConsoleReport>:
     325:	06 31 ff 09 74 a1 01 09 75 15 00 26 ff 00 95 20     .1..t...u..&... 
     335:	75 08 81 02 09 76 15 00 26 ff 00 95 20 75 08 91     u....v..&... u..
     345:	02 c0                                               ..

00000347 <ExtrakeyReport>:
     347:	05 01 09 80 a1 01 85 02 16 01 00 26 37 00 1a 81     ...........&7...
     357:	00 2a b7 00 75 10 95 01 81 00 c0 05 0c 09 01 a1     .*..u...........
     367:	01 85 03 16 01 00 26 9c 02 1a 01 00 2a 9c 02 75     ......&.....*..u
     377:	10 95 01 81 00 c0                                   ......

0000037d <MouseReport>:
     37d:	05 01 09 02 a1 01 09 01 a1 00 05 09 19 01 29 05     ..............).
     38d:	15 00 25 01 95 05 75 01 81 02 95 01 75 03 81 01     ..%...u.....u...
     39d:	05 01 09 30 09 31 15 81 25 7f 95 02 75 08 81 06     ...0.1..%...u...
     3ad:	09 38 15 81 25 7f 95 01 75 08 81 06 05 0c 0a 38     .8..%...u......8
     3bd:	02 15 81 25 7f 95 01 75 08 81 06 c0 c0              ...%...u.....

000003ca <KeyboardReport>:
     3ca:	05 01 09 06 a1 01 05 07 19 e0 29 e7 15 00 25 01     ..........)...%.
     3da:	95 08 75 01 81 02 95 01 75 08 81 01 05 08 19 01     ..u.....u.......
     3ea:	29 05 95 05 75 01 91 02 95 01 75 03 91 01 05 07     )...u.....u.....
     3fa:	19 00 29 ff 15 00 26 ff 00 95 06 75 08 81 00 c0     ..)...&....u....

0000040a <__c.4650>:
     40a:	63 6f 6e 73 75 6d 65 72 3a 20 25 30 34 58 0a 00     consumer: %04X..

0000041a <__c.4645>:
     41a:	73 79 73 74 65 6d 3a 20 25 30 34 58 0a 00           system: %04X..

00000428 <__c.4637>:
     428:	0a 00                                               ..

0000042a <__c.4632>:
     42a:	25 30 32 58 20 00                                   %02X .

00000430 <__c.4629>:
     430:	6b 65 79 62 6f 61 72 64 3a 20 00                    keyboard: .

0000043b <__c.4994>:
     43b:	4c 45 44 3a 20 25 30 32 58 0a 00                    LED: %02X..

00000446 <__c.1851>:
     446:	25 30 32 58 3a 20 25 30 38 62 25 73 0a 00           %02X: %08b%s..

00000454 <__c.1848>:
     454:	72 2f 63 20 30 31 32 33 34 35 36 37 0a 00           r/c 01234567..

00000462 <__c.4777>:
     462:	64 65 6c 5f 6b 65 79 5f 62 69 74 3a 20 63 61 6e     del_key_bit: can
     472:	27 74 20 64 65 6c 3a 20 25 30 32 58 0a 00           't del: %02X..

00000480 <__c.4772>:
     480:	61 64 64 5f 6b 65 79 5f 62 69 74 3a 20 63 61 6e     add_key_bit: can
     490:	27 74 20 61 64 64 3a 20 25 30 32 58 0a 00           't add: %02X..

0000049e <__c.4946>:
     49e:	64 6f 6e 65 2e 0a 00                                done...

000004a5 <__c.4940>:
     4a5:	62 6f 6f 74 6d 61 67 69 63 20 73 63 61 6e 3a 20     bootmagic scan: 
     4b5:	2e 2e 2e 20 00                                      ... .

000004ba <__c.4709>:
     4ba:	29 0a 00                                            )..

000004bd <__c.4707>:
     4bd:	25 75 00                                            %u.

000004c0 <__c.4705>:
     4c0:	2f 00                                               /.

000004c2 <__c.4703>:
     4c2:	25 75 00                                            %u.

000004c5 <__c.4701>:
     4c5:	5d 28 00                                            ](.

000004c8 <__c.4699>:
     4c8:	25 64 00                                            %d.

000004cb <__c.4697>:
     4cb:	20 00                                                .

000004cd <__c.4695>:
     4cd:	25 64 00                                            %d.

000004d0 <__c.4693>:
     4d0:	20 00                                                .

000004d2 <__c.4691>:
     4d2:	25 64 00                                            %d.

000004d5 <__c.4689>:
     4d5:	20 00                                                .

000004d7 <__c.4687>:
     4d7:	25 64 00                                            %d.

000004da <__c.4685>:
     4da:	7c 00                                               |.

000004dc <__c.4683>:
     4dc:	25 30 32 58 00                                      %02X.

000004e1 <__c.4681>:
     4e1:	6d 6f 75 73 65 6b 65 79 20 5b 62 74 6e 7c 78 20     mousekey [btn|x 
     4f1:	79 20 76 20 68 5d 28 72 65 70 2f 61 63 6c 29 3a     y v h](rep/acl):
     501:	20 5b 00                                             [.

00000504 <__c.5319>:
     504:	6d 6b 5f 77 68 65 65 6c 5f 74 69 6d 65 5f 74 6f     mk_wheel_time_to
     514:	5f 6d 61 78 20 3d 20 25 64 0a 00                    _max = %d..

0000051f <__c.5316>:
     51f:	6d 6b 5f 77 68 65 65 6c 5f 6d 61 78 5f 73 70 65     mk_wheel_max_spe
     52f:	65 64 20 3d 20 25 64 0a 00                          ed = %d..

00000538 <__c.5313>:
     538:	6d 6b 5f 74 69 6d 65 5f 74 6f 5f 6d 61 78 20 3d     mk_time_to_max =
     548:	20 25 64 0a 00                                       %d..

0000054d <__c.5310>:
     54d:	6d 6b 5f 6d 61 78 5f 73 70 65 65 64 20 3d 20 25     mk_max_speed = %
     55d:	64 0a 00                                            d..

00000560 <__c.5307>:
     560:	6d 6b 5f 69 6e 74 65 72 76 61 6c 20 3d 20 25 64     mk_interval = %d
     570:	0a 00                                               ..

00000572 <__c.5303>:
     572:	6d 6b 5f 64 65 6c 61 79 20 3d 20 25 64 0a 00        mk_delay = %d..

00000581 <__c.5296>:
     581:	6d 6b 5f 77 68 65 65 6c 5f 74 69 6d 65 5f 74 6f     mk_wheel_time_to
     591:	5f 6d 61 78 20 3d 20 25 64 0a 00                    _max = %d..

0000059c <__c.5293>:
     59c:	6d 6b 5f 77 68 65 65 6c 5f 6d 61 78 5f 73 70 65     mk_wheel_max_spe
     5ac:	65 64 20 3d 20 25 64 0a 00                          ed = %d..

000005b5 <__c.5290>:
     5b5:	6d 6b 5f 74 69 6d 65 5f 74 6f 5f 6d 61 78 20 3d     mk_time_to_max =
     5c5:	20 25 64 0a 00                                       %d..

000005ca <__c.5287>:
     5ca:	6d 6b 5f 6d 61 78 5f 73 70 65 65 64 20 3d 20 25     mk_max_speed = %
     5da:	64 0a 00                                            d..

000005dd <__c.5284>:
     5dd:	6d 6b 5f 69 6e 74 65 72 76 61 6c 20 3d 20 25 64     mk_interval = %d
     5ed:	0a 00                                               ..

000005ef <__c.5280>:
     5ef:	6d 6b 5f 64 65 6c 61 79 20 3d 20 25 64 0a 00        mk_delay = %d..

000005fe <__c.5273>:
     5fe:	0a 00                                               ..

00000600 <__c.5271>:
     600:	25 75 00                                            %u.

00000603 <__c.5269>:
     603:	36 3a 20 77 68 65 65 6c 5f 74 69 6d 65 5f 74 6f     6: wheel_time_to
     613:	5f 6d 61 78 3a 20 00                                _max: .

0000061a <__c.5267>:
     61a:	0a 00                                               ..

0000061c <__c.5265>:
     61c:	25 75 00                                            %u.

0000061f <__c.5263>:
     61f:	35 3a 20 77 68 65 65 6c 5f 6d 61 78 5f 73 70 65     5: wheel_max_spe
     62f:	65 64 3a 20 00                                      ed: .

00000634 <__c.5261>:
     634:	0a 00                                               ..

00000636 <__c.5259>:
     636:	25 75 00                                            %u.

00000639 <__c.5257>:
     639:	34 3a 20 74 69 6d 65 5f 74 6f 5f 6d 61 78 3a 20     4: time_to_max: 
     649:	00                                                  .

0000064a <__c.5255>:
     64a:	0a 00                                               ..

0000064c <__c.5253>:
     64c:	25 75 00                                            %u.

0000064f <__c.5251>:
     64f:	33 3a 20 6d 61 78 5f 73 70 65 65 64 3a 20 00        3: max_speed: .

0000065e <__c.5249>:
     65e:	0a 00                                               ..

00000660 <__c.5247>:
     660:	25 75 00                                            %u.

00000663 <__c.5245>:
     663:	32 3a 20 69 6e 74 65 72 76 61 6c 28 6d 73 29 3a     2: interval(ms):
     673:	20 00                                                .

00000675 <__c.5243>:
     675:	0a 00                                               ..

00000677 <__c.5241>:
     677:	25 75 00                                            %u.

0000067a <__c.5239>:
     67a:	31 3a 20 64 65 6c 61 79 28 2a 31 30 6d 73 29 3a     1: delay(*10ms):
     68a:	20 00                                                .

0000068c <__c.5237>:
     68c:	0a 09 2d 20 56 61 6c 75 65 73 20 2d 0a 00           ..- Values -..

0000069a <__c.5357>:
     69a:	4d 3e 00                                            M>.

0000069d <__c.5355>:
     69d:	4d 25 64 3e 20 00                                   M%d> .

000006a3 <__c.5353>:
     6a3:	3f 00                                               ?.

000006a5 <__c.5350>:
     6a5:	73 65 74 20 64 65 66 61 75 6c 74 0a 00              set default..

000006b2 <__c.5336>:
     6b2:	43 3e 20 00                                         C> .

000006b6 <__c.5326>:
     6b6:	77 68 65 72 65 20 64 65 6c 74 61 3a 20 63 75 72     where delta: cur
     6c6:	73 6f 72 3d 25 64 2c 20 77 68 65 65 6c 3d 25 64     sor=%d, wheel=%d
     6d6:	0a 53 65 65 20 68 74 74 70 3a 2f 2f 65 6e 2e 77     .See http://en.w
     6e6:	69 6b 69 70 65 64 69 61 2e 6f 72 67 2f 77 69 6b     ikipedia.org/wik
     6f6:	69 2f 4d 6f 75 73 65 5f 6b 65 79 73 0a 00           i/Mouse_keys..

00000704 <__c.5324>:
     704:	0a 09 2d 20 4d 6f 75 73 65 6b 65 79 20 2d 0a 45     ..- Mousekey -.E
     714:	53 43 2f 71 3a 09 71 75 69 74 0a 31 3a 09 64 65     SC/q:.quit.1:.de
     724:	6c 61 79 28 2a 31 30 6d 73 29 0a 32 3a 09 69 6e     lay(*10ms).2:.in
     734:	74 65 72 76 61 6c 28 6d 73 29 0a 33 3a 09 6d 61     terval(ms).3:.ma
     744:	78 5f 73 70 65 65 64 0a 34 3a 09 74 69 6d 65 5f     x_speed.4:.time_
     754:	74 6f 5f 6d 61 78 0a 35 3a 09 77 68 65 65 6c 5f     to_max.5:.wheel_
     764:	6d 61 78 5f 73 70 65 65 64 0a 36 3a 09 77 68 65     max_speed.6:.whe
     774:	65 6c 5f 74 69 6d 65 5f 74 6f 5f 6d 61 78 0a 0a     el_time_to_max..
     784:	70 3a 09 70 72 69 6e 74 20 76 61 6c 75 65 73 0a     p:.print values.
     794:	64 3a 09 73 65 74 20 64 65 66 61 75 6c 74 73 0a     d:.set defaults.
     7a4:	75 70 3a 09 2b 31 0a 64 6f 77 6e 3a 09 2d 31 0a     up:.+1.down:.-1.
     7b4:	70 67 75 70 3a 09 2b 31 30 0a 70 67 64 6f 77 6e     pgup:.+10.pgdown
     7c4:	3a 09 2d 31 30 0a 0a 73 70 65 65 64 20 3d 20 64     :.-10..speed = d
     7d4:	65 6c 74 61 20 2a 20 6d 61 78 5f 73 70 65 65 64     elta * max_speed
     7e4:	20 2a 20 28 72 65 70 65 61 74 20 2f 20 74 69 6d      * (repeat / tim
     7f4:	65 5f 74 6f 5f 6d 61 78 29 0a 00                    e_to_max)..

000007ff <__c.5229>:
     7ff:	3f 00                                               ?.

00000801 <__c.5226>:
     801:	4d 3e 20 00                                         M> .

00000805 <__c.5231>:
     805:	43 3e 20 00                                         C> .

00000809 <__c.5375>:
     809:	4c 25 64 0a 00                                      L%d..

0000080e <__c.5215>:
     80e:	0a 09 2d 20 43 6f 6e 73 6f 6c 65 20 2d 0a 45 53     ..- Console -.ES
     81e:	43 2f 71 3a 09 71 75 69 74 0a 6d 3a 09 6d 6f 75     C/q:.quit.m:.mou
     82e:	73 65 6b 65 79 0a 00                                sekey..

00000835 <__c.5040>:
     835:	0a 09 2d 20 4d 61 67 69 63 20 2d 0a 64 3a 09 64     ..- Magic -.d:.d
     845:	65 62 75 67 0a 78 3a 09 64 65 62 75 67 20 6d 61     ebug.x:.debug ma
     855:	74 72 69 78 0a 6b 3a 09 64 65 62 75 67 20 6b 65     trix.k:.debug ke
     865:	79 62 6f 61 72 64 0a 6d 3a 09 64 65 62 75 67 20     yboard.m:.debug 
     875:	6d 6f 75 73 65 0a 76 3a 09 76 65 72 73 69 6f 6e     mouse.v:.version
     885:	0a 73 3a 09 73 74 61 74 75 73 0a 63 3a 09 63 6f     .s:.status.c:.co
     895:	6e 73 6f 6c 65 20 6d 6f 64 65 0a 30 2d 34 3a 09     nsole mode.0-4:.
     8a5:	6c 61 79 65 72 30 2d 34 28 46 31 30 2d 46 34 29     layer0-4(F10-F4)
     8b5:	0a 50 61 75 73 3a 09 62 6f 6f 74 6c 6f 61 64 65     .Paus:.bootloade
     8c5:	72 0a 65 3a 09 65 65 70 72 6f 6d 0a 6e 3a 09 4e     r.e:.eeprom.n:.N
     8d5:	4b 52 4f 0a 00                                      KRO..

000008da <__c.5135>:
     8da:	0a 00                                               ..

000008dc <__c.5133>:
     8dc:	25 75 00                                            %u.

000008df <__c.5131>:
     8df:	2e 6e 6b 72 6f 3a 20 00                             .nkro: .

000008e7 <__c.5129>:
     8e7:	0a 00                                               ..

000008e9 <__c.5127>:
     8e9:	25 75 00                                            %u.

000008ec <__c.5125>:
     8ec:	2e 73 77 61 70 5f 62 61 63 6b 73 6c 61 73 68 5f     .swap_backslash_
     8fc:	62 61 63 6b 73 70 61 63 65 3a 20 00                 backspace: .

00000908 <__c.5123>:
     908:	0a 00                                               ..

0000090a <__c.5121>:
     90a:	25 75 00                                            %u.

0000090d <__c.5119>:
     90d:	2e 73 77 61 70 5f 67 72 61 76 65 5f 65 73 63 3a     .swap_grave_esc:
     91d:	20 00                                                .

0000091f <__c.5117>:
     91f:	0a 00                                               ..

00000921 <__c.5115>:
     921:	25 75 00                                            %u.

00000924 <__c.5113>:
     924:	2e 6e 6f 5f 67 75 69 3a 20 00                       .no_gui: .

0000092e <__c.5111>:
     92e:	0a 00                                               ..

00000930 <__c.5109>:
     930:	25 75 00                                            %u.

00000933 <__c.5107>:
     933:	2e 73 77 61 70 5f 72 61 6c 74 5f 72 67 75 69 3a     .swap_ralt_rgui:
     943:	20 00                                                .

00000945 <__c.5105>:
     945:	0a 00                                               ..

00000947 <__c.5103>:
     947:	25 75 00                                            %u.

0000094a <__c.5101>:
     94a:	2e 73 77 61 70 5f 6c 61 6c 74 5f 6c 67 75 69 3a     .swap_lalt_lgui:
     95a:	20 00                                                .

0000095c <__c.5099>:
     95c:	0a 00                                               ..

0000095e <__c.5097>:
     95e:	25 75 00                                            %u.

00000961 <__c.5095>:
     961:	2e 63 61 70 73 6c 6f 63 6b 5f 74 6f 5f 63 6f 6e     .capslock_to_con
     971:	74 72 6f 6c 3a 20 00                                trol: .

00000978 <__c.5093>:
     978:	0a 00                                               ..

0000097a <__c.5091>:
     97a:	25 75 00                                            %u.

0000097d <__c.5089>:
     97d:	2e 73 77 61 70 5f 63 6f 6e 74 72 6f 6c 5f 63 61     .swap_control_ca
     98d:	70 73 6c 6f 63 6b 3a 20 00                          pslock: .

00000996 <__c.5087>:
     996:	0a 00                                               ..

00000998 <__c.5085>:
     998:	25 30 32 58 00                                      %02X.

0000099d <__c.5083>:
     99d:	6b 65 79 6d 61 70 5f 63 6f 6e 66 69 67 2e 72 61     keymap_config.ra
     9ad:	77 3a 20 00                                         w: .

000009b1 <__c.5080>:
     9b1:	0a 00                                               ..

000009b3 <__c.5078>:
     9b3:	25 75 00                                            %u.

000009b6 <__c.5076>:
     9b6:	2e 6d 6f 75 73 65 3a 20 00                          .mouse: .

000009bf <__c.5074>:
     9bf:	0a 00                                               ..

000009c1 <__c.5072>:
     9c1:	25 75 00                                            %u.

000009c4 <__c.5070>:
     9c4:	2e 6b 65 79 62 6f 61 72 64 3a 20 00                 .keyboard: .

000009d0 <__c.5068>:
     9d0:	0a 00                                               ..

000009d2 <__c.5066>:
     9d2:	25 75 00                                            %u.

000009d5 <__c.5064>:
     9d5:	2e 6d 61 74 72 69 78 3a 20 00                       .matrix: .

000009df <__c.5062>:
     9df:	0a 00                                               ..

000009e1 <__c.5060>:
     9e1:	25 75 00                                            %u.

000009e4 <__c.5058>:
     9e4:	2e 65 6e 61 62 6c 65 3a 20 00                       .enable: .

000009ee <__c.5056>:
     9ee:	0a 00                                               ..

000009f0 <__c.5054>:
     9f0:	25 30 32 58 00                                      %02X.

000009f5 <__c.5052>:
     9f5:	64 65 62 75 67 5f 63 6f 6e 66 69 67 2e 72 61 77     debug_config.raw
     a05:	3a 20 00                                            : .

00000a08 <__c.5049>:
     a08:	0a 00                                               ..

00000a0a <__c.5047>:
     a0a:	25 75 00                                            %u.

00000a0d <__c.5045>:
     a0d:	64 65 66 61 75 6c 74 5f 6c 61 79 65 72 3a 20 00     default_layer: .

00000a1d <__c.5210>:
     a1d:	3f 00                                               ?.

00000a1f <__c.5201>:
     a1f:	4e 4b 52 4f 3a 20 6f 66 66 0a 00                    NKRO: off..

00000a2a <__c.5199>:
     a2a:	4e 4b 52 4f 3a 20 6f 6e 0a 00                       NKRO: on..

00000a34 <__c.5196>:
     a34:	74 69 6d 65 72 5f 72 65 61 64 33 32 28 29 3a 20     timer_read32(): 
     a44:	25 30 34 6c 58 0a 00                                %04lX..

00000a4b <__c.5194>:
     a4b:	6b 65 79 62 6f 61 72 64 5f 6e 6b 72 6f 3a 20 25     keyboard_nkro: %
     a5b:	58 0a 00                                            X..

00000a5e <__c.5192>:
     a5e:	6b 65 79 62 6f 61 72 64 5f 69 64 6c 65 3a 20 25     keyboard_idle: %
     a6e:	58 0a 00                                            X..

00000a71 <__c.5190>:
     a71:	6b 65 79 62 6f 61 72 64 5f 70 72 6f 74 6f 63 6f     keyboard_protoco
     a81:	6c 3a 20 25 58 0a 00                                l: %X..

00000a88 <__c.5188>:
     a88:	68 6f 73 74 5f 6b 65 79 62 6f 61 72 64 5f 6c 65     host_keyboard_le
     a98:	64 73 28 29 3a 20 25 58 0a 00                       ds(): %X..

00000aa2 <__c.5186>:
     aa2:	0a 09 2d 20 53 74 61 74 75 73 20 2d 0a 00           ..- Status -..

00000ab0 <__c.5183>:
     ab0:	47 43 43 3a 20 35 2e 34 2e 30 20 41 56 52 2d 4c     GCC: 5.4.0 AVR-L
     ac0:	49 42 43 3a 20 32 2e 30 2e 30 20 41 56 52 5f 41     IBC: 2.0.0 AVR_A
     ad0:	52 43 48 3a 20 61 76 72 35 0a 00                    RCH: avr5..

00000adb <__c.5181>:
     adb:	4f 50 54 49 4f 4e 53 3a 20 4c 55 46 41 20 42 4f     OPTIONS: LUFA BO
     aeb:	4f 54 4d 41 47 49 43 20 4d 4f 55 53 45 4b 45 59     OTMAGIC MOUSEKEY
     afb:	20 45 58 54 52 41 4b 45 59 20 43 4f 4e 53 4f 4c      EXTRAKEY CONSOL
     b0b:	45 20 43 4f 4d 4d 41 4e 44 20 4e 4b 52 4f 20 34     E COMMAND NKRO 4
     b1b:	30 39 36 0a 00                                      096..

00000b20 <__c.5179>:
     b20:	42 55 49 4c 44 3a 20 75 6e 6b 6e 6f 77 6e 20 28     BUILD: unknown (
     b30:	31 31 3a 35 31 3a 35 35 20 4d 61 72 20 31 32 20     11:51:55 Mar 12 
     b40:	32 30 31 39 29 0a 00                                2019)..

00000b47 <__c.5177>:
     b47:	56 49 44 3a 20 30 78 46 45 45 44 28 6e 69 63 6b     VID: 0xFEED(nick
     b57:	68 61 63 6b 29 20 50 49 44 3a 20 30 78 36 30 36     hack) PID: 0x606
     b67:	30 28 65 72 67 6f 70 61 64 29 20 56 45 52 3a 20     0(ergopad) VER: 
     b77:	30 78 30 30 30 31 0a 00                             0x0001..

00000b7f <__c.5175>:
     b7f:	44 45 53 43 3a 20 74 2e 6d 2e 6b 2e 20 6b 65 79     DESC: t.m.k. key
     b8f:	62 6f 61 72 64 20 66 69 72 6d 77 61 72 65 20 66     board firmware f
     b9f:	6f 72 20 65 72 67 6f 64 6f 78 6c 0a 00              or ergodoxl..

00000bac <__c.5173>:
     bac:	0a 09 2d 20 56 65 72 73 69 6f 6e 20 2d 0a 00        ..- Version -..

00000bbb <__c.5170>:
     bbb:	0a 6d 6f 75 73 65 3a 20 6f 66 66 0a 00              .mouse: off..

00000bc8 <__c.5168>:
     bc8:	0a 6d 6f 75 73 65 3a 20 6f 6e 0a 00                 .mouse: on..

00000bd4 <__c.5165>:
     bd4:	0a 6b 65 79 62 6f 61 72 64 3a 20 6f 66 66 0a 00     .keyboard: off..

00000be4 <__c.5163>:
     be4:	0a 6b 65 79 62 6f 61 72 64 3a 20 6f 6e 0a 00        .keyboard: on..

00000bf3 <__c.5160>:
     bf3:	0a 6d 61 74 72 69 78 3a 20 6f 66 66 0a 00           .matrix: off..

00000c01 <__c.5158>:
     c01:	0a 6d 61 74 72 69 78 3a 20 6f 6e 0a 00              .matrix: on..

00000c0e <__c.5155>:
     c0e:	0a 64 65 62 75 67 3a 20 6f 6e 0a 00                 .debug: on..

00000c1a <__c.5153>:
     c1a:	0a 64 65 62 75 67 3a 20 6f 66 66 0a 00              .debug: off..

00000c27 <__c.5150>:
     c27:	0a 0a 62 6f 6f 74 6c 6f 61 64 65 72 2e 2e 2e 20     ..bootloader... 
     c37:	00                                                  .

00000c38 <__c.5147>:
     c38:	43 3e 20 00                                         C> .

00000c3c <__c.5141>:
     c3c:	65 65 63 6f 6e 66 69 67 3a 0a 00 00                 eeconfig:...

00000c48 <__ctors_end>:
     c48:	11 24       	eor	r1, r1
     c4a:	1f be       	out	0x3f, r1	; 63
     c4c:	cf ef       	ldi	r28, 0xFF	; 255
     c4e:	da e0       	ldi	r29, 0x0A	; 10
     c50:	de bf       	out	0x3e, r29	; 62
     c52:	cd bf       	out	0x3d, r28	; 61

00000c54 <bootloader_jump_after_watchdog_reset>:

/* this runs before main() */
void bootloader_jump_after_watchdog_reset(void) __attribute__ ((used, naked, section (".init3")));
void bootloader_jump_after_watchdog_reset(void)
{
    if ((MCUSR & (1<<WDRF)) && reset_key == BOOTLOADER_RESET_KEY) {
     c54:	04 b6       	in	r0, 0x34	; 52
     c56:	03 fe       	sbrs	r0, 3
     c58:	27 c0       	rjmp	.+78     	; 0xca8 <__do_copy_data>
     c5a:	80 91 2b 03 	lds	r24, 0x032B	; 0x80032b <__bss_end>
     c5e:	90 91 2c 03 	lds	r25, 0x032C	; 0x80032c <__bss_end+0x1>
     c62:	a0 91 2d 03 	lds	r26, 0x032D	; 0x80032d <__bss_end+0x2>
     c66:	b0 91 2e 03 	lds	r27, 0x032E	; 0x80032e <__bss_end+0x3>
     c6a:	87 30       	cpi	r24, 0x07	; 7
     c6c:	90 4b       	sbci	r25, 0xB0	; 176
     c6e:	a7 40       	sbci	r26, 0x07	; 7
     c70:	b0 4b       	sbci	r27, 0xB0	; 176
     c72:	d1 f4       	brne	.+52     	; 0xca8 <__do_copy_data>
        reset_key = 0;
     c74:	10 92 2b 03 	sts	0x032B, r1	; 0x80032b <__bss_end>
     c78:	10 92 2c 03 	sts	0x032C, r1	; 0x80032c <__bss_end+0x1>
     c7c:	10 92 2d 03 	sts	0x032D, r1	; 0x80032d <__bss_end+0x2>
     c80:	10 92 2e 03 	sts	0x032E, r1	; 0x80032e <__bss_end+0x3>

        // My custom USBasploader requires this to come up.
        MCUSR = 0;
     c84:	14 be       	out	0x34, r1	; 52

        // Seems like Teensy halfkay loader requires clearing WDRF and disabling watchdog.
        MCUSR &= ~(1<<WDRF);
     c86:	84 b7       	in	r24, 0x34	; 52
     c88:	87 7f       	andi	r24, 0xF7	; 247
     c8a:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     c8c:	0f b6       	in	r0, 0x3f	; 63
     c8e:	f8 94       	cli
     c90:	a8 95       	wdr
     c92:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     c96:	88 61       	ori	r24, 0x18	; 24
     c98:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
     c9c:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
     ca0:	0f be       	out	0x3f, r0	; 63
        wdt_disable();

        // This is compled into 'icall', address should be in word unit, not byte.
        ((void (*)(void))(BOOTLOADER_START/2))();
     ca2:	e0 e0       	ldi	r30, 0x00	; 0
     ca4:	f8 e3       	ldi	r31, 0x38	; 56
     ca6:	09 95       	icall

00000ca8 <__do_copy_data>:
     ca8:	11 e0       	ldi	r17, 0x01	; 1
     caa:	a0 e0       	ldi	r26, 0x00	; 0
     cac:	b1 e0       	ldi	r27, 0x01	; 1
     cae:	ea e5       	ldi	r30, 0x5A	; 90
     cb0:	f6 e5       	ldi	r31, 0x56	; 86
     cb2:	02 c0       	rjmp	.+4      	; 0xcb8 <__do_copy_data+0x10>
     cb4:	05 90       	lpm	r0, Z+
     cb6:	0d 92       	st	X+, r0
     cb8:	ae 33       	cpi	r26, 0x3E	; 62
     cba:	b1 07       	cpc	r27, r17
     cbc:	d9 f7       	brne	.-10     	; 0xcb4 <__do_copy_data+0xc>

00000cbe <__do_clear_bss>:
     cbe:	23 e0       	ldi	r18, 0x03	; 3
     cc0:	ae e3       	ldi	r26, 0x3E	; 62
     cc2:	b1 e0       	ldi	r27, 0x01	; 1
     cc4:	01 c0       	rjmp	.+2      	; 0xcc8 <.do_clear_bss_start>

00000cc6 <.do_clear_bss_loop>:
     cc6:	1d 92       	st	X+, r1

00000cc8 <.do_clear_bss_start>:
     cc8:	ab 32       	cpi	r26, 0x2B	; 43
     cca:	b2 07       	cpc	r27, r18
     ccc:	e1 f7       	brne	.-8      	; 0xcc6 <.do_clear_bss_loop>
     cce:	0e 94 a0 0a 	call	0x1540	; 0x1540 <main>
     cd2:	0c 94 2b 2b 	jmp	0x5656	; 0x5656 <_exit>

00000cd6 <__bad_interrupt>:
     cd6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000cda <xputc>:
	ldi	r24, 13		;
	rcall	1f		;
	ldi	r24, 10		;/
1:
#endif
	push	ZH
     cda:	ff 93       	push	r31
	push	ZL
     cdc:	ef 93       	push	r30
	lds	ZL, xfunc_out+0	;Pointer to the registered output function.
     cde:	e0 91 3e 01 	lds	r30, 0x013E	; 0x80013e <__data_end>
	lds	ZH, xfunc_out+1	;/
     ce2:	f0 91 3f 01 	lds	r31, 0x013F	; 0x80013f <__data_end+0x1>
	sbiw	ZL, 0		;Skip if null
     ce6:	30 97       	sbiw	r30, 0x00	; 0
	breq	2f		;/
     ce8:	09 f0       	breq	.+2      	; 0xcec <xputc+0x12>
	icall
     cea:	09 95       	icall
2:	pop	ZL
     cec:	ef 91       	pop	r30
	pop	ZH
     cee:	ff 91       	pop	r31
	ret
     cf0:	08 95       	ret

00000cf2 <xputs>:
;			);

.func xputs
.global xputs
xputs:
	_MOVW	ZH,ZL, r25,r24	; Z = pointer to rom string
     cf2:	fc 01       	movw	r30, r24
1:	_LPMI	r24
     cf4:	85 91       	lpm	r24, Z+
	cpi	r24, 0
     cf6:	80 30       	cpi	r24, 0x00	; 0
	breq	2f
     cf8:	11 f0       	breq	.+4      	; 0xcfe <xputs+0xc>
	rcall	xputc
     cfa:	ef df       	rcall	.-34     	; 0xcda <xputc>
	rjmp	1b
     cfc:	fb cf       	rjmp	.-10     	; 0xcf4 <xputs+0x2>
2:	ret
     cfe:	08 95       	ret

00000d00 <xitoa>:

.func xitoa
.global xitoa
xitoa:
				;r25:r22 = value, r20 = base, r18 = digits
	clr	r31		;r31 = stack level
     d00:	ff 27       	eor	r31, r31
	ldi	r30, ' '	;r30 = sign
     d02:	e0 e2       	ldi	r30, 0x20	; 32
	ldi	r19, ' '	;r19 = filler
     d04:	30 e2       	ldi	r19, 0x20	; 32
	sbrs	r20, 7		;When base indicates signd format and the value
     d06:	47 ff       	sbrs	r20, 7
	rjmp	0f		;is minus, add a '-'.
     d08:	0c c0       	rjmp	.+24     	; 0xd22 <xitoa+0x22>
	neg	r20		;
     d0a:	41 95       	neg	r20
	sbrs	r25, 7		;
     d0c:	97 ff       	sbrs	r25, 7
	rjmp	0f		;
     d0e:	09 c0       	rjmp	.+18     	; 0xd22 <xitoa+0x22>
	ldi	r30, '-'	;
     d10:	ed e2       	ldi	r30, 0x2D	; 45
	com	r22		;
     d12:	60 95       	com	r22
	com	r23		;
     d14:	70 95       	com	r23
	com	r24		;
     d16:	80 95       	com	r24
	com	r25		;
     d18:	90 95       	com	r25
	adc	r22, r1		;
     d1a:	61 1d       	adc	r22, r1
	adc	r23, r1		;
     d1c:	71 1d       	adc	r23, r1
	adc	r24, r1		;
     d1e:	81 1d       	adc	r24, r1
	adc	r25, r1		;/
     d20:	91 1d       	adc	r25, r1
0:	sbrs	r18, 7		;When digits indicates zero filled,
     d22:	27 ff       	sbrs	r18, 7
	rjmp	1f		;filler is '0'.
     d24:	02 c0       	rjmp	.+4      	; 0xd2a <xitoa+0x2a>
	neg	r18		;
     d26:	21 95       	neg	r18
	ldi	r19, '0'	;/
     d28:	30 e3       	ldi	r19, 0x30	; 48
				;----- string conversion loop
1:	ldi	r21, 32		;r26 = r25:r22 % r20
     d2a:	50 e2       	ldi	r21, 0x20	; 32
	clr	r26		;r25:r22 /= r20
     d2c:	aa 27       	eor	r26, r26
2:	lsl	r22		;
     d2e:	66 0f       	add	r22, r22
	rol	r23		;
     d30:	77 1f       	adc	r23, r23
	rol	r24		;
     d32:	88 1f       	adc	r24, r24
	rol	r25		;
     d34:	99 1f       	adc	r25, r25
	rol	r26		;
     d36:	aa 1f       	adc	r26, r26
	cp	r26, r20	;
     d38:	a4 17       	cp	r26, r20
	brcs	3f		;
     d3a:	10 f0       	brcs	.+4      	; 0xd40 <xitoa+0x40>
	sub	r26, r20	;
     d3c:	a4 1b       	sub	r26, r20
	inc	r22		;
     d3e:	63 95       	inc	r22
3:	dec	r21		;
     d40:	5a 95       	dec	r21
	brne	2b		;/
     d42:	a9 f7       	brne	.-22     	; 0xd2e <xitoa+0x2e>
	cpi	r26, 10		;r26 is a numeral digit '0'-'F'
     d44:	aa 30       	cpi	r26, 0x0A	; 10
	brcs	4f		;
     d46:	08 f0       	brcs	.+2      	; 0xd4a <xitoa+0x4a>
	subi	r26, -7		;
     d48:	a9 5f       	subi	r26, 0xF9	; 249
4:	subi	r26, -'0'	;/
     d4a:	a0 5d       	subi	r26, 0xD0	; 208
	push	r26		;Stack it
     d4c:	af 93       	push	r26
	inc	r31		;/
     d4e:	f3 95       	inc	r31
	cp	r22, r1		;Repeat until r25:r22 gets zero
     d50:	61 15       	cp	r22, r1
	cpc	r23, r1		;
     d52:	71 05       	cpc	r23, r1
	cpc	r24, r1		;
     d54:	81 05       	cpc	r24, r1
	cpc	r25, r1		;
     d56:	91 05       	cpc	r25, r1
	brne	1b		;/
     d58:	41 f7       	brne	.-48     	; 0xd2a <xitoa+0x2a>

	cpi	r30, '-'	;Minus sign if needed
     d5a:	ed 32       	cpi	r30, 0x2D	; 45
	brne	5f		;
     d5c:	11 f4       	brne	.+4      	; 0xd62 <xitoa+0x62>
	push	r30		;
     d5e:	ef 93       	push	r30
	inc	r31		;/
     d60:	f3 95       	inc	r31
5:	cp	r31, r18	;Filler
     d62:	f2 17       	cp	r31, r18
	brcc	6f		;
     d64:	18 f4       	brcc	.+6      	; 0xd6c <xitoa+0x6c>
	push	r19		;
     d66:	3f 93       	push	r19
	inc	r31		;
     d68:	f3 95       	inc	r31
	rjmp	5b		;/
     d6a:	fb cf       	rjmp	.-10     	; 0xd62 <xitoa+0x62>

6:	pop	r24		;Flush stacked digits and exit
     d6c:	8f 91       	pop	r24
	rcall	xputc		;
     d6e:	b5 df       	rcall	.-150    	; 0xcda <xputc>
	dec	r31		;
     d70:	fa 95       	dec	r31
	brne	6b		;/
     d72:	e1 f7       	brne	.-8      	; 0xd6c <xitoa+0x6c>

	ret
     d74:	08 95       	ret

00000d76 <xvprintf>:

#if USE_XPRINTF

.func xvprintf
xvprintf:
	ld	ZL, Y+		;Z = pointer to format string
     d76:	e9 91       	ld	r30, Y+
	ld	ZH, Y+		;/
     d78:	f9 91       	ld	r31, Y+

0:	_LPMI	r24		;Get a format char
     d7a:	85 91       	lpm	r24, Z+
	cpi	r24, 0		;End of format string?
     d7c:	80 30       	cpi	r24, 0x00	; 0
	breq	90f		;/
     d7e:	21 f0       	breq	.+8      	; 0xd88 <xvprintf+0x12>
	cpi	r24, '%'	;Is format?
     d80:	85 32       	cpi	r24, 0x25	; 37
	breq	20f		;/
     d82:	19 f0       	breq	.+6      	; 0xd8a <xvprintf+0x14>
1:	rcall	xputc		;Put a normal character
     d84:	aa df       	rcall	.-172    	; 0xcda <xputc>
	rjmp	0b		;/
     d86:	f9 cf       	rjmp	.-14     	; 0xd7a <xvprintf+0x4>
90:	ret
     d88:	08 95       	ret

20:	ldi	r18, 0		;r18: digits
     d8a:	20 e0       	ldi	r18, 0x00	; 0
	clt			;T: filler
     d8c:	e8 94       	clt
	_LPMI	r21		;Get flags
     d8e:	55 91       	lpm	r21, Z+
	cpi	r21, '%'	;Is a %?
     d90:	55 32       	cpi	r21, 0x25	; 37
	breq	1b		;/
     d92:	c1 f3       	breq	.-16     	; 0xd84 <xvprintf+0xe>
	cpi	r21, '0'	;Zero filled?
     d94:	50 33       	cpi	r21, 0x30	; 48
	brne	23f		;
     d96:	11 f4       	brne	.+4      	; 0xd9c <xvprintf+0x26>
	set			;/
     d98:	68 94       	set
22:	_LPMI	r21		;Get width
     d9a:	55 91       	lpm	r21, Z+
23:	cpi	r21, '9'+1	;
     d9c:	5a 33       	cpi	r21, 0x3A	; 58
	brcc	24f		;
     d9e:	48 f4       	brcc	.+18     	; 0xdb2 <xvprintf+0x3c>
	subi	r21, '0'	;
     da0:	50 53       	subi	r21, 0x30	; 48
	brcs	90b		;
     da2:	90 f3       	brcs	.-28     	; 0xd88 <xvprintf+0x12>
	lsl	r18		;
     da4:	22 0f       	add	r18, r18
	mov	r0, r18		;
     da6:	02 2e       	mov	r0, r18
	lsl	r18		;
     da8:	22 0f       	add	r18, r18
	lsl	r18		;
     daa:	22 0f       	add	r18, r18
	add	r18, r0		;
     dac:	20 0d       	add	r18, r0
	add	r18, r21	;
     dae:	25 0f       	add	r18, r21
	rjmp	22b		;/
     db0:	f4 cf       	rjmp	.-24     	; 0xd9a <xvprintf+0x24>

24:	brtc	25f		;get value (low word)
     db2:	0e f4       	brtc	.+2      	; 0xdb6 <xvprintf+0x40>
	neg	r18		;
     db4:	21 95       	neg	r18
25:	ld	r24, Y+		;
     db6:	89 91       	ld	r24, Y+
	ld	r25, Y+		;/
     db8:	99 91       	ld	r25, Y+
	cpi	r21, 'c'	;Is type character?
     dba:	53 36       	cpi	r21, 0x63	; 99
	breq	1b		;/
     dbc:	19 f3       	breq	.-58     	; 0xd84 <xvprintf+0xe>
	cpi	r21, 's'	;Is type RAM string?
     dbe:	53 37       	cpi	r21, 0x73	; 115
	breq	50f		;/
     dc0:	29 f1       	breq	.+74     	; 0xe0c <xvprintf+0x96>
	cpi	r21, 'S'	;Is type ROM string?
     dc2:	53 35       	cpi	r21, 0x53	; 83
	breq	60f		;/
     dc4:	59 f1       	breq	.+86     	; 0xe1c <xvprintf+0xa6>
	_MOVW	r23,r22,r25,r24	;r25:r22 = value
     dc6:	bc 01       	movw	r22, r24
	clr	r24		;
     dc8:	88 27       	eor	r24, r24
	clr	r25		;
     dca:	99 27       	eor	r25, r25
	clt			;/
     dcc:	e8 94       	clt
	cpi	r21, 'l'	;Is long int?
     dce:	5c 36       	cpi	r21, 0x6C	; 108
	brne	26f		;
     dd0:	21 f4       	brne	.+8      	; 0xdda <xvprintf+0x64>
	ld	r24, Y+		;get value (high word)
     dd2:	89 91       	ld	r24, Y+
	ld	r25, Y+		;
     dd4:	99 91       	ld	r25, Y+
	set			;
     dd6:	68 94       	set
	_LPMI	r21		;/
     dd8:	55 91       	lpm	r21, Z+
26:	cpi	r21, 'd'	;Is type signed decimal?
     dda:	54 36       	cpi	r21, 0x64	; 100
	brne	27f		;/
     ddc:	39 f4       	brne	.+14     	; 0xdec <xvprintf+0x76>
	ldi	r20, -10	;
     dde:	46 ef       	ldi	r20, 0xF6	; 246
	brts	40f		;
     de0:	7e f0       	brts	.+30     	; 0xe00 <xvprintf+0x8a>
	sbrs	r23, 7		;
     de2:	77 ff       	sbrs	r23, 7
	rjmp	40f		;
     de4:	0d c0       	rjmp	.+26     	; 0xe00 <xvprintf+0x8a>
	ldi	r24, -1		;
     de6:	8f ef       	ldi	r24, 0xFF	; 255
	ldi	r25, -1		;
     de8:	9f ef       	ldi	r25, 0xFF	; 255
	rjmp	40f		;/
     dea:	0a c0       	rjmp	.+20     	; 0xe00 <xvprintf+0x8a>
27:	cpi	r21, 'u'	;Is type unsigned decimal?
     dec:	55 37       	cpi	r21, 0x75	; 117
	ldi	r20, 10		;
     dee:	4a e0       	ldi	r20, 0x0A	; 10
	breq	40f		;/
     df0:	39 f0       	breq	.+14     	; 0xe00 <xvprintf+0x8a>
	cpi	r21, 'X'	;Is type hexdecimal?
     df2:	58 35       	cpi	r21, 0x58	; 88
	ldi	r20, 16		;
     df4:	40 e1       	ldi	r20, 0x10	; 16
	breq	40f		;/
     df6:	21 f0       	breq	.+8      	; 0xe00 <xvprintf+0x8a>
	cpi	r21, 'b'	;Is type binary?
     df8:	52 36       	cpi	r21, 0x62	; 98
	ldi	r20, 2		;
     dfa:	42 e0       	ldi	r20, 0x02	; 2
	breq	40f		;/
     dfc:	09 f0       	breq	.+2      	; 0xe00 <xvprintf+0x8a>
	ret			;abort
     dfe:	08 95       	ret
40:	push	ZH		;Output the value
     e00:	ff 93       	push	r31
	push	ZL		;
     e02:	ef 93       	push	r30
	rcall	xitoa		;
     e04:	7d df       	rcall	.-262    	; 0xd00 <xitoa>
42:	pop	ZL		;
     e06:	ef 91       	pop	r30
	pop	ZH		;
     e08:	ff 91       	pop	r31
	rjmp	0b		;/
     e0a:	b7 cf       	rjmp	.-146    	; 0xd7a <xvprintf+0x4>

50:	push	ZH		;Put a string on the RAM
     e0c:	ff 93       	push	r31
	push	ZL
     e0e:	ef 93       	push	r30
	_MOVW	ZH,ZL, r25,r24
     e10:	fc 01       	movw	r30, r24
51:	ld	r24, Z+
     e12:	81 91       	ld	r24, Z+
	cpi	r24, 0
     e14:	80 30       	cpi	r24, 0x00	; 0
	breq	42b
     e16:	b9 f3       	breq	.-18     	; 0xe06 <xvprintf+0x90>
	rcall	xputc
     e18:	60 df       	rcall	.-320    	; 0xcda <xputc>
	rjmp	51b
     e1a:	fb cf       	rjmp	.-10     	; 0xe12 <xvprintf+0x9c>

60:	push	ZH		;Put a string on the ROM
     e1c:	ff 93       	push	r31
	push	ZL
     e1e:	ef 93       	push	r30
	rcall	xputs
     e20:	68 df       	rcall	.-304    	; 0xcf2 <xputs>
	rjmp	42b
     e22:	f1 cf       	rjmp	.-30     	; 0xe06 <xvprintf+0x90>

00000e24 <__xprintf>:


.func __xprintf
.global __xprintf
__xprintf:
	push	YH
     e24:	df 93       	push	r29
	push	YL
     e26:	cf 93       	push	r28
	in	YL, _SFR_IO_ADDR(SPL)
     e28:	cd b7       	in	r28, 0x3d	; 61
#ifdef SPH
	in	YH, _SFR_IO_ADDR(SPH)
     e2a:	de b7       	in	r29, 0x3e	; 62
#else
	clr	YH
#endif
	adiw	YL, 5		;Y = pointer to arguments
     e2c:	25 96       	adiw	r28, 0x05	; 5
	rcall	xvprintf
     e2e:	a3 df       	rcall	.-186    	; 0xd76 <xvprintf>
	pop	YL
     e30:	cf 91       	pop	r28
	pop	YH
     e32:	df 91       	pop	r29
	ret
     e34:	08 95       	ret

00000e36 <promicro_bootloader_jmp>:
void promicro_bootloader_jmp(bool program) {
    uint16_t *const bootKeyPtr = (uint16_t *)0x0800;

    // Value used by Caterina bootloader use to determine whether to run the
    // sketch or the bootloader programmer.
    uint16_t bootKey = program ? 0x7777 : 0;
     e36:	81 11       	cpse	r24, r1
     e38:	03 c0       	rjmp	.+6      	; 0xe40 <promicro_bootloader_jmp+0xa>
     e3a:	80 e0       	ldi	r24, 0x00	; 0
     e3c:	90 e0       	ldi	r25, 0x00	; 0
     e3e:	02 c0       	rjmp	.+4      	; 0xe44 <promicro_bootloader_jmp+0xe>
     e40:	87 e7       	ldi	r24, 0x77	; 119
     e42:	97 e7       	ldi	r25, 0x77	; 119

    *bootKeyPtr = bootKey;
     e44:	90 93 01 08 	sts	0x0801, r25	; 0x800801 <_end+0x4d2>
     e48:	80 93 00 08 	sts	0x0800, r24	; 0x800800 <_end+0x4d1>
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
     e4c:	9a e0       	ldi	r25, 0x0A	; 10
     e4e:	88 e1       	ldi	r24, 0x18	; 24
     e50:	0f b6       	in	r0, 0x3f	; 63
     e52:	f8 94       	cli
     e54:	a8 95       	wdr
     e56:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
     e5a:	0f be       	out	0x3f, r0	; 63
     e5c:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__DATA_REGION_ORIGIN__>
     e60:	ff cf       	rjmp	.-2      	; 0xe60 <promicro_bootloader_jmp+0x2a>

00000e62 <action_function>:
/*
* user defined action function
*/
void action_function(keyrecord_t *record, uint8_t id, uint8_t opt)
{
    switch (id) {
     e62:	61 11       	cpse	r22, r1
     e64:	03 c0       	rjmp	.+6      	; 0xe6c <action_function+0xa>
        case PROMICRO_PROGRAM:
            promicro_bootloader_jmp(true);
     e66:	81 e0       	ldi	r24, 0x01	; 1
     e68:	0e 94 1b 07 	call	0xe36	; 0xe36 <promicro_bootloader_jmp>
     e6c:	08 95       	ret

00000e6e <unselect_rows>:
 * pin: D1  D0  D4  C6  D7  E6 
 */
static void unselect_rows(void)
{
    // Hi-Z(DDR:0, PORT:0) to unselect
    DDRC  &= ~0b01000000;
     e6e:	3e 98       	cbi	0x07, 6	; 7
    PORTC &= ~0b01000000;
     e70:	46 98       	cbi	0x08, 6	; 8
    DDRD  &= ~0b10010011;
     e72:	8a b1       	in	r24, 0x0a	; 10
     e74:	8c 76       	andi	r24, 0x6C	; 108
     e76:	8a b9       	out	0x0a, r24	; 10
    PORTD &= ~0b10010011;
     e78:	8b b1       	in	r24, 0x0b	; 11
     e7a:	8c 76       	andi	r24, 0x6C	; 108
     e7c:	8b b9       	out	0x0b, r24	; 11
    DDRE  &= ~0b01000000;
     e7e:	6e 98       	cbi	0x0d, 6	; 13
    PORTE &= ~0b01000000;
     e80:	76 98       	cbi	0x0e, 6	; 14
     e82:	08 95       	ret

00000e84 <matrix_init>:


void matrix_init(void)
{
    // initialize row and col
    unselect_rows();
     e84:	0e 94 37 07 	call	0xe6e	; 0xe6e <unselect_rows>
 */
 
static void  init_cols(void)
{
    // Input with pull-up(DDR:0, PORT:1)
    DDRF  &= ~(1<<4 | 1<<5 | 1<<6 | 1<<7);
     e88:	80 b3       	in	r24, 0x10	; 16
     e8a:	8f 70       	andi	r24, 0x0F	; 15
     e8c:	80 bb       	out	0x10, r24	; 16
    PORTF |=  (1<<4 | 1<<5 | 1<<6 | 1<<7);
     e8e:	81 b3       	in	r24, 0x11	; 17
     e90:	80 6f       	ori	r24, 0xF0	; 240
     e92:	81 bb       	out	0x11, r24	; 17
    DDRB  &= ~(1<<1 | 1<<2 | 1<< 3);
     e94:	84 b1       	in	r24, 0x04	; 4
     e96:	81 7f       	andi	r24, 0xF1	; 241
     e98:	84 b9       	out	0x04, r24	; 4
    PORTB |=  (1<<1 | 1<<2 | 1<< 3);
     e9a:	85 b1       	in	r24, 0x05	; 5
     e9c:	8e 60       	ori	r24, 0x0E	; 14
     e9e:	85 b9       	out	0x05, r24	; 5
     ea0:	e6 e4       	ldi	r30, 0x46	; 70
     ea2:	f1 e0       	ldi	r31, 0x01	; 1
     ea4:	a0 e4       	ldi	r26, 0x40	; 64
     ea6:	b1 e0       	ldi	r27, 0x01	; 1
    unselect_rows();
    init_cols();

    // initialize matrix state: all keys off
    for (uint8_t i=0; i < MATRIX_ROWS; i++) {
        matrix[i] = 0;
     ea8:	11 92       	st	Z+, r1
        matrix_debouncing[i] = 0;
     eaa:	1d 92       	st	X+, r1
    // initialize row and col
    unselect_rows();
    init_cols();

    // initialize matrix state: all keys off
    for (uint8_t i=0; i < MATRIX_ROWS; i++) {
     eac:	81 e0       	ldi	r24, 0x01	; 1
     eae:	ec 34       	cpi	r30, 0x4C	; 76
     eb0:	f8 07       	cpc	r31, r24
     eb2:	d1 f7       	brne	.-12     	; 0xea8 <matrix_init+0x24>
        matrix[i] = 0;
        matrix_debouncing[i] = 0;
    }
}
     eb4:	08 95       	ret

00000eb6 <matrix_scan>:

uint8_t matrix_scan(void)
{
     eb6:	bf 92       	push	r11
     eb8:	cf 92       	push	r12
     eba:	df 92       	push	r13
     ebc:	ef 92       	push	r14
     ebe:	ff 92       	push	r15
     ec0:	0f 93       	push	r16
     ec2:	1f 93       	push	r17
     ec4:	cf 93       	push	r28
     ec6:	df 93       	push	r29
     ec8:	80 e4       	ldi	r24, 0x40	; 64
     eca:	e8 2e       	mov	r14, r24
     ecc:	81 e0       	ldi	r24, 0x01	; 1
     ece:	f8 2e       	mov	r15, r24
     ed0:	87 01       	movw	r16, r14
    for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
     ed2:	c0 e0       	ldi	r28, 0x00	; 0
    PORTB |=  (1<<1 | 1<<2 | 1<< 3);
}

static matrix_row_t read_cols(void)
{
    return (PINB&(1<<2) ? 0 : (1<<0)) |
     ed4:	d1 e0       	ldi	r29, 0x01	; 1
        if (matrix_debouncing[i] != cols) {
            matrix_debouncing[i] = cols;
            if (debouncing) {
                debug("bounce!: "); debug_hex(debouncing); debug("\n");
            }
            debouncing = DEBOUNCE;
     ed6:	95 e0       	ldi	r25, 0x05	; 5
     ed8:	b9 2e       	mov	r11, r25
        _delay_us(30);  // without this wait read unstable value.
        matrix_row_t cols = read_cols();
        if (matrix_debouncing[i] != cols) {
            matrix_debouncing[i] = cols;
            if (debouncing) {
                debug("bounce!: "); debug_hex(debouncing); debug("\n");
     eda:	2a ee       	ldi	r18, 0xEA	; 234
     edc:	c2 2e       	mov	r12, r18
     ede:	21 e0       	ldi	r18, 0x01	; 1
     ee0:	d2 2e       	mov	r13, r18
}

static void select_row(uint8_t row)
{
    // Output low(DDR:1, PORT:0) to select
    switch (row) {
     ee2:	c3 30       	cpi	r28, 0x03	; 3
     ee4:	99 f0       	breq	.+38     	; 0xf0c <matrix_scan+0x56>
     ee6:	28 f4       	brcc	.+10     	; 0xef2 <matrix_scan+0x3c>
     ee8:	c1 30       	cpi	r28, 0x01	; 1
     eea:	51 f0       	breq	.+20     	; 0xf00 <matrix_scan+0x4a>
     eec:	c2 30       	cpi	r28, 0x02	; 2
     eee:	59 f0       	breq	.+22     	; 0xf06 <matrix_scan+0x50>
     ef0:	04 c0       	rjmp	.+8      	; 0xefa <matrix_scan+0x44>
     ef2:	c4 30       	cpi	r28, 0x04	; 4
     ef4:	71 f0       	breq	.+28     	; 0xf12 <matrix_scan+0x5c>
     ef6:	c5 30       	cpi	r28, 0x05	; 5
     ef8:	79 f0       	breq	.+30     	; 0xf18 <matrix_scan+0x62>
        case 0:
            DDRD  |= (1<<1);
     efa:	51 9a       	sbi	0x0a, 1	; 10
            PORTD &= ~(1<<1);
     efc:	59 98       	cbi	0x0b, 1	; 11
     efe:	0e c0       	rjmp	.+28     	; 0xf1c <matrix_scan+0x66>
            break;
        case 1:
            DDRD  |= (1<<0);
     f00:	50 9a       	sbi	0x0a, 0	; 10
            PORTD &= ~(1<<0);
     f02:	58 98       	cbi	0x0b, 0	; 11
     f04:	0b c0       	rjmp	.+22     	; 0xf1c <matrix_scan+0x66>
            break;
        case 2:
            DDRD  |= (1<<4);
     f06:	54 9a       	sbi	0x0a, 4	; 10
            PORTD &= ~(1<<4);
     f08:	5c 98       	cbi	0x0b, 4	; 11
     f0a:	08 c0       	rjmp	.+16     	; 0xf1c <matrix_scan+0x66>
            break;
        case 3:
            DDRC  |= (1<<6);
     f0c:	3e 9a       	sbi	0x07, 6	; 7
            PORTC &= ~(1<<6);
     f0e:	46 98       	cbi	0x08, 6	; 8
     f10:	05 c0       	rjmp	.+10     	; 0xf1c <matrix_scan+0x66>
            break;
        case 4:
            DDRD  |= (1<<7);
     f12:	57 9a       	sbi	0x0a, 7	; 10
            PORTD &= ~(1<<7);
     f14:	5f 98       	cbi	0x0b, 7	; 11
     f16:	02 c0       	rjmp	.+4      	; 0xf1c <matrix_scan+0x66>
            break;
        case 5:
            DDRE  |= (1<<6);
     f18:	6e 9a       	sbi	0x0d, 6	; 13
            PORTE &= ~(1<<6);
     f1a:	76 98       	cbi	0x0e, 6	; 14
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     f1c:	80 ea       	ldi	r24, 0xA0	; 160
     f1e:	8a 95       	dec	r24
     f20:	f1 f7       	brne	.-4      	; 0xf1e <matrix_scan+0x68>
    PORTB |=  (1<<1 | 1<<2 | 1<< 3);
}

static matrix_row_t read_cols(void)
{
    return (PINB&(1<<2) ? 0 : (1<<0)) |
     f22:	83 b1       	in	r24, 0x03	; 3
     f24:	82 fb       	bst	r24, 2
     f26:	88 27       	eor	r24, r24
     f28:	80 f9       	bld	r24, 0
     f2a:	8d 27       	eor	r24, r29
     f2c:	1b 99       	sbic	0x03, 3	; 3
     f2e:	02 c0       	rjmp	.+4      	; 0xf34 <matrix_scan+0x7e>
     f30:	92 e0       	ldi	r25, 0x02	; 2
     f32:	01 c0       	rjmp	.+2      	; 0xf36 <matrix_scan+0x80>
     f34:	90 e0       	ldi	r25, 0x00	; 0
     f36:	89 2b       	or	r24, r25
     f38:	19 99       	sbic	0x03, 1	; 3
     f3a:	02 c0       	rjmp	.+4      	; 0xf40 <matrix_scan+0x8a>
     f3c:	94 e0       	ldi	r25, 0x04	; 4
     f3e:	01 c0       	rjmp	.+2      	; 0xf42 <matrix_scan+0x8c>
     f40:	90 e0       	ldi	r25, 0x00	; 0
     f42:	28 2f       	mov	r18, r24
     f44:	29 2b       	or	r18, r25
           (PINB&(1<<3) ? 0 : (1<<1)) |
           (PINB&(1<<1) ? 0 : (1<<2)) |
           (PINF&(1<<7) ? 0 : (1<<3)) |
     f46:	9f b1       	in	r25, 0x0f	; 15
    PORTB |=  (1<<1 | 1<<2 | 1<< 3);
}

static matrix_row_t read_cols(void)
{
    return (PINB&(1<<2) ? 0 : (1<<0)) |
     f48:	90 95       	com	r25
     f4a:	89 2f       	mov	r24, r25
     f4c:	88 1f       	adc	r24, r24
     f4e:	88 27       	eor	r24, r24
     f50:	88 1f       	adc	r24, r24
     f52:	88 0f       	add	r24, r24
     f54:	88 0f       	add	r24, r24
     f56:	88 0f       	add	r24, r24
     f58:	82 2b       	or	r24, r18
     f5a:	7e 99       	sbic	0x0f, 6	; 15
     f5c:	02 c0       	rjmp	.+4      	; 0xf62 <matrix_scan+0xac>
     f5e:	90 e1       	ldi	r25, 0x10	; 16
     f60:	01 c0       	rjmp	.+2      	; 0xf64 <matrix_scan+0xae>
     f62:	90 e0       	ldi	r25, 0x00	; 0
     f64:	89 2b       	or	r24, r25
     f66:	7d 99       	sbic	0x0f, 5	; 15
     f68:	02 c0       	rjmp	.+4      	; 0xf6e <matrix_scan+0xb8>
     f6a:	90 e2       	ldi	r25, 0x20	; 32
     f6c:	01 c0       	rjmp	.+2      	; 0xf70 <matrix_scan+0xba>
     f6e:	90 e0       	ldi	r25, 0x00	; 0
     f70:	89 2b       	or	r24, r25
     f72:	7c 99       	sbic	0x0f, 4	; 15
     f74:	02 c0       	rjmp	.+4      	; 0xf7a <matrix_scan+0xc4>
     f76:	90 e4       	ldi	r25, 0x40	; 64
     f78:	01 c0       	rjmp	.+2      	; 0xf7c <matrix_scan+0xc6>
     f7a:	90 e0       	ldi	r25, 0x00	; 0
     f7c:	89 2b       	or	r24, r25
{
    for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
        select_row(i);
        _delay_us(30);  // without this wait read unstable value.
        matrix_row_t cols = read_cols();
        if (matrix_debouncing[i] != cols) {
     f7e:	d8 01       	movw	r26, r16
     f80:	9c 91       	ld	r25, X
     f82:	98 17       	cp	r25, r24
     f84:	39 f1       	breq	.+78     	; 0xfd4 <matrix_scan+0x11e>
            matrix_debouncing[i] = cols;
     f86:	8c 93       	st	X, r24
            if (debouncing) {
     f88:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     f8c:	88 23       	and	r24, r24
     f8e:	01 f1       	breq	.+64     	; 0xfd0 <matrix_scan+0x11a>
                debug("bounce!: "); debug_hex(debouncing); debug("\n");
     f90:	80 91 0c 03 	lds	r24, 0x030C	; 0x80030c <debug_config>
     f94:	80 ff       	sbrs	r24, 0
     f96:	04 c0       	rjmp	.+8      	; 0xfa0 <matrix_scan+0xea>
     f98:	8f ee       	ldi	r24, 0xEF	; 239
     f9a:	91 e0       	ldi	r25, 0x01	; 1
     f9c:	0e 94 79 06 	call	0xcf2	; 0xcf2 <xputs>
     fa0:	80 91 0c 03 	lds	r24, 0x030C	; 0x80030c <debug_config>
     fa4:	80 ff       	sbrs	r24, 0
     fa6:	0c c0       	rjmp	.+24     	; 0xfc0 <matrix_scan+0x10a>
     fa8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     fac:	1f 92       	push	r1
     fae:	8f 93       	push	r24
     fb0:	df 92       	push	r13
     fb2:	cf 92       	push	r12
     fb4:	0e 94 12 07 	call	0xe24	; 0xe24 <__xprintf>
     fb8:	0f 90       	pop	r0
     fba:	0f 90       	pop	r0
     fbc:	0f 90       	pop	r0
     fbe:	0f 90       	pop	r0
     fc0:	80 91 0c 03 	lds	r24, 0x030C	; 0x80030c <debug_config>
     fc4:	80 ff       	sbrs	r24, 0
     fc6:	04 c0       	rjmp	.+8      	; 0xfd0 <matrix_scan+0x11a>
     fc8:	88 ee       	ldi	r24, 0xE8	; 232
     fca:	91 e0       	ldi	r25, 0x01	; 1
     fcc:	0e 94 79 06 	call	0xcf2	; 0xcf2 <xputs>
            }
            debouncing = DEBOUNCE;
     fd0:	b0 92 00 01 	sts	0x0100, r11	; 0x800100 <__data_start>
        }
        unselect_rows();
     fd4:	0e 94 37 07 	call	0xe6e	; 0xe6e <unselect_rows>
    }
}

uint8_t matrix_scan(void)
{
    for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
     fd8:	cf 5f       	subi	r28, 0xFF	; 255
     fda:	0f 5f       	subi	r16, 0xFF	; 255
     fdc:	1f 4f       	sbci	r17, 0xFF	; 255
     fde:	c6 30       	cpi	r28, 0x06	; 6
     fe0:	09 f0       	breq	.+2      	; 0xfe4 <matrix_scan+0x12e>
     fe2:	7f cf       	rjmp	.-258    	; 0xee2 <matrix_scan+0x2c>
            debouncing = DEBOUNCE;
        }
        unselect_rows();
    }

    if (debouncing) {
     fe4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     fe8:	88 23       	and	r24, r24
     fea:	b9 f0       	breq	.+46     	; 0x101a <matrix_scan+0x164>
        if (--debouncing) {
     fec:	81 50       	subi	r24, 0x01	; 1
     fee:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     ff2:	88 23       	and	r24, r24
     ff4:	39 f0       	breq	.+14     	; 0x1004 <matrix_scan+0x14e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     ff6:	ef e9       	ldi	r30, 0x9F	; 159
     ff8:	ff e0       	ldi	r31, 0x0F	; 15
     ffa:	31 97       	sbiw	r30, 0x01	; 1
     ffc:	f1 f7       	brne	.-4      	; 0xffa <matrix_scan+0x144>
     ffe:	00 c0       	rjmp	.+0      	; 0x1000 <matrix_scan+0x14a>
    1000:	00 00       	nop
    1002:	0b c0       	rjmp	.+22     	; 0x101a <matrix_scan+0x164>
    1004:	e6 e4       	ldi	r30, 0x46	; 70
    1006:	f1 e0       	ldi	r31, 0x01	; 1
            _delay_ms(1);
        } else {
            for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
                matrix[i] = matrix_debouncing[i];
    1008:	d7 01       	movw	r26, r14
    100a:	8d 91       	ld	r24, X+
    100c:	7d 01       	movw	r14, r26
    100e:	81 93       	st	Z+, r24

    if (debouncing) {
        if (--debouncing) {
            _delay_ms(1);
        } else {
            for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
    1010:	b6 e4       	ldi	r27, 0x46	; 70
    1012:	eb 16       	cp	r14, r27
    1014:	b1 e0       	ldi	r27, 0x01	; 1
    1016:	fb 06       	cpc	r15, r27
    1018:	b9 f7       	brne	.-18     	; 0x1008 <matrix_scan+0x152>
            }
        }
    }

    return 1;
}
    101a:	81 e0       	ldi	r24, 0x01	; 1
    101c:	df 91       	pop	r29
    101e:	cf 91       	pop	r28
    1020:	1f 91       	pop	r17
    1022:	0f 91       	pop	r16
    1024:	ff 90       	pop	r15
    1026:	ef 90       	pop	r14
    1028:	df 90       	pop	r13
    102a:	cf 90       	pop	r12
    102c:	bf 90       	pop	r11
    102e:	08 95       	ret

00001030 <matrix_get_row>:

inline
matrix_row_t matrix_get_row(uint8_t row)
{
    return matrix[row];
    1030:	e8 2f       	mov	r30, r24
    1032:	f0 e0       	ldi	r31, 0x00	; 0
    1034:	ea 5b       	subi	r30, 0xBA	; 186
    1036:	fe 4f       	sbci	r31, 0xFE	; 254
}
    1038:	80 81       	ld	r24, Z
    103a:	08 95       	ret

0000103c <led_set>:
#include "led.h"


void led_set(uint8_t usb_led)
{
    if (usb_led & (1<<USB_LED_CAPS_LOCK)) {
    103c:	81 ff       	sbrs	r24, 1
    103e:	02 c0       	rjmp	.+4      	; 0x1044 <led_set+0x8>
        // output low
        DDRB |= (1<<5);
    1040:	25 9a       	sbi	0x04, 5	; 4
    1042:	01 c0       	rjmp	.+2      	; 0x1046 <led_set+0xa>
        PORTB &= ~(1<<5);
    } else {
        // Hi-Z
        DDRB &= ~(1<<5);
    1044:	25 98       	cbi	0x04, 5	; 4
        PORTB &= ~(1<<5);
    1046:	2d 98       	cbi	0x05, 5	; 5
    1048:	08 95       	ret

0000104a <keyboard_leds>:
 * Host driver
 ******************************************************************************/
static uint8_t keyboard_leds(void)
{
    return keyboard_led_stats;
}
    104a:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <keyboard_led_stats>
    104e:	08 95       	ret

00001050 <send_consumer>:
    Endpoint_ClearIN();
#endif
}

static void send_consumer(uint16_t data)
{
    1050:	cf 93       	push	r28
    1052:	df 93       	push	r29
    1054:	00 d0       	rcall	.+0      	; 0x1056 <send_consumer+0x6>
    1056:	1f 92       	push	r1
    1058:	cd b7       	in	r28, 0x3d	; 61
    105a:	de b7       	in	r29, 0x3e	; 62
    105c:	9c 01       	movw	r18, r24
#ifdef EXTRAKEY_ENABLE
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
    105e:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <USB_DeviceState>
    1062:	84 30       	cpi	r24, 0x04	; 4
    1064:	19 f5       	brne	.+70     	; 0x10ac <send_consumer+0x5c>
        return;

    report_extra_t r = {
    1066:	93 e0       	ldi	r25, 0x03	; 3
    1068:	99 83       	std	Y+1, r25	; 0x01
    106a:	3b 83       	std	Y+3, r19	; 0x03
    106c:	2a 83       	std	Y+2, r18	; 0x02
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    106e:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
    1072:	8f ef       	ldi	r24, 0xFF	; 255
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1074:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    1078:	81 50       	subi	r24, 0x01	; 1
        .usage = data
    };
    Endpoint_SelectEndpoint(EXTRAKEY_IN_EPNUM);

    /* Check if write ready for a polling interval around 10ms */
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    107a:	95 fd       	sbrc	r25, 5
    107c:	06 c0       	rjmp	.+12     	; 0x108a <send_consumer+0x3a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    107e:	95 ed       	ldi	r25, 0xD5	; 213
    1080:	9a 95       	dec	r25
    1082:	f1 f7       	brne	.-4      	; 0x1080 <send_consumer+0x30>
    1084:	00 00       	nop
    1086:	81 11       	cpse	r24, r1
    1088:	f5 cf       	rjmp	.-22     	; 0x1074 <send_consumer+0x24>
    108a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    if (!Endpoint_IsReadWriteAllowed()) return;
    108e:	85 ff       	sbrs	r24, 5
    1090:	0d c0       	rjmp	.+26     	; 0x10ac <send_consumer+0x5c>

    Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
    1092:	40 e0       	ldi	r20, 0x00	; 0
    1094:	50 e0       	ldi	r21, 0x00	; 0
    1096:	63 e0       	ldi	r22, 0x03	; 3
    1098:	70 e0       	ldi	r23, 0x00	; 0
    109a:	ce 01       	movw	r24, r28
    109c:	01 96       	adiw	r24, 0x01	; 1
    109e:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    10a2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    10a6:	8e 77       	andi	r24, 0x7E	; 126
    10a8:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    Endpoint_ClearIN();
#endif
}
    10ac:	0f 90       	pop	r0
    10ae:	0f 90       	pop	r0
    10b0:	0f 90       	pop	r0
    10b2:	df 91       	pop	r29
    10b4:	cf 91       	pop	r28
    10b6:	08 95       	ret

000010b8 <send_system>:
    Endpoint_ClearIN();
#endif
}

static void send_system(uint16_t data)
{
    10b8:	cf 93       	push	r28
    10ba:	df 93       	push	r29
    10bc:	00 d0       	rcall	.+0      	; 0x10be <send_system+0x6>
    10be:	1f 92       	push	r1
    10c0:	cd b7       	in	r28, 0x3d	; 61
    10c2:	de b7       	in	r29, 0x3e	; 62
#ifdef EXTRAKEY_ENABLE
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
    10c4:	20 91 21 03 	lds	r18, 0x0321	; 0x800321 <USB_DeviceState>
    10c8:	24 30       	cpi	r18, 0x04	; 4
    10ca:	31 f5       	brne	.+76     	; 0x1118 <send_system+0x60>
        return;

    report_extra_t r = {
    10cc:	22 e0       	ldi	r18, 0x02	; 2
    10ce:	29 83       	std	Y+1, r18	; 0x01
    10d0:	80 58       	subi	r24, 0x80	; 128
    10d2:	91 09       	sbc	r25, r1
    10d4:	9b 83       	std	Y+3, r25	; 0x03
    10d6:	8a 83       	std	Y+2, r24	; 0x02
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    10d8:	83 e0       	ldi	r24, 0x03	; 3
    10da:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
    10de:	8f ef       	ldi	r24, 0xFF	; 255
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    10e0:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    10e4:	81 50       	subi	r24, 0x01	; 1
        .usage = data - SYSTEM_POWER_DOWN + 1
    };
    Endpoint_SelectEndpoint(EXTRAKEY_IN_EPNUM);

    /* Check if write ready for a polling interval around 10ms */
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    10e6:	95 fd       	sbrc	r25, 5
    10e8:	06 c0       	rjmp	.+12     	; 0x10f6 <send_system+0x3e>
    10ea:	95 ed       	ldi	r25, 0xD5	; 213
    10ec:	9a 95       	dec	r25
    10ee:	f1 f7       	brne	.-4      	; 0x10ec <send_system+0x34>
    10f0:	00 00       	nop
    10f2:	81 11       	cpse	r24, r1
    10f4:	f5 cf       	rjmp	.-22     	; 0x10e0 <send_system+0x28>
    10f6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    if (!Endpoint_IsReadWriteAllowed()) return;
    10fa:	85 ff       	sbrs	r24, 5
    10fc:	0d c0       	rjmp	.+26     	; 0x1118 <send_system+0x60>

    Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
    10fe:	40 e0       	ldi	r20, 0x00	; 0
    1100:	50 e0       	ldi	r21, 0x00	; 0
    1102:	63 e0       	ldi	r22, 0x03	; 3
    1104:	70 e0       	ldi	r23, 0x00	; 0
    1106:	ce 01       	movw	r24, r28
    1108:	01 96       	adiw	r24, 0x01	; 1
    110a:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    110e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    1112:	8e 77       	andi	r24, 0x7E	; 126
    1114:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    Endpoint_ClearIN();
#endif
}
    1118:	0f 90       	pop	r0
    111a:	0f 90       	pop	r0
    111c:	0f 90       	pop	r0
    111e:	df 91       	pop	r29
    1120:	cf 91       	pop	r28
    1122:	08 95       	ret

00001124 <send_mouse>:
static void send_mouse(report_mouse_t *report)
{
#ifdef MOUSE_ENABLE
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
    1124:	20 91 21 03 	lds	r18, 0x0321	; 0x800321 <USB_DeviceState>
    1128:	24 30       	cpi	r18, 0x04	; 4
    112a:	f1 f4       	brne	.+60     	; 0x1168 <send_mouse+0x44>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    112c:	22 e0       	ldi	r18, 0x02	; 2
    112e:	20 93 e9 00 	sts	0x00E9, r18	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
    1132:	2f ef       	ldi	r18, 0xFF	; 255
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1134:	30 91 e8 00 	lds	r19, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    1138:	21 50       	subi	r18, 0x01	; 1

    /* Select the Mouse Report Endpoint */
    Endpoint_SelectEndpoint(MOUSE_IN_EPNUM);

    /* Check if write ready for a polling interval around 10ms */
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    113a:	35 fd       	sbrc	r19, 5
    113c:	06 c0       	rjmp	.+12     	; 0x114a <send_mouse+0x26>
    113e:	35 ed       	ldi	r19, 0xD5	; 213
    1140:	3a 95       	dec	r19
    1142:	f1 f7       	brne	.-4      	; 0x1140 <send_mouse+0x1c>
    1144:	00 00       	nop
    1146:	21 11       	cpse	r18, r1
    1148:	f5 cf       	rjmp	.-22     	; 0x1134 <send_mouse+0x10>
    114a:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    if (!Endpoint_IsReadWriteAllowed()) return;
    114e:	25 ff       	sbrs	r18, 5
    1150:	0b c0       	rjmp	.+22     	; 0x1168 <send_mouse+0x44>

    /* Write Mouse Report Data */
    Endpoint_Write_Stream_LE(report, sizeof(report_mouse_t), NULL);
    1152:	40 e0       	ldi	r20, 0x00	; 0
    1154:	50 e0       	ldi	r21, 0x00	; 0
    1156:	65 e0       	ldi	r22, 0x05	; 5
    1158:	70 e0       	ldi	r23, 0x00	; 0
    115a:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    115e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    1162:	8e 77       	andi	r24, 0x7E	; 126
    1164:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    1168:	08 95       	ret

0000116a <send_keyboard>:
{
    return keyboard_led_stats;
}

static void send_keyboard(report_keyboard_t *report)
{
    116a:	cf 93       	push	r28
    116c:	df 93       	push	r29
    uint8_t timeout = 128;

    if (USB_DeviceState != DEVICE_STATE_Configured)
    116e:	20 91 21 03 	lds	r18, 0x0321	; 0x800321 <USB_DeviceState>
    1172:	24 30       	cpi	r18, 0x04	; 4
    1174:	09 f0       	breq	.+2      	; 0x1178 <send_keyboard+0xe>
    1176:	4a c0       	rjmp	.+148    	; 0x120c <send_keyboard+0xa2>
    1178:	ec 01       	movw	r28, r24
        return;

    /* Select the Keyboard Report Endpoint */
#ifdef NKRO_ENABLE
    if (keyboard_protocol && keyboard_nkro) {
    117a:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <keyboard_protocol>
    117e:	88 23       	and	r24, r24
    1180:	e1 f0       	breq	.+56     	; 0x11ba <send_keyboard+0x50>
    1182:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <keyboard_nkro>
    1186:	88 23       	and	r24, r24
    1188:	c1 f0       	breq	.+48     	; 0x11ba <send_keyboard+0x50>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    118a:	85 e0       	ldi	r24, 0x05	; 5
    118c:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
    1190:	81 e8       	ldi	r24, 0x81	; 129
    1192:	81 50       	subi	r24, 0x01	; 1
        /* Report protocol - NKRO */
        Endpoint_SelectEndpoint(NKRO_IN_EPNUM);

        /* Check if write ready for a polling interval around 1ms */
        while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(8);
    1194:	49 f0       	breq	.+18     	; 0x11a8 <send_keyboard+0x3e>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1196:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    119a:	95 fd       	sbrc	r25, 5
    119c:	05 c0       	rjmp	.+10     	; 0x11a8 <send_keyboard+0x3e>
    119e:	9a e2       	ldi	r25, 0x2A	; 42
    11a0:	9a 95       	dec	r25
    11a2:	f1 f7       	brne	.-4      	; 0x11a0 <send_keyboard+0x36>
    11a4:	00 c0       	rjmp	.+0      	; 0x11a6 <send_keyboard+0x3c>
    11a6:	f5 cf       	rjmp	.-22     	; 0x1192 <send_keyboard+0x28>
    11a8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
        if (!Endpoint_IsReadWriteAllowed()) return;
    11ac:	85 ff       	sbrs	r24, 5
    11ae:	2e c0       	rjmp	.+92     	; 0x120c <send_keyboard+0xa2>

        /* Write Keyboard Report Data */
        Endpoint_Write_Stream_LE(report, NKRO_EPSIZE, NULL);
    11b0:	40 e0       	ldi	r20, 0x00	; 0
    11b2:	50 e0       	ldi	r21, 0x00	; 0
    11b4:	60 e2       	ldi	r22, 0x20	; 32
    11b6:	70 e0       	ldi	r23, 0x00	; 0
    11b8:	19 c0       	rjmp	.+50     	; 0x11ec <send_keyboard+0x82>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    11ba:	81 e0       	ldi	r24, 0x01	; 1
    11bc:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
    11c0:	81 e8       	ldi	r24, 0x81	; 129
    11c2:	81 50       	subi	r24, 0x01	; 1
    {
        /* Boot protocol */
        Endpoint_SelectEndpoint(KEYBOARD_IN_EPNUM);

        /* Check if write ready for a polling interval around 10ms */
        while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(80);
    11c4:	59 f0       	breq	.+22     	; 0x11dc <send_keyboard+0x72>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    11c6:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    11ca:	95 fd       	sbrc	r25, 5
    11cc:	07 c0       	rjmp	.+14     	; 0x11dc <send_keyboard+0x72>
    11ce:	ef e3       	ldi	r30, 0x3F	; 63
    11d0:	f1 e0       	ldi	r31, 0x01	; 1
    11d2:	31 97       	sbiw	r30, 0x01	; 1
    11d4:	f1 f7       	brne	.-4      	; 0x11d2 <send_keyboard+0x68>
    11d6:	00 c0       	rjmp	.+0      	; 0x11d8 <send_keyboard+0x6e>
    11d8:	00 00       	nop
    11da:	f3 cf       	rjmp	.-26     	; 0x11c2 <send_keyboard+0x58>
    11dc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
        if (!Endpoint_IsReadWriteAllowed()) return;
    11e0:	85 ff       	sbrs	r24, 5
    11e2:	14 c0       	rjmp	.+40     	; 0x120c <send_keyboard+0xa2>

        /* Write Keyboard Report Data */
        Endpoint_Write_Stream_LE(report, KEYBOARD_EPSIZE, NULL);
    11e4:	40 e0       	ldi	r20, 0x00	; 0
    11e6:	50 e0       	ldi	r21, 0x00	; 0
    11e8:	68 e0       	ldi	r22, 0x08	; 8
    11ea:	70 e0       	ldi	r23, 0x00	; 0
    11ec:	ce 01       	movw	r24, r28
    11ee:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    11f2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    11f6:	8e 77       	andi	r24, 0x7E	; 126
    11f8:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    }

    /* Finalize the stream transfer to send the last packet */
    Endpoint_ClearIN();

    keyboard_report_sent = *report;
    11fc:	80 e2       	ldi	r24, 0x20	; 32
    11fe:	fe 01       	movw	r30, r28
    1200:	a0 e5       	ldi	r26, 0x50	; 80
    1202:	b2 e0       	ldi	r27, 0x02	; 2
    1204:	01 90       	ld	r0, Z+
    1206:	0d 92       	st	X+, r0
    1208:	8a 95       	dec	r24
    120a:	e1 f7       	brne	.-8      	; 0x1204 <send_keyboard+0x9a>
}
    120c:	df 91       	pop	r29
    120e:	cf 91       	pop	r28
    1210:	08 95       	ret

00001212 <console_is_ready>:

// TODO: Around 2500ms delay often works anyhoo but proper startup would be better
// 1000ms delay of hid_listen affects this probably
/* wait for Console startup */
static bool console_is_ready(void)
{
    1212:	cf 93       	push	r28
    static bool hid_listen_ready = false;
    if (!hid_listen_ready) {
    1214:	c0 91 4e 01 	lds	r28, 0x014E	; 0x80014e <hid_listen_ready.4986>
    1218:	c1 11       	cpse	r28, r1
    121a:	0b c0       	rjmp	.+22     	; 0x1232 <console_is_ready+0x20>
        if (timer_read32() < 2500)
    121c:	0e 94 4b 1e 	call	0x3c96	; 0x3c96 <timer_read32>
    1220:	64 3c       	cpi	r22, 0xC4	; 196
    1222:	79 40       	sbci	r23, 0x09	; 9
    1224:	81 05       	cpc	r24, r1
    1226:	91 05       	cpc	r25, r1
    1228:	20 f0       	brcs	.+8      	; 0x1232 <console_is_ready+0x20>
            return false;
        hid_listen_ready = true;
    122a:	81 e0       	ldi	r24, 0x01	; 1
    122c:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <hid_listen_ready.4986>
    }
    return true;
    1230:	c1 e0       	ldi	r28, 0x01	; 1
}
    1232:	8c 2f       	mov	r24, r28
    1234:	cf 91       	pop	r28
    1236:	08 95       	ret

00001238 <sendchar>:
/*******************************************************************************
 * sendchar
 ******************************************************************************/
#ifdef CONSOLE_ENABLE
int8_t sendchar(uint8_t c)
{
    1238:	cf 93       	push	r28
    123a:	c8 2f       	mov	r28, r24
    return true;
}

static bool console_putc(uint8_t c)
{
    if (!console_is_ready())
    123c:	0e 94 09 09 	call	0x1212	; 0x1212 <console_is_ready>
    1240:	88 23       	and	r24, r24
    1242:	09 f4       	brne	.+2      	; 0x1246 <sendchar+0xe>
    1244:	48 c0       	rjmp	.+144    	; 0x12d6 <sendchar+0x9e>
        goto EXIT;

    // return immediately if called while interrupt
    if (!(SREG & (1<<SREG_I)))
    1246:	0f b6       	in	r0, 0x3f	; 63
    1248:	07 fe       	sbrs	r0, 7
    124a:	45 c0       	rjmp	.+138    	; 0x12d6 <sendchar+0x9e>
        goto EXIT;

    if (USB_DeviceState != DEVICE_STATE_Configured)
    124c:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <USB_DeviceState>
    1250:	84 30       	cpi	r24, 0x04	; 4
    1252:	09 f0       	breq	.+2      	; 0x1256 <sendchar+0x1e>
    1254:	40 c0       	rjmp	.+128    	; 0x12d6 <sendchar+0x9e>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1256:	80 91 e9 00 	lds	r24, 0x00E9	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
    125a:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    125c:	20 91 ec 00 	lds	r18, 0x00EC	; 0x8000ec <__DATA_REGION_ORIGIN__+0x8c>
    1260:	92 2f       	mov	r25, r18
    1262:	91 70       	andi	r25, 0x01	; 1
    1264:	20 fd       	sbrc	r18, 0
    1266:	90 e8       	ldi	r25, 0x80	; 128
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1268:	89 2b       	or	r24, r25
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    126a:	94 e0       	ldi	r25, 0x04	; 4
    126c:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    1270:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__DATA_REGION_ORIGIN__+0x8b>
        goto EXIT;

    uint8_t ep = Endpoint_GetCurrentEndpoint();

    Endpoint_SelectEndpoint(CONSOLE_IN_EPNUM);
    if (!Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
    1274:	90 ff       	sbrs	r25, 0
    1276:	2c c0       	rjmp	.+88     	; 0x12d0 <sendchar+0x98>
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    1278:	90 91 ee 00 	lds	r25, 0x00EE	; 0x8000ee <__DATA_REGION_ORIGIN__+0x8e>
    127c:	97 ff       	sbrs	r25, 7
    127e:	28 c0       	rjmp	.+80     	; 0x12d0 <sendchar+0x98>
    1280:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <sendbuf+0x3>
        goto EXIT_RESTORE_EP;
    }

    // write from buffer to endpoint bank
    while (!ringbuf_is_empty(&sendbuf) && Endpoint_IsReadWriteAllowed()) {
    1284:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <sendbuf+0x2>
    1288:	29 17       	cp	r18, r25
    128a:	09 f4       	brne	.+2      	; 0x128e <sendchar+0x56>
    128c:	49 c0       	rjmp	.+146    	; 0x1320 <sendchar+0xe8>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    128e:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    1292:	25 ff       	sbrs	r18, 5
    1294:	1d c0       	rjmp	.+58     	; 0x12d0 <sendchar+0x98>
    buf->size_mask = size - 1;
}
static inline int16_t ringbuf_get(ringbuf_t *buf)
{
    if (ringbuf_is_empty(buf)) return -1;
    uint8_t data = buf->buffer[buf->tail];
    1296:	e0 91 01 01 	lds	r30, 0x0101	; 0x800101 <sendbuf>
    129a:	f0 91 02 01 	lds	r31, 0x0102	; 0x800102 <sendbuf+0x1>
    129e:	e9 0f       	add	r30, r25
    12a0:	f1 1d       	adc	r31, r1
    12a2:	30 81       	ld	r19, Z
    buf->tail++;
    buf->tail &= buf->size_mask;
    12a4:	9f 5f       	subi	r25, 0xFF	; 255
    12a6:	20 91 05 01 	lds	r18, 0x0105	; 0x800105 <sendbuf+0x4>
    12aa:	92 23       	and	r25, r18
    12ac:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <sendbuf+0x3>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    12b0:	30 93 f1 00 	sts	0x00F1, r19	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    12b4:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
        Endpoint_Write_8(ringbuf_get(&sendbuf));

        // clear bank when it is full
        if (!Endpoint_IsReadWriteAllowed() && Endpoint_IsINReady()) {
    12b8:	95 fd       	sbrc	r25, 5
    12ba:	e2 cf       	rjmp	.-60     	; 0x1280 <sendchar+0x48>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    12bc:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    12c0:	90 ff       	sbrs	r25, 0
    12c2:	de cf       	rjmp	.-68     	; 0x1280 <sendchar+0x48>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    12c4:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    12c8:	9e 77       	andi	r25, 0x7E	; 126
    12ca:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    12ce:	d8 cf       	rjmp	.-80     	; 0x1280 <sendchar+0x48>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    12d0:	8f 70       	andi	r24, 0x0F	; 15
    12d2:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
{
    return (buf->head == buf->tail);
}
static inline bool ringbuf_is_full(ringbuf_t *buf)
{
    return (((buf->head + 1) & buf->size_mask) == buf->tail);
    12d6:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <sendbuf+0x2>
    buf->tail &= buf->size_mask;
    return  data;
}
static inline bool ringbuf_put(ringbuf_t *buf, uint8_t data)
{
    if (ringbuf_is_full(buf)) {
    12da:	90 e0       	ldi	r25, 0x00	; 0
    12dc:	ac 01       	movw	r20, r24
    12de:	4f 5f       	subi	r20, 0xFF	; 255
    12e0:	5f 4f       	sbci	r21, 0xFF	; 255
    12e2:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <sendbuf+0x4>
    12e6:	23 2f       	mov	r18, r19
    12e8:	30 e0       	ldi	r19, 0x00	; 0
    12ea:	24 23       	and	r18, r20
    12ec:	35 23       	and	r19, r21
    12ee:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <sendbuf+0x3>
    12f2:	50 e0       	ldi	r21, 0x00	; 0
    12f4:	24 17       	cp	r18, r20
    12f6:	35 07       	cpc	r19, r21
    12f8:	89 f0       	breq	.+34     	; 0x131c <sendchar+0xe4>
        return false;
    }
    buf->buffer[buf->head] = data;
    12fa:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <sendbuf>
    12fe:	30 91 02 01 	lds	r19, 0x0102	; 0x800102 <sendbuf+0x1>
    1302:	f9 01       	movw	r30, r18
    1304:	e8 0f       	add	r30, r24
    1306:	f9 1f       	adc	r31, r25
    1308:	c0 83       	st	Z, r28
    buf->head++;
    buf->head &= buf->size_mask;
    130a:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <sendbuf+0x2>
    130e:	8f 5f       	subi	r24, 0xFF	; 255
    1310:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <sendbuf+0x4>
    1314:	89 23       	and	r24, r25
    1316:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <sendbuf+0x2>
    131a:	0b c0       	rjmp	.+22     	; 0x1332 <sendchar+0xfa>
    #ifdef LUFA_DEBUG_SUART
    xmit(c);
    #endif

    bool r = console_putc(c);
    return (r ? 0 : -1);
    131c:	8f ef       	ldi	r24, 0xFF	; 255
    131e:	0a c0       	rjmp	.+20     	; 0x1334 <sendchar+0xfc>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1320:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
            Endpoint_ClearIN();
        }
    }

    // write c to bank directly if there is no others in buffer
    if (ringbuf_is_empty(&sendbuf) && Endpoint_IsReadWriteAllowed()) {
    1324:	95 ff       	sbrs	r25, 5
    1326:	d4 cf       	rjmp	.-88     	; 0x12d0 <sendchar+0x98>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1328:	c0 93 f1 00 	sts	0x00F1, r28	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    132c:	8f 70       	andi	r24, 0x0F	; 15
    132e:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
    #ifdef LUFA_DEBUG_SUART
    xmit(c);
    #endif

    bool r = console_putc(c);
    return (r ? 0 : -1);
    1332:	80 e0       	ldi	r24, 0x00	; 0
}
    1334:	cf 91       	pop	r28
    1336:	08 95       	ret

00001338 <EVENT_USB_Device_Connect>:
 * 2) EVENT_USB_Device_Reset
 * 3) EVENT_USB_Device_Wake
*/
void EVENT_USB_Device_Connect(void)
{
    print("[C]");
    1338:	8f e1       	ldi	r24, 0x1F	; 31
    133a:	92 e0       	ldi	r25, 0x02	; 2
    133c:	0e 94 79 06 	call	0xcf2	; 0xcf2 <xputs>
    /* For battery powered device */
    if (!USB_IsInitialized) {
    1340:	80 91 20 03 	lds	r24, 0x0320	; 0x800320 <USB_IsInitialized>
    1344:	81 11       	cpse	r24, r1
    1346:	09 c0       	rjmp	.+18     	; 0x135a <EVENT_USB_Device_Connect+0x22>
        USB_Disable();
    1348:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <USB_Disable>
        USB_Init();
    134c:	0e 94 c0 0d 	call	0x1b80	; 0x1b80 <USB_Init>
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
    1350:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
    1354:	84 60       	ori	r24, 0x04	; 4
    1356:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
    135a:	08 95       	ret

0000135c <EVENT_USB_Device_Disconnect>:
    }
}

void EVENT_USB_Device_Disconnect(void)
{
    print("[D]");
    135c:	8b e1       	ldi	r24, 0x1B	; 27
    135e:	92 e0       	ldi	r25, 0x02	; 2
    1360:	0e 94 79 06 	call	0xcf2	; 0xcf2 <xputs>
    /* For battery powered device */
    USB_IsInitialized = false;
    1364:	10 92 20 03 	sts	0x0320, r1	; 0x800320 <USB_IsInitialized>
    1368:	08 95       	ret

0000136a <EVENT_USB_Device_Reset>:
    136a:	08 95       	ret

0000136c <EVENT_USB_Device_StartOfFrame>:
    hook_usb_wakeup();
}

// called every 1ms
void EVENT_USB_Device_StartOfFrame(void)
{
    136c:	08 95       	ret

0000136e <EVENT_USB_Device_ConfigurationChanged>:
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    136e:	42 e0       	ldi	r20, 0x02	; 2
    1370:	61 ec       	ldi	r22, 0xC1	; 193
    1372:	81 e0       	ldi	r24, 0x01	; 1
    1374:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <Endpoint_ConfigureEndpoint_Prv>
    1378:	42 e0       	ldi	r20, 0x02	; 2
    137a:	61 ec       	ldi	r22, 0xC1	; 193
    137c:	82 e0       	ldi	r24, 0x02	; 2
    137e:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <Endpoint_ConfigureEndpoint_Prv>
    1382:	42 e0       	ldi	r20, 0x02	; 2
    1384:	61 ec       	ldi	r22, 0xC1	; 193
    1386:	83 e0       	ldi	r24, 0x03	; 3
    1388:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <Endpoint_ConfigureEndpoint_Prv>
    138c:	42 e2       	ldi	r20, 0x22	; 34
    138e:	61 ec       	ldi	r22, 0xC1	; 193
    1390:	84 e0       	ldi	r24, 0x04	; 4
    1392:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <Endpoint_ConfigureEndpoint_Prv>
    1396:	42 e2       	ldi	r20, 0x22	; 34
    1398:	61 ec       	ldi	r22, 0xC1	; 193
    139a:	85 e0       	ldi	r24, 0x05	; 5
    139c:	0c 94 dc 0c 	jmp	0x19b8	; 0x19b8 <Endpoint_ConfigureEndpoint_Prv>

000013a0 <EVENT_USB_Device_ControlRequest>:
{
    uint8_t* ReportData = NULL;
    uint8_t  ReportSize = 0;

    /* Handle HID Class specific requests */
    switch (USB_ControlRequest.bRequest)
    13a0:	80 91 23 03 	lds	r24, 0x0323	; 0x800323 <USB_ControlRequest+0x1>
    13a4:	83 30       	cpi	r24, 0x03	; 3
    13a6:	09 f4       	brne	.+2      	; 0x13aa <EVENT_USB_Device_ControlRequest+0xa>
    13a8:	55 c0       	rjmp	.+170    	; 0x1454 <EVENT_USB_Device_ControlRequest+0xb4>
    13aa:	30 f4       	brcc	.+12     	; 0x13b8 <EVENT_USB_Device_ControlRequest+0x18>
    13ac:	81 30       	cpi	r24, 0x01	; 1
    13ae:	71 f0       	breq	.+28     	; 0x13cc <EVENT_USB_Device_ControlRequest+0x2c>
    13b0:	82 30       	cpi	r24, 0x02	; 2
    13b2:	09 f4       	brne	.+2      	; 0x13b6 <EVENT_USB_Device_ControlRequest+0x16>
    13b4:	8e c0       	rjmp	.+284    	; 0x14d2 <EVENT_USB_Device_ControlRequest+0x132>
    13b6:	08 95       	ret
    13b8:	8a 30       	cpi	r24, 0x0A	; 10
    13ba:	09 f4       	brne	.+2      	; 0x13be <EVENT_USB_Device_ControlRequest+0x1e>
    13bc:	7a c0       	rjmp	.+244    	; 0x14b2 <EVENT_USB_Device_ControlRequest+0x112>
    13be:	8b 30       	cpi	r24, 0x0B	; 11
    13c0:	09 f4       	brne	.+2      	; 0x13c4 <EVENT_USB_Device_ControlRequest+0x24>
    13c2:	60 c0       	rjmp	.+192    	; 0x1484 <EVENT_USB_Device_ControlRequest+0xe4>
    13c4:	89 30       	cpi	r24, 0x09	; 9
    13c6:	09 f0       	breq	.+2      	; 0x13ca <EVENT_USB_Device_ControlRequest+0x2a>
    13c8:	9c c0       	rjmp	.+312    	; 0x1502 <EVENT_USB_Device_ControlRequest+0x162>
    13ca:	20 c0       	rjmp	.+64     	; 0x140c <EVENT_USB_Device_ControlRequest+0x6c>
    {
        case HID_REQ_GetReport:
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    13cc:	80 91 22 03 	lds	r24, 0x0322	; 0x800322 <USB_ControlRequest>
    13d0:	81 3a       	cpi	r24, 0xA1	; 161
    13d2:	09 f0       	breq	.+2      	; 0x13d6 <EVENT_USB_Device_ControlRequest+0x36>
    13d4:	96 c0       	rjmp	.+300    	; 0x1502 <EVENT_USB_Device_ControlRequest+0x162>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    13d6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    13da:	87 7f       	andi	r24, 0xF7	; 247
    13dc:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
            {
                Endpoint_ClearSETUP();

                // Interface
                switch (USB_ControlRequest.wIndex) {
    13e0:	80 91 26 03 	lds	r24, 0x0326	; 0x800326 <USB_ControlRequest+0x4>
    13e4:	90 91 27 03 	lds	r25, 0x0327	; 0x800327 <USB_ControlRequest+0x5>
    13e8:	89 2b       	or	r24, r25
    13ea:	21 f4       	brne	.+8      	; 0x13f4 <EVENT_USB_Device_ControlRequest+0x54>
                case KEYBOARD_INTERFACE:
                    // TODO: test/check
                    ReportData = (uint8_t*)&keyboard_report_sent;
                    ReportSize = sizeof(keyboard_report_sent);
    13ec:	60 e2       	ldi	r22, 0x20	; 32

                // Interface
                switch (USB_ControlRequest.wIndex) {
                case KEYBOARD_INTERFACE:
                    // TODO: test/check
                    ReportData = (uint8_t*)&keyboard_report_sent;
    13ee:	80 e5       	ldi	r24, 0x50	; 80
    13f0:	92 e0       	ldi	r25, 0x02	; 2
    13f2:	03 c0       	rjmp	.+6      	; 0x13fa <EVENT_USB_Device_ControlRequest+0x5a>
 *  This is fired before passing along unhandled control requests to the library for processing internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
    uint8_t* ReportData = NULL;
    uint8_t  ReportSize = 0;
    13f4:	60 e0       	ldi	r22, 0x00	; 0
/** Event handler for the USB_ControlRequest event.
 *  This is fired before passing along unhandled control requests to the library for processing internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
    uint8_t* ReportData = NULL;
    13f6:	80 e0       	ldi	r24, 0x00	; 0
    13f8:	90 e0       	ldi	r25, 0x00	; 0
                    ReportSize = sizeof(keyboard_report_sent);
                    break;
                }

                /* Write the report data to the control endpoint */
                Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
    13fa:	70 e0       	ldi	r23, 0x00	; 0
    13fc:	0e 94 1d 0c 	call	0x183a	; 0x183a <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1400:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    1404:	8b 77       	andi	r24, 0x7B	; 123
    1406:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    140a:	08 95       	ret
#endif
            }

            break;
        case HID_REQ_SetReport:
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    140c:	80 91 22 03 	lds	r24, 0x0322	; 0x800322 <USB_ControlRequest>
    1410:	81 32       	cpi	r24, 0x21	; 33
    1412:	09 f0       	breq	.+2      	; 0x1416 <EVENT_USB_Device_ControlRequest+0x76>
    1414:	76 c0       	rjmp	.+236    	; 0x1502 <EVENT_USB_Device_ControlRequest+0x162>
            {

                // Interface
                switch (USB_ControlRequest.wIndex) {
    1416:	80 91 26 03 	lds	r24, 0x0326	; 0x800326 <USB_ControlRequest+0x4>
    141a:	90 91 27 03 	lds	r25, 0x0327	; 0x800327 <USB_ControlRequest+0x5>
    141e:	00 97       	sbiw	r24, 0x00	; 0
    1420:	19 f0       	breq	.+6      	; 0x1428 <EVENT_USB_Device_ControlRequest+0x88>
    1422:	04 97       	sbiw	r24, 0x04	; 4
    1424:	09 f0       	breq	.+2      	; 0x1428 <EVENT_USB_Device_ControlRequest+0x88>
    1426:	6d c0       	rjmp	.+218    	; 0x1502 <EVENT_USB_Device_ControlRequest+0x162>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1428:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    142c:	87 7f       	andi	r24, 0xF7	; 247
    142e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1432:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
#ifdef NKRO_ENABLE
                case NKRO_INTERFACE:
#endif
                    Endpoint_ClearSETUP();

                    while (!(Endpoint_IsOUTReceived())) {
    1436:	82 fd       	sbrc	r24, 2
    1438:	05 c0       	rjmp	.+10     	; 0x1444 <EVENT_USB_Device_ControlRequest+0xa4>
                        if (USB_DeviceState == DEVICE_STATE_Unattached)
    143a:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <USB_DeviceState>
    143e:	81 11       	cpse	r24, r1
    1440:	f8 cf       	rjmp	.-16     	; 0x1432 <EVENT_USB_Device_ControlRequest+0x92>
    1442:	5f c0       	rjmp	.+190    	; 0x1502 <EVENT_USB_Device_ControlRequest+0x162>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1444:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
                          return;
                    }
                    keyboard_led_stats = Endpoint_Read_8();
    1448:	80 93 70 02 	sts	0x0270, r24	; 0x800270 <keyboard_led_stats>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    144c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    1450:	8b 77       	andi	r24, 0x7B	; 123
    1452:	53 c0       	rjmp	.+166    	; 0x14fa <EVENT_USB_Device_ControlRequest+0x15a>
            }

            break;

        case HID_REQ_GetProtocol:
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1454:	80 91 22 03 	lds	r24, 0x0322	; 0x800322 <USB_ControlRequest>
    1458:	81 3a       	cpi	r24, 0xA1	; 161
    145a:	09 f0       	breq	.+2      	; 0x145e <EVENT_USB_Device_ControlRequest+0xbe>
    145c:	52 c0       	rjmp	.+164    	; 0x1502 <EVENT_USB_Device_ControlRequest+0x162>
            {
                if (USB_ControlRequest.wIndex == KEYBOARD_INTERFACE) {
    145e:	80 91 26 03 	lds	r24, 0x0326	; 0x800326 <USB_ControlRequest+0x4>
    1462:	90 91 27 03 	lds	r25, 0x0327	; 0x800327 <USB_ControlRequest+0x5>
    1466:	89 2b       	or	r24, r25
    1468:	09 f0       	breq	.+2      	; 0x146c <EVENT_USB_Device_ControlRequest+0xcc>
    146a:	4b c0       	rjmp	.+150    	; 0x1502 <EVENT_USB_Device_ControlRequest+0x162>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    146c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    1470:	87 7f       	andi	r24, 0xF7	; 247
    1472:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1476:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
                    Endpoint_ClearSETUP();
                    while (!(Endpoint_IsINReady()));
    147a:	80 ff       	sbrs	r24, 0
    147c:	fc cf       	rjmp	.-8      	; 0x1476 <EVENT_USB_Device_ControlRequest+0xd6>
                    Endpoint_Write_8(keyboard_protocol);
    147e:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <keyboard_protocol>
    1482:	36 c0       	rjmp	.+108    	; 0x14f0 <EVENT_USB_Device_ControlRequest+0x150>
                }
            }

            break;
        case HID_REQ_SetProtocol:
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1484:	80 91 22 03 	lds	r24, 0x0322	; 0x800322 <USB_ControlRequest>
    1488:	81 32       	cpi	r24, 0x21	; 33
    148a:	d9 f5       	brne	.+118    	; 0x1502 <EVENT_USB_Device_ControlRequest+0x162>
            {
                if (USB_ControlRequest.wIndex == KEYBOARD_INTERFACE) {
    148c:	80 91 26 03 	lds	r24, 0x0326	; 0x800326 <USB_ControlRequest+0x4>
    1490:	90 91 27 03 	lds	r25, 0x0327	; 0x800327 <USB_ControlRequest+0x5>
    1494:	89 2b       	or	r24, r25
    1496:	a9 f5       	brne	.+106    	; 0x1502 <EVENT_USB_Device_ControlRequest+0x162>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1498:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    149c:	87 7f       	andi	r24, 0xF7	; 247
    149e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
                    Endpoint_ClearSETUP();
                    Endpoint_ClearStatusStage();
    14a2:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <Endpoint_ClearStatusStage>

                    keyboard_protocol = (USB_ControlRequest.wValue & 0xFF);
    14a6:	80 91 24 03 	lds	r24, 0x0324	; 0x800324 <USB_ControlRequest+0x2>
    14aa:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <keyboard_protocol>
                    clear_keyboard();
    14ae:	0c 94 a8 16 	jmp	0x2d50	; 0x2d50 <clear_keyboard>
                }
            }

            break;
        case HID_REQ_SetIdle:
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    14b2:	80 91 22 03 	lds	r24, 0x0322	; 0x800322 <USB_ControlRequest>
    14b6:	81 32       	cpi	r24, 0x21	; 33
    14b8:	21 f5       	brne	.+72     	; 0x1502 <EVENT_USB_Device_ControlRequest+0x162>
    14ba:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    14be:	87 7f       	andi	r24, 0xF7	; 247
    14c0:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
            {
                Endpoint_ClearSETUP();
                Endpoint_ClearStatusStage();
    14c4:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <Endpoint_ClearStatusStage>

                keyboard_idle = ((USB_ControlRequest.wValue & 0xFF00) >> 8);
    14c8:	80 91 25 03 	lds	r24, 0x0325	; 0x800325 <USB_ControlRequest+0x3>
    14cc:	80 93 71 02 	sts	0x0271, r24	; 0x800271 <keyboard_idle>
    14d0:	08 95       	ret
#endif
            }

            break;
        case HID_REQ_GetIdle:
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    14d2:	80 91 22 03 	lds	r24, 0x0322	; 0x800322 <USB_ControlRequest>
    14d6:	81 3a       	cpi	r24, 0xA1	; 161
    14d8:	a1 f4       	brne	.+40     	; 0x1502 <EVENT_USB_Device_ControlRequest+0x162>
    14da:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    14de:	87 7f       	andi	r24, 0xF7	; 247
    14e0:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    14e4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
            {
                Endpoint_ClearSETUP();
                while (!(Endpoint_IsINReady()));
    14e8:	80 ff       	sbrs	r24, 0
    14ea:	fc cf       	rjmp	.-8      	; 0x14e4 <EVENT_USB_Device_ControlRequest+0x144>
                Endpoint_Write_8(keyboard_idle);
    14ec:	80 91 71 02 	lds	r24, 0x0271	; 0x800271 <keyboard_idle>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    14f0:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    14f4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    14f8:	8e 77       	andi	r24, 0x7E	; 126
    14fa:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
                Endpoint_ClearIN();
                Endpoint_ClearStatusStage();
    14fe:	0c 94 11 0d 	jmp	0x1a22	; 0x1a22 <Endpoint_ClearStatusStage>
    1502:	08 95       	ret

00001504 <hook_late_init>:
/* hooks */
__attribute__((weak))
void hook_early_init(void) {}

__attribute__((weak))
void hook_late_init(void) {}
    1504:	08 95       	ret

00001506 <hook_early_init>:
    1506:	0c 94 82 0a 	jmp	0x1504	; 0x1504 <hook_late_init>

0000150a <hook_usb_suspend_entry>:
void hook_usb_suspend_entry(void)
{
    // Turn LED off to save power
    // Set 0 with putting aside status before suspend and restore
    // it after wakeup, then LED is updated at keyboard_task() in main loop
    _led_stats = keyboard_led_stats;
    150a:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <keyboard_led_stats>
    150e:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <_led_stats>
    keyboard_led_stats = 0;
    1512:	10 92 70 02 	sts	0x0270, r1	; 0x800270 <keyboard_led_stats>
    led_set(keyboard_led_stats);
    1516:	80 e0       	ldi	r24, 0x00	; 0
    1518:	0e 94 1e 08 	call	0x103c	; 0x103c <led_set>

    matrix_clear();
    151c:	0e 94 b6 11 	call	0x236c	; 0x236c <matrix_clear>
    clear_keyboard();
    1520:	0c 94 a8 16 	jmp	0x2d50	; 0x2d50 <clear_keyboard>

00001524 <EVENT_USB_Device_Suspend>:
void EVENT_USB_Device_Suspend()
{
#ifdef LUFA_DEBUG
    print("[S]");
#endif
    hook_usb_suspend_entry();
    1524:	0c 94 85 0a 	jmp	0x150a	; 0x150a <hook_usb_suspend_entry>

00001528 <hook_usb_suspend_loop>:
}

__attribute__((weak))
void hook_usb_suspend_loop(void)
{
    suspend_power_down();
    1528:	0e 94 cc 1d 	call	0x3b98	; 0x3b98 <suspend_power_down>
    if (USB_Device_RemoteWakeupEnabled && suspend_wakeup_condition()) {
    152c:	80 91 1f 03 	lds	r24, 0x031F	; 0x80031f <USB_Device_RemoteWakeupEnabled>
    1530:	88 23       	and	r24, r24
    1532:	29 f0       	breq	.+10     	; 0x153e <hook_usb_suspend_loop+0x16>
    1534:	0e 94 f5 1d 	call	0x3bea	; 0x3bea <suspend_wakeup_condition>
    1538:	81 11       	cpse	r24, r1
        USB_Device_SendRemoteWakeup();
    153a:	0c 94 bc 0b 	jmp	0x1778	; 0x1778 <USB_Device_SendRemoteWakeup>
    153e:	08 95       	ret

00001540 <main>:
    USB_Device_EnableSOFEvents();
}

int main(void)  __attribute__ ((weak));
int main(void)
{
    1540:	cf 93       	push	r28
 * main
 ******************************************************************************/
static void setup_mcu(void)
{
    /* Disable watchdog if enabled by bootloader/fuses */
    MCUSR &= ~(1 << WDRF);
    1542:	84 b7       	in	r24, 0x34	; 52
    1544:	87 7f       	andi	r24, 0xF7	; 247
    1546:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
    1548:	0f b6       	in	r0, 0x3f	; 63
    154a:	f8 94       	cli
    154c:	a8 95       	wdr
    154e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    1552:	88 61       	ori	r24, 0x18	; 24
    1554:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
    1558:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
    155c:	0f be       	out	0x3f, r0	; 63
    , clock_div_1_rc = 15
#endif
} clock_div_t;

static __inline__ void clock_prescale_set(clock_div_t) __attribute__((__always_inline__));
#endif	/* !__DOXYGEN__ */
    155e:	90 e0       	ldi	r25, 0x00	; 0
    1560:	80 e8       	ldi	r24, 0x80	; 128
    1562:	0f b6       	in	r0, 0x3f	; 63
    1564:	f8 94       	cli
    1566:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    156a:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    156e:	0f be       	out	0x3f, r0	; 63
    SUART_OUT_DDR |= (1<<SUART_OUT_BIT);
    SUART_OUT_PORT |= (1<<SUART_OUT_BIT);
#endif

    // setup sendchar: DO NOT USE print functions before this line
    print_set_sendchar(sendchar);
    1570:	8c e1       	ldi	r24, 0x1C	; 28
    1572:	99 e0       	ldi	r25, 0x09	; 9
    1574:	0e 94 a0 1d 	call	0x3b40	; 0x3b40 <print_set_sendchar>
    host_set_driver(&lufa_driver);
    1578:	86 e0       	ldi	r24, 0x06	; 6
    157a:	91 e0       	ldi	r25, 0x01	; 1
    157c:	0e 94 4a 10 	call	0x2094	; 0x2094 <host_set_driver>

    print("Keyboard init.\n");
    1580:	8b e0       	ldi	r24, 0x0B	; 11
    1582:	92 e0       	ldi	r25, 0x02	; 2
    1584:	0e 94 79 06 	call	0xcf2	; 0xcf2 <xputs>
    hook_early_init();
    1588:	0e 94 83 0a 	call	0x1506	; 0x1506 <hook_early_init>
    keyboard_setup();
    158c:	0e 94 09 11 	call	0x2212	; 0x2212 <keyboard_setup>
}

static void setup_usb(void)
{
    // Leonardo needs. Without this USB device is not recognized.
    USB_Disable();
    1590:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <USB_Disable>

    USB_Init();
    1594:	0e 94 c0 0d 	call	0x1b80	; 0x1b80 <USB_Init>
    1598:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
    159c:	84 60       	ori	r24, 0x04	; 4
    159e:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
    setup_usb();
#ifdef SLEEP_LED_ENABLE
    sleep_led_init();
#endif

    sei();
    15a2:	78 94       	sei

    keyboard_init();
    15a4:	0e 94 0b 11 	call	0x2216	; 0x2216 <keyboard_init>

    /* wait for USB startup */
    while (USB_DeviceState != DEVICE_STATE_Configured) {
    15a8:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <USB_DeviceState>
    15ac:	84 30       	cpi	r24, 0x04	; 4
    15ae:	19 f0       	breq	.+6      	; 0x15b6 <main+0x76>
#if defined(INTERRUPT_CONTROL_ENDPOINT)
        ;
#else
        USB_USBTask();
#endif
        matrix_scan();
    15b0:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <matrix_scan>
    15b4:	f9 cf       	rjmp	.-14     	; 0x15a8 <main+0x68>
    }

    hook_late_init();
    15b6:	0e 94 82 0a 	call	0x1504	; 0x1504 <hook_late_init>

    print("\nKeyboard start.\n");
    15ba:	89 ef       	ldi	r24, 0xF9	; 249
    15bc:	91 e0       	ldi	r25, 0x01	; 1
    15be:	0e 94 79 06 	call	0xcf2	; 0xcf2 <xputs>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    15c2:	c4 e0       	ldi	r28, 0x04	; 4
    while (1) {
        while (USB_DeviceState == DEVICE_STATE_Suspended) {
    15c4:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <USB_DeviceState>
    15c8:	85 30       	cpi	r24, 0x05	; 5
    15ca:	19 f4       	brne	.+6      	; 0x15d2 <main+0x92>
#ifdef LUFA_DEBUG
            print("[s]");
#endif
            hook_usb_suspend_loop();
    15cc:	0e 94 94 0a 	call	0x1528	; 0x1528 <hook_usb_suspend_loop>
    15d0:	f9 cf       	rjmp	.-14     	; 0x15c4 <main+0x84>
        }

        keyboard_task();
    15d2:	0e 94 11 11 	call	0x2222	; 0x2222 <keyboard_task>
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    15d6:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <__DATA_REGION_ORIGIN__+0x84>
    15da:	30 91 e5 00 	lds	r19, 0x00E5	; 0x8000e5 <__DATA_REGION_ORIGIN__+0x85>
}

static void console_task(void)
{
    static uint16_t fn = 0;
    if (fn == USB_Device_GetFrameNumber()) {
    15de:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <fn.5009>
    15e2:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <fn.5009+0x1>
    15e6:	28 17       	cp	r18, r24
    15e8:	39 07       	cpc	r19, r25
    15ea:	61 f3       	breq	.-40     	; 0x15c4 <main+0x84>
    15ec:	80 91 e4 00 	lds	r24, 0x00E4	; 0x8000e4 <__DATA_REGION_ORIGIN__+0x84>
    15f0:	90 91 e5 00 	lds	r25, 0x00E5	; 0x8000e5 <__DATA_REGION_ORIGIN__+0x85>
        return;
    }
    fn = USB_Device_GetFrameNumber();
    15f4:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <fn.5009+0x1>
    15f8:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <fn.5009>
    return ringbuf_put(&sendbuf, c);
}

static void console_flush(void)
{
    if (!console_is_ready())
    15fc:	0e 94 09 09 	call	0x1212	; 0x1212 <console_is_ready>
    1600:	88 23       	and	r24, r24
    1602:	01 f3       	breq	.-64     	; 0x15c4 <main+0x84>
        return;

    if (USB_DeviceState != DEVICE_STATE_Configured)
    1604:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <USB_DeviceState>
    1608:	84 30       	cpi	r24, 0x04	; 4
    160a:	e1 f6       	brne	.-72     	; 0x15c4 <main+0x84>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    160c:	80 91 e9 00 	lds	r24, 0x00E9	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
    1610:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1612:	20 91 ec 00 	lds	r18, 0x00EC	; 0x8000ec <__DATA_REGION_ORIGIN__+0x8c>
    1616:	92 2f       	mov	r25, r18
    1618:	91 70       	andi	r25, 0x01	; 1
    161a:	20 fd       	sbrc	r18, 0
    161c:	90 e8       	ldi	r25, 0x80	; 128
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    161e:	89 2b       	or	r24, r25
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1620:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    1624:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__DATA_REGION_ORIGIN__+0x8b>
        return;

    uint8_t ep = Endpoint_GetCurrentEndpoint();

    Endpoint_SelectEndpoint(CONSOLE_IN_EPNUM);
    if (!Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
    1628:	90 ff       	sbrs	r25, 0
    162a:	43 c0       	rjmp	.+134    	; 0x16b2 <main+0x172>
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    162c:	90 91 ee 00 	lds	r25, 0x00EE	; 0x8000ee <__DATA_REGION_ORIGIN__+0x8e>
    1630:	97 ff       	sbrs	r25, 7
    1632:	3f c0       	rjmp	.+126    	; 0x16b2 <main+0x172>
    1634:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <sendbuf+0x3>
        Endpoint_SelectEndpoint(ep);
        return;
    }

    // write from buffer to endpoint bank
    while (!ringbuf_is_empty(&sendbuf) && Endpoint_IsReadWriteAllowed()) {
    1638:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <sendbuf+0x2>
    163c:	29 17       	cp	r18, r25
    163e:	09 f1       	breq	.+66     	; 0x1682 <main+0x142>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1640:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    1644:	25 ff       	sbrs	r18, 5
    1646:	1d c0       	rjmp	.+58     	; 0x1682 <main+0x142>
    buf->size_mask = size - 1;
}
static inline int16_t ringbuf_get(ringbuf_t *buf)
{
    if (ringbuf_is_empty(buf)) return -1;
    uint8_t data = buf->buffer[buf->tail];
    1648:	e0 91 01 01 	lds	r30, 0x0101	; 0x800101 <sendbuf>
    164c:	f0 91 02 01 	lds	r31, 0x0102	; 0x800102 <sendbuf+0x1>
    1650:	e9 0f       	add	r30, r25
    1652:	f1 1d       	adc	r31, r1
    1654:	30 81       	ld	r19, Z
    buf->tail++;
    buf->tail &= buf->size_mask;
    1656:	9f 5f       	subi	r25, 0xFF	; 255
    1658:	20 91 05 01 	lds	r18, 0x0105	; 0x800105 <sendbuf+0x4>
    165c:	92 23       	and	r25, r18
    165e:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <sendbuf+0x3>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1662:	30 93 f1 00 	sts	0x00F1, r19	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1666:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
        Endpoint_Write_8(ringbuf_get(&sendbuf));

        // clear bank when it is full
        if (!Endpoint_IsReadWriteAllowed() && Endpoint_IsINReady()) {
    166a:	95 fd       	sbrc	r25, 5
    166c:	e3 cf       	rjmp	.-58     	; 0x1634 <main+0xf4>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    166e:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    1672:	90 ff       	sbrs	r25, 0
    1674:	df cf       	rjmp	.-66     	; 0x1634 <main+0xf4>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1676:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    167a:	9e 77       	andi	r25, 0x7E	; 126
    167c:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    1680:	d9 cf       	rjmp	.-78     	; 0x1634 <main+0xf4>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    1682:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__DATA_REGION_ORIGIN__+0x93>
    1686:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <__DATA_REGION_ORIGIN__+0x92>
            Endpoint_ClearIN();
        }
    }

    // clear bank when there are chars in bank
    if (Endpoint_BytesInEndpoint() && Endpoint_IsINReady()) {
    168a:	30 e0       	ldi	r19, 0x00	; 0
    168c:	39 2b       	or	r19, r25
    168e:	23 2b       	or	r18, r19
    1690:	81 f0       	breq	.+32     	; 0x16b2 <main+0x172>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1692:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    1696:	90 ff       	sbrs	r25, 0
    1698:	0c c0       	rjmp	.+24     	; 0x16b2 <main+0x172>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    169a:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
        // Windows needs to fill packet with 0
        while (Endpoint_IsReadWriteAllowed()) {
    169e:	95 ff       	sbrs	r25, 5
    16a0:	03 c0       	rjmp	.+6      	; 0x16a8 <main+0x168>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    16a2:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
    16a6:	f9 cf       	rjmp	.-14     	; 0x169a <main+0x15a>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    16a8:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    16ac:	9e 77       	andi	r25, 0x7E	; 126
    16ae:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    16b2:	8f 70       	andi	r24, 0x0F	; 15
    16b4:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
    16b8:	85 cf       	rjmp	.-246    	; 0x15c4 <main+0x84>

000016ba <hook_usb_wakeup>:
}

__attribute__((weak))
void hook_usb_wakeup(void)
{
    suspend_wakeup_init();
    16ba:	0e 94 09 1e 	call	0x3c12	; 0x3c12 <suspend_wakeup_init>
    // Restore LED status
    // BIOS/grub won't recognize/enumerate if led_set() takes long(around 40ms?)
    // Converters fall into the case and miss wakeup event(timeout to reply?) in the end.
    //led_set(host_keyboard_leds());
    // Instead, restore stats and update at keyboard_task() in main loop
    keyboard_led_stats = _led_stats;
    16be:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <_led_stats>
    16c2:	80 93 70 02 	sts	0x0270, r24	; 0x800270 <keyboard_led_stats>
    16c6:	08 95       	ret

000016c8 <EVENT_USB_Device_WakeUp>:
void EVENT_USB_Device_WakeUp()
{
#ifdef LUFA_DEBUG
    print("[W]");
#endif
    hook_usb_wakeup();
    16c8:	0c 94 5d 0b 	jmp	0x16ba	; 0x16ba <hook_usb_wakeup>

000016cc <CALLBACK_USB_GetDescriptor>:
    const uint8_t  DescriptorIndex  = (wValue & 0xFF);

    const void* Address = NULL;
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
    16cc:	29 2f       	mov	r18, r25
    16ce:	33 27       	eor	r19, r19
    16d0:	23 30       	cpi	r18, 0x03	; 3
    16d2:	31 05       	cpc	r19, r1
    16d4:	c9 f0       	breq	.+50     	; 0x1708 <CALLBACK_USB_GetDescriptor+0x3c>
    16d6:	60 f4       	brcc	.+24     	; 0x16f0 <CALLBACK_USB_GetDescriptor+0x24>
    16d8:	21 30       	cpi	r18, 0x01	; 1
    16da:	31 05       	cpc	r19, r1
    16dc:	81 f0       	breq	.+32     	; 0x16fe <CALLBACK_USB_GetDescriptor+0x32>
    16de:	22 30       	cpi	r18, 0x02	; 2
    16e0:	31 05       	cpc	r19, r1
    16e2:	09 f0       	breq	.+2      	; 0x16e6 <CALLBACK_USB_GetDescriptor+0x1a>
    16e4:	41 c0       	rjmp	.+130    	; 0x1768 <CALLBACK_USB_GetDescriptor+0x9c>
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
            break;
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
            Size    = sizeof(USB_Descriptor_Configuration_t);
    16e6:	8d e8       	ldi	r24, 0x8D	; 141
    16e8:	90 e0       	ldi	r25, 0x00	; 0
        case DTYPE_Device:
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
            break;
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
    16ea:	2d e4       	ldi	r18, 0x4D	; 77
    16ec:	32 e0       	ldi	r19, 0x02	; 2
            Size    = sizeof(USB_Descriptor_Configuration_t);
            break;
    16ee:	40 c0       	rjmp	.+128    	; 0x1770 <CALLBACK_USB_GetDescriptor+0xa4>
    const uint8_t  DescriptorIndex  = (wValue & 0xFF);

    const void* Address = NULL;
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
    16f0:	21 32       	cpi	r18, 0x21	; 33
    16f2:	31 05       	cpc	r19, r1
    16f4:	e1 f0       	breq	.+56     	; 0x172e <CALLBACK_USB_GetDescriptor+0x62>
    16f6:	22 32       	cpi	r18, 0x22	; 34
    16f8:	31 05       	cpc	r19, r1
    16fa:	31 f1       	breq	.+76     	; 0x1748 <CALLBACK_USB_GetDescriptor+0x7c>
    16fc:	35 c0       	rjmp	.+106    	; 0x1768 <CALLBACK_USB_GetDescriptor+0x9c>
    {
        case DTYPE_Device:
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
    16fe:	82 e1       	ldi	r24, 0x12	; 18
    1700:	90 e0       	ldi	r25, 0x00	; 0
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
    {
        case DTYPE_Device:
            Address = &DeviceDescriptor;
    1702:	2a ed       	ldi	r18, 0xDA	; 218
    1704:	32 e0       	ldi	r19, 0x02	; 2
    1706:	34 c0       	rjmp	.+104    	; 0x1770 <CALLBACK_USB_GetDescriptor+0xa4>
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
            Size    = sizeof(USB_Descriptor_Configuration_t);
            break;
        case DTYPE_String:
            switch (DescriptorIndex )
    1708:	99 27       	eor	r25, r25
    170a:	81 30       	cpi	r24, 0x01	; 1
    170c:	91 05       	cpc	r25, r1
    170e:	49 f0       	breq	.+18     	; 0x1722 <CALLBACK_USB_GetDescriptor+0x56>
    1710:	28 f0       	brcs	.+10     	; 0x171c <CALLBACK_USB_GetDescriptor+0x50>
    1712:	02 97       	sbiw	r24, 0x02	; 2
    1714:	49 f5       	brne	.+82     	; 0x1768 <CALLBACK_USB_GetDescriptor+0x9c>
                    Address = &ManufacturerString;
                    Size    = pgm_read_byte(&ManufacturerString.Header.Size);
                    break;
                case 0x02:
                    Address = &ProductString;
                    Size    = pgm_read_byte(&ProductString.Header.Size);
    1716:	e3 e2       	ldi	r30, 0x23	; 35
    1718:	f2 e0       	ldi	r31, 0x02	; 2
    171a:	05 c0       	rjmp	.+10     	; 0x1726 <CALLBACK_USB_GetDescriptor+0x5a>
        case DTYPE_String:
            switch (DescriptorIndex )
            {
                case 0x00:
                    Address = &LanguageString;
                    Size    = pgm_read_byte(&LanguageString.Header.Size);
    171c:	e9 e4       	ldi	r30, 0x49	; 73
    171e:	f2 e0       	ldi	r31, 0x02	; 2
    1720:	02 c0       	rjmp	.+4      	; 0x1726 <CALLBACK_USB_GetDescriptor+0x5a>
                    break;
                case 0x01:
                    Address = &ManufacturerString;
                    Size    = pgm_read_byte(&ManufacturerString.Header.Size);
    1722:	e5 e3       	ldi	r30, 0x35	; 53
    1724:	f2 e0       	ldi	r31, 0x02	; 2
                    break;
                case 0x02:
                    Address = &ProductString;
                    Size    = pgm_read_byte(&ProductString.Header.Size);
    1726:	84 91       	lpm	r24, Z
    1728:	90 e0       	ldi	r25, 0x00	; 0
                case 0x01:
                    Address = &ManufacturerString;
                    Size    = pgm_read_byte(&ManufacturerString.Header.Size);
                    break;
                case 0x02:
                    Address = &ProductString;
    172a:	9f 01       	movw	r18, r30
                    Size    = pgm_read_byte(&ProductString.Header.Size);
                    break;
    172c:	21 c0       	rjmp	.+66     	; 0x1770 <CALLBACK_USB_GetDescriptor+0xa4>
    172e:	65 30       	cpi	r22, 0x05	; 5
    1730:	d8 f4       	brcc	.+54     	; 0x1768 <CALLBACK_USB_GetDescriptor+0x9c>
    1732:	e6 2f       	mov	r30, r22
    1734:	f0 e0       	ldi	r31, 0x00	; 0
    1736:	ee 0f       	add	r30, r30
    1738:	ff 1f       	adc	r31, r31
    173a:	e7 5d       	subi	r30, 0xD7	; 215
    173c:	fe 4f       	sbci	r31, 0xFE	; 254
    173e:	20 81       	ld	r18, Z
    1740:	31 81       	ldd	r19, Z+1	; 0x01
    1742:	89 e0       	ldi	r24, 0x09	; 9
    1744:	90 e0       	ldi	r25, 0x00	; 0
    1746:	14 c0       	rjmp	.+40     	; 0x1770 <CALLBACK_USB_GetDescriptor+0xa4>
    1748:	65 30       	cpi	r22, 0x05	; 5
    174a:	70 f4       	brcc	.+28     	; 0x1768 <CALLBACK_USB_GetDescriptor+0x9c>
    174c:	70 e0       	ldi	r23, 0x00	; 0
    174e:	fb 01       	movw	r30, r22
    1750:	ee 0f       	add	r30, r30
    1752:	ff 1f       	adc	r31, r31
    1754:	e1 5e       	subi	r30, 0xE1	; 225
    1756:	fe 4f       	sbci	r31, 0xFE	; 254
    1758:	20 81       	ld	r18, Z
    175a:	31 81       	ldd	r19, Z+1	; 0x01
    175c:	fb 01       	movw	r30, r22
    175e:	e6 5e       	subi	r30, 0xE6	; 230
    1760:	fe 4f       	sbci	r31, 0xFE	; 254
    1762:	80 81       	ld	r24, Z
    1764:	90 e0       	ldi	r25, 0x00	; 0
    1766:	04 c0       	rjmp	.+8      	; 0x1770 <CALLBACK_USB_GetDescriptor+0xa4>
    1768:	80 e0       	ldi	r24, 0x00	; 0
    176a:	90 e0       	ldi	r25, 0x00	; 0
    176c:	20 e0       	ldi	r18, 0x00	; 0
    176e:	30 e0       	ldi	r19, 0x00	; 0
#endif
            }
            break;
    }

    *DescriptorAddress = Address;
    1770:	fa 01       	movw	r30, r20
    1772:	31 83       	std	Z+1, r19	; 0x01
    1774:	20 83       	st	Z, r18
    return Size;
}
    1776:	08 95       	ret

00001778 <USB_Device_SendRemoteWakeup>:

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1778:	80 e1       	ldi	r24, 0x10	; 16
    177a:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    177c:	82 e1       	ldi	r24, 0x12	; 18
    177e:	89 bd       	out	0x29, r24	; 41
void USB_Device_SendRemoteWakeup(void)
{
	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		USB_PLL_On();
		while (!(USB_PLL_IsReady()));
    1780:	09 b4       	in	r0, 0x29	; 41
    1782:	00 fe       	sbrs	r0, 0
    1784:	fd cf       	rjmp	.-6      	; 0x1780 <USB_Device_SendRemoteWakeup+0x8>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1786:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__DATA_REGION_ORIGIN__+0x78>
    178a:	8f 7d       	andi	r24, 0xDF	; 223
    178c:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__DATA_REGION_ORIGIN__+0x78>
	}

	USB_CLK_Unfreeze();

	UDCON |= (1 << RMWKUP);
    1790:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__DATA_REGION_ORIGIN__+0x80>
    1794:	82 60       	ori	r24, 0x02	; 2
    1796:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__DATA_REGION_ORIGIN__+0x80>
	while (UDCON & (1 << RMWKUP));
    179a:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__DATA_REGION_ORIGIN__+0x80>
    179e:	81 fd       	sbrc	r24, 1
    17a0:	fc cf       	rjmp	.-8      	; 0x179a <USB_Device_SendRemoteWakeup+0x22>
}
    17a2:	08 95       	ret

000017a4 <Endpoint_Write_Stream_LE>:
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    17a4:	cf 92       	push	r12
    17a6:	df 92       	push	r13
    17a8:	ef 92       	push	r14
    17aa:	ff 92       	push	r15
    17ac:	0f 93       	push	r16
    17ae:	1f 93       	push	r17
    17b0:	cf 93       	push	r28
    17b2:	df 93       	push	r29
    17b4:	ec 01       	movw	r28, r24
    17b6:	8b 01       	movw	r16, r22
    17b8:	7a 01       	movw	r14, r20
    17ba:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <Endpoint_WaitUntilReady>
    17be:	81 11       	cpse	r24, r1
    17c0:	33 c0       	rjmp	.+102    	; 0x1828 <Endpoint_Write_Stream_LE+0x84>
    17c2:	e1 14       	cp	r14, r1
    17c4:	f1 04       	cpc	r15, r1
    17c6:	39 f0       	breq	.+14     	; 0x17d6 <Endpoint_Write_Stream_LE+0x32>
    17c8:	f7 01       	movw	r30, r14
    17ca:	80 81       	ld	r24, Z
    17cc:	91 81       	ldd	r25, Z+1	; 0x01
    17ce:	08 1b       	sub	r16, r24
    17d0:	19 0b       	sbc	r17, r25
    17d2:	c8 0f       	add	r28, r24
    17d4:	d9 1f       	adc	r29, r25
    17d6:	c1 2c       	mov	r12, r1
    17d8:	d1 2c       	mov	r13, r1
    17da:	01 15       	cp	r16, r1
    17dc:	11 05       	cpc	r17, r1
    17de:	19 f1       	breq	.+70     	; 0x1826 <Endpoint_Write_Stream_LE+0x82>
    17e0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    17e4:	85 fd       	sbrc	r24, 5
    17e6:	16 c0       	rjmp	.+44     	; 0x1814 <Endpoint_Write_Stream_LE+0x70>
    17e8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    17ec:	8e 77       	andi	r24, 0x7E	; 126
    17ee:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    17f2:	e1 14       	cp	r14, r1
    17f4:	f1 04       	cpc	r15, r1
    17f6:	49 f0       	breq	.+18     	; 0x180a <Endpoint_Write_Stream_LE+0x66>
    17f8:	f7 01       	movw	r30, r14
    17fa:	80 81       	ld	r24, Z
    17fc:	91 81       	ldd	r25, Z+1	; 0x01
    17fe:	c8 0e       	add	r12, r24
    1800:	d9 1e       	adc	r13, r25
    1802:	d1 82       	std	Z+1, r13	; 0x01
    1804:	c0 82       	st	Z, r12
    1806:	85 e0       	ldi	r24, 0x05	; 5
    1808:	0f c0       	rjmp	.+30     	; 0x1828 <Endpoint_Write_Stream_LE+0x84>
    180a:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <Endpoint_WaitUntilReady>
    180e:	88 23       	and	r24, r24
    1810:	21 f3       	breq	.-56     	; 0x17da <Endpoint_Write_Stream_LE+0x36>
    1812:	0a c0       	rjmp	.+20     	; 0x1828 <Endpoint_Write_Stream_LE+0x84>
    1814:	89 91       	ld	r24, Y+
    1816:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
    181a:	01 50       	subi	r16, 0x01	; 1
    181c:	11 09       	sbc	r17, r1
    181e:	ff ef       	ldi	r31, 0xFF	; 255
    1820:	cf 1a       	sub	r12, r31
    1822:	df 0a       	sbc	r13, r31
    1824:	da cf       	rjmp	.-76     	; 0x17da <Endpoint_Write_Stream_LE+0x36>
    1826:	80 e0       	ldi	r24, 0x00	; 0
    1828:	df 91       	pop	r29
    182a:	cf 91       	pop	r28
    182c:	1f 91       	pop	r17
    182e:	0f 91       	pop	r16
    1830:	ff 90       	pop	r15
    1832:	ef 90       	pop	r14
    1834:	df 90       	pop	r13
    1836:	cf 90       	pop	r12
    1838:	08 95       	ret

0000183a <Endpoint_Write_Control_Stream_LE>:
    183a:	20 91 28 03 	lds	r18, 0x0328	; 0x800328 <USB_ControlRequest+0x6>
    183e:	30 91 29 03 	lds	r19, 0x0329	; 0x800329 <USB_ControlRequest+0x7>
    1842:	26 17       	cp	r18, r22
    1844:	37 07       	cpc	r19, r23
    1846:	48 f0       	brcs	.+18     	; 0x185a <Endpoint_Write_Control_Stream_LE+0x20>
    1848:	61 15       	cp	r22, r1
    184a:	71 05       	cpc	r23, r1
    184c:	39 f4       	brne	.+14     	; 0x185c <Endpoint_Write_Control_Stream_LE+0x22>
    184e:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    1852:	2e 77       	andi	r18, 0x7E	; 126
    1854:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    1858:	01 c0       	rjmp	.+2      	; 0x185c <Endpoint_Write_Control_Stream_LE+0x22>
    185a:	b9 01       	movw	r22, r18
    185c:	fc 01       	movw	r30, r24
    185e:	20 e0       	ldi	r18, 0x00	; 0
    1860:	61 15       	cp	r22, r1
    1862:	71 05       	cpc	r23, r1
    1864:	79 f1       	breq	.+94     	; 0x18c4 <Endpoint_Write_Control_Stream_LE+0x8a>
    1866:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <USB_DeviceState>
    186a:	88 23       	and	r24, r24
    186c:	f1 f1       	breq	.+124    	; 0x18ea <Endpoint_Write_Control_Stream_LE+0xb0>
    186e:	85 30       	cpi	r24, 0x05	; 5
    1870:	f1 f1       	breq	.+124    	; 0x18ee <Endpoint_Write_Control_Stream_LE+0xb4>
    1872:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    1876:	83 fd       	sbrc	r24, 3
    1878:	3c c0       	rjmp	.+120    	; 0x18f2 <Endpoint_Write_Control_Stream_LE+0xb8>
    187a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    187e:	82 fd       	sbrc	r24, 2
    1880:	2e c0       	rjmp	.+92     	; 0x18de <Endpoint_Write_Control_Stream_LE+0xa4>
    1882:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    1886:	80 ff       	sbrs	r24, 0
    1888:	eb cf       	rjmp	.-42     	; 0x1860 <Endpoint_Write_Control_Stream_LE+0x26>
    188a:	20 91 f3 00 	lds	r18, 0x00F3	; 0x8000f3 <__DATA_REGION_ORIGIN__+0x93>
    188e:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__DATA_REGION_ORIGIN__+0x92>
    1892:	90 e0       	ldi	r25, 0x00	; 0
    1894:	92 2b       	or	r25, r18
    1896:	61 15       	cp	r22, r1
    1898:	71 05       	cpc	r23, r1
    189a:	51 f0       	breq	.+20     	; 0x18b0 <Endpoint_Write_Control_Stream_LE+0x76>
    189c:	88 30       	cpi	r24, 0x08	; 8
    189e:	91 05       	cpc	r25, r1
    18a0:	38 f4       	brcc	.+14     	; 0x18b0 <Endpoint_Write_Control_Stream_LE+0x76>
    18a2:	21 91       	ld	r18, Z+
    18a4:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
    18a8:	61 50       	subi	r22, 0x01	; 1
    18aa:	71 09       	sbc	r23, r1
    18ac:	01 96       	adiw	r24, 0x01	; 1
    18ae:	f3 cf       	rjmp	.-26     	; 0x1896 <Endpoint_Write_Control_Stream_LE+0x5c>
    18b0:	21 e0       	ldi	r18, 0x01	; 1
    18b2:	08 97       	sbiw	r24, 0x08	; 8
    18b4:	09 f0       	breq	.+2      	; 0x18b8 <Endpoint_Write_Control_Stream_LE+0x7e>
    18b6:	20 e0       	ldi	r18, 0x00	; 0
    18b8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    18bc:	8e 77       	andi	r24, 0x7E	; 126
    18be:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    18c2:	ce cf       	rjmp	.-100    	; 0x1860 <Endpoint_Write_Control_Stream_LE+0x26>
    18c4:	21 11       	cpse	r18, r1
    18c6:	cf cf       	rjmp	.-98     	; 0x1866 <Endpoint_Write_Control_Stream_LE+0x2c>
    18c8:	0a c0       	rjmp	.+20     	; 0x18de <Endpoint_Write_Control_Stream_LE+0xa4>
    18ca:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <USB_DeviceState>
    18ce:	88 23       	and	r24, r24
    18d0:	61 f0       	breq	.+24     	; 0x18ea <Endpoint_Write_Control_Stream_LE+0xb0>
    18d2:	85 30       	cpi	r24, 0x05	; 5
    18d4:	61 f0       	breq	.+24     	; 0x18ee <Endpoint_Write_Control_Stream_LE+0xb4>
    18d6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    18da:	83 fd       	sbrc	r24, 3
    18dc:	0a c0       	rjmp	.+20     	; 0x18f2 <Endpoint_Write_Control_Stream_LE+0xb8>
    18de:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    18e2:	82 ff       	sbrs	r24, 2
    18e4:	f2 cf       	rjmp	.-28     	; 0x18ca <Endpoint_Write_Control_Stream_LE+0x90>
    18e6:	80 e0       	ldi	r24, 0x00	; 0
    18e8:	08 95       	ret
    18ea:	82 e0       	ldi	r24, 0x02	; 2
    18ec:	08 95       	ret
    18ee:	83 e0       	ldi	r24, 0x03	; 3
    18f0:	08 95       	ret
    18f2:	81 e0       	ldi	r24, 0x01	; 1
    18f4:	08 95       	ret

000018f6 <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    18f6:	20 91 28 03 	lds	r18, 0x0328	; 0x800328 <USB_ControlRequest+0x6>
    18fa:	30 91 29 03 	lds	r19, 0x0329	; 0x800329 <USB_ControlRequest+0x7>
    18fe:	26 17       	cp	r18, r22
    1900:	37 07       	cpc	r19, r23
    1902:	48 f0       	brcs	.+18     	; 0x1916 <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    1904:	61 15       	cp	r22, r1
    1906:	71 05       	cpc	r23, r1
    1908:	39 f4       	brne	.+14     	; 0x1918 <Endpoint_Write_Control_PStream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    190a:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    190e:	2e 77       	andi	r18, 0x7E	; 126
    1910:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    1914:	01 c0       	rjmp	.+2      	; 0x1918 <Endpoint_Write_Control_PStream_LE+0x22>
    1916:	b9 01       	movw	r22, r18
    1918:	fc 01       	movw	r30, r24
    191a:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    191c:	61 15       	cp	r22, r1
    191e:	71 05       	cpc	r23, r1
    1920:	91 f1       	breq	.+100    	; 0x1986 <Endpoint_Write_Control_PStream_LE+0x90>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1922:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1926:	88 23       	and	r24, r24
    1928:	09 f4       	brne	.+2      	; 0x192c <Endpoint_Write_Control_PStream_LE+0x36>
    192a:	40 c0       	rjmp	.+128    	; 0x19ac <Endpoint_Write_Control_PStream_LE+0xb6>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    192c:	85 30       	cpi	r24, 0x05	; 5
    192e:	09 f4       	brne	.+2      	; 0x1932 <Endpoint_Write_Control_PStream_LE+0x3c>
    1930:	3f c0       	rjmp	.+126    	; 0x19b0 <Endpoint_Write_Control_PStream_LE+0xba>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1932:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1936:	83 fd       	sbrc	r24, 3
    1938:	3d c0       	rjmp	.+122    	; 0x19b4 <Endpoint_Write_Control_PStream_LE+0xbe>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    193a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    193e:	82 fd       	sbrc	r24, 2
    1940:	2f c0       	rjmp	.+94     	; 0x19a0 <Endpoint_Write_Control_PStream_LE+0xaa>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1942:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
		  break;

		if (Endpoint_IsINReady())
    1946:	80 ff       	sbrs	r24, 0
    1948:	e9 cf       	rjmp	.-46     	; 0x191c <Endpoint_Write_Control_PStream_LE+0x26>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    194a:	20 91 f3 00 	lds	r18, 0x00F3	; 0x8000f3 <__DATA_REGION_ORIGIN__+0x93>
    194e:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__DATA_REGION_ORIGIN__+0x92>
    1952:	90 e0       	ldi	r25, 0x00	; 0
    1954:	92 2b       	or	r25, r18
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    1956:	61 15       	cp	r22, r1
    1958:	71 05       	cpc	r23, r1
    195a:	59 f0       	breq	.+22     	; 0x1972 <Endpoint_Write_Control_PStream_LE+0x7c>
    195c:	88 30       	cpi	r24, 0x08	; 8
    195e:	91 05       	cpc	r25, r1
    1960:	40 f4       	brcc	.+16     	; 0x1972 <Endpoint_Write_Control_PStream_LE+0x7c>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    1962:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1964:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    1968:	31 96       	adiw	r30, 0x01	; 1
				Length--;
    196a:	61 50       	subi	r22, 0x01	; 1
    196c:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
    196e:	01 96       	adiw	r24, 0x01	; 1
    1970:	f2 cf       	rjmp	.-28     	; 0x1956 <Endpoint_Write_Control_PStream_LE+0x60>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    1972:	21 e0       	ldi	r18, 0x01	; 1
    1974:	08 97       	sbiw	r24, 0x08	; 8
    1976:	09 f0       	breq	.+2      	; 0x197a <Endpoint_Write_Control_PStream_LE+0x84>
    1978:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    197a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    197e:	8e 77       	andi	r24, 0x7E	; 126
    1980:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    1984:	cb cf       	rjmp	.-106    	; 0x191c <Endpoint_Write_Control_PStream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    1986:	21 11       	cpse	r18, r1
    1988:	cc cf       	rjmp	.-104    	; 0x1922 <Endpoint_Write_Control_PStream_LE+0x2c>
    198a:	0a c0       	rjmp	.+20     	; 0x19a0 <Endpoint_Write_Control_PStream_LE+0xaa>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    198c:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1990:	88 23       	and	r24, r24
    1992:	61 f0       	breq	.+24     	; 0x19ac <Endpoint_Write_Control_PStream_LE+0xb6>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1994:	85 30       	cpi	r24, 0x05	; 5
    1996:	61 f0       	breq	.+24     	; 0x19b0 <Endpoint_Write_Control_PStream_LE+0xba>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1998:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    199c:	83 fd       	sbrc	r24, 3
    199e:	0a c0       	rjmp	.+20     	; 0x19b4 <Endpoint_Write_Control_PStream_LE+0xbe>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    19a0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    19a4:	82 ff       	sbrs	r24, 2
    19a6:	f2 cf       	rjmp	.-28     	; 0x198c <Endpoint_Write_Control_PStream_LE+0x96>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    19a8:	80 e0       	ldi	r24, 0x00	; 0
    19aa:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    19ac:	82 e0       	ldi	r24, 0x02	; 2
    19ae:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    19b0:	83 e0       	ldi	r24, 0x03	; 3
    19b2:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    19b4:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    19b6:	08 95       	ret

000019b8 <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
    19b8:	98 2f       	mov	r25, r24
    19ba:	97 30       	cpi	r25, 0x07	; 7
    19bc:	68 f5       	brcc	.+90     	; 0x1a18 <Endpoint_ConfigureEndpoint_Prv+0x60>
    19be:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
    19c2:	98 17       	cp	r25, r24
    19c4:	39 f0       	breq	.+14     	; 0x19d4 <Endpoint_ConfigureEndpoint_Prv+0x1c>
    19c6:	70 91 ec 00 	lds	r23, 0x00EC	; 0x8000ec <__DATA_REGION_ORIGIN__+0x8c>
    19ca:	20 91 ed 00 	lds	r18, 0x00ED	; 0x8000ed <__DATA_REGION_ORIGIN__+0x8d>
    19ce:	50 91 f0 00 	lds	r21, 0x00F0	; 0x8000f0 <__DATA_REGION_ORIGIN__+0x90>
    19d2:	03 c0       	rjmp	.+6      	; 0x19da <Endpoint_ConfigureEndpoint_Prv+0x22>
    19d4:	24 2f       	mov	r18, r20
    19d6:	76 2f       	mov	r23, r22
    19d8:	50 e0       	ldi	r21, 0x00	; 0
    19da:	21 fd       	sbrc	r18, 1
    19dc:	02 c0       	rjmp	.+4      	; 0x19e2 <Endpoint_ConfigureEndpoint_Prv+0x2a>
    19de:	9f 5f       	subi	r25, 0xFF	; 255
    19e0:	ec cf       	rjmp	.-40     	; 0x19ba <Endpoint_ConfigureEndpoint_Prv+0x2>
    19e2:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__DATA_REGION_ORIGIN__+0x8b>
    19e6:	3e 7f       	andi	r19, 0xFE	; 254
    19e8:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__DATA_REGION_ORIGIN__+0x8b>
    19ec:	30 91 ed 00 	lds	r19, 0x00ED	; 0x8000ed <__DATA_REGION_ORIGIN__+0x8d>
    19f0:	3d 7f       	andi	r19, 0xFD	; 253
    19f2:	30 93 ed 00 	sts	0x00ED, r19	; 0x8000ed <__DATA_REGION_ORIGIN__+0x8d>
    19f6:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__DATA_REGION_ORIGIN__+0x8b>
    19fa:	31 60       	ori	r19, 0x01	; 1
    19fc:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__DATA_REGION_ORIGIN__+0x8b>
    1a00:	70 93 ec 00 	sts	0x00EC, r23	; 0x8000ec <__DATA_REGION_ORIGIN__+0x8c>
    1a04:	20 93 ed 00 	sts	0x00ED, r18	; 0x8000ed <__DATA_REGION_ORIGIN__+0x8d>
    1a08:	50 93 f0 00 	sts	0x00F0, r21	; 0x8000f0 <__DATA_REGION_ORIGIN__+0x90>
    1a0c:	20 91 ee 00 	lds	r18, 0x00EE	; 0x8000ee <__DATA_REGION_ORIGIN__+0x8e>
    1a10:	27 fd       	sbrc	r18, 7
    1a12:	e5 cf       	rjmp	.-54     	; 0x19de <Endpoint_ConfigureEndpoint_Prv+0x26>
    1a14:	80 e0       	ldi	r24, 0x00	; 0
    1a16:	08 95       	ret
    1a18:	8f 70       	andi	r24, 0x0F	; 15
    1a1a:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
    1a1e:	81 e0       	ldi	r24, 0x01	; 1
    1a20:	08 95       	ret

00001a22 <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    1a22:	80 91 22 03 	lds	r24, 0x0322	; 0x800322 <USB_ControlRequest>
    1a26:	87 ff       	sbrs	r24, 7
    1a28:	11 c0       	rjmp	.+34     	; 0x1a4c <Endpoint_ClearStatusStage+0x2a>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1a2a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
	{
		while (!(Endpoint_IsOUTReceived()))
    1a2e:	82 fd       	sbrc	r24, 2
    1a30:	05 c0       	rjmp	.+10     	; 0x1a3c <Endpoint_ClearStatusStage+0x1a>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1a32:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <USB_DeviceState>
    1a36:	81 11       	cpse	r24, r1
    1a38:	f8 cf       	rjmp	.-16     	; 0x1a2a <Endpoint_ClearStatusStage+0x8>
    1a3a:	11 c0       	rjmp	.+34     	; 0x1a5e <Endpoint_ClearStatusStage+0x3c>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1a3c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    1a40:	8b 77       	andi	r24, 0x7B	; 123
    1a42:	0b c0       	rjmp	.+22     	; 0x1a5a <Endpoint_ClearStatusStage+0x38>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1a44:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <USB_DeviceState>
    1a48:	88 23       	and	r24, r24
    1a4a:	49 f0       	breq	.+18     	; 0x1a5e <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1a4c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    1a50:	80 ff       	sbrs	r24, 0
    1a52:	f8 cf       	rjmp	.-16     	; 0x1a44 <Endpoint_ClearStatusStage+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1a54:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    1a58:	8e 77       	andi	r24, 0x7E	; 126
    1a5a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    1a5e:	08 95       	ret

00001a60 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    1a60:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <__DATA_REGION_ORIGIN__+0x84>
    1a64:	30 91 e5 00 	lds	r19, 0x00E5	; 0x8000e5 <__DATA_REGION_ORIGIN__+0x85>
    1a68:	95 e6       	ldi	r25, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1a6a:	40 91 ec 00 	lds	r20, 0x00EC	; 0x8000ec <__DATA_REGION_ORIGIN__+0x8c>
    1a6e:	84 2f       	mov	r24, r20
    1a70:	81 70       	andi	r24, 0x01	; 1
    1a72:	40 ff       	sbrs	r20, 0
    1a74:	23 c0       	rjmp	.+70     	; 0x1abc <Endpoint_WaitUntilReady+0x5c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1a76:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
    1a7a:	80 fd       	sbrc	r24, 0
    1a7c:	1d c0       	rjmp	.+58     	; 0x1ab8 <Endpoint_WaitUntilReady+0x58>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1a7e:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1a82:	88 23       	and	r24, r24
    1a84:	99 f0       	breq	.+38     	; 0x1aac <Endpoint_WaitUntilReady+0x4c>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1a86:	85 30       	cpi	r24, 0x05	; 5
    1a88:	99 f0       	breq	.+38     	; 0x1ab0 <Endpoint_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1a8a:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__DATA_REGION_ORIGIN__+0x8b>
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    1a8e:	85 fd       	sbrc	r24, 5
    1a90:	11 c0       	rjmp	.+34     	; 0x1ab4 <Endpoint_WaitUntilReady+0x54>
    1a92:	40 91 e4 00 	lds	r20, 0x00E4	; 0x8000e4 <__DATA_REGION_ORIGIN__+0x84>
    1a96:	50 91 e5 00 	lds	r21, 0x00E5	; 0x8000e5 <__DATA_REGION_ORIGIN__+0x85>
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    1a9a:	24 17       	cp	r18, r20
    1a9c:	35 07       	cpc	r19, r21
    1a9e:	29 f3       	breq	.-54     	; 0x1a6a <Endpoint_WaitUntilReady+0xa>
    1aa0:	91 50       	subi	r25, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    1aa2:	11 f0       	breq	.+4      	; 0x1aa8 <Endpoint_WaitUntilReady+0x48>
    1aa4:	9a 01       	movw	r18, r20
    1aa6:	e1 cf       	rjmp	.-62     	; 0x1a6a <Endpoint_WaitUntilReady+0xa>
			  return ENDPOINT_READYWAIT_Timeout;
    1aa8:	84 e0       	ldi	r24, 0x04	; 4
    1aaa:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
    1aac:	82 e0       	ldi	r24, 0x02	; 2
    1aae:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
    1ab0:	83 e0       	ldi	r24, 0x03	; 3
    1ab2:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
    1ab4:	81 e0       	ldi	r24, 0x01	; 1
    1ab6:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
    1ab8:	80 e0       	ldi	r24, 0x00	; 0
    1aba:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1abc:	40 91 e8 00 	lds	r20, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    1ac0:	42 ff       	sbrs	r20, 2
    1ac2:	dd cf       	rjmp	.-70     	; 0x1a7e <Endpoint_WaitUntilReady+0x1e>

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
    1ac4:	08 95       	ret

00001ac6 <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
    1ac6:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    1aca:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <USB_INT_ClearAllInterrupts>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
    1ace:	e0 ee       	ldi	r30, 0xE0	; 224
    1ad0:	f0 e0       	ldi	r31, 0x00	; 0
    1ad2:	80 81       	ld	r24, Z
    1ad4:	81 60       	ori	r24, 0x01	; 1
    1ad6:	80 83       	st	Z, r24
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON &= ~(1 << USBE);
    1ad8:	e8 ed       	ldi	r30, 0xD8	; 216
    1ada:	f0 e0       	ldi	r31, 0x00	; 0
    1adc:	80 81       	ld	r24, Z
    1ade:	8f 77       	andi	r24, 0x7F	; 127
    1ae0:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1ae2:	19 bc       	out	0x29, r1	; 41

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON &= ~(1 << UVREGE);
    1ae4:	a7 ed       	ldi	r26, 0xD7	; 215
    1ae6:	b0 e0       	ldi	r27, 0x00	; 0
    1ae8:	8c 91       	ld	r24, X
    1aea:	8e 7f       	andi	r24, 0xFE	; 254
    1aec:	8c 93       	st	X, r24
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    1aee:	80 81       	ld	r24, Z
    1af0:	8f 7e       	andi	r24, 0xEF	; 239
    1af2:	80 83       	st	Z, r24

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
    1af4:	10 92 20 03 	sts	0x0320, r1	; 0x800320 <USB_IsInitialized>
    1af8:	08 95       	ret

00001afa <USB_ResetInterface>:
}

void USB_ResetInterface(void)
{
    1afa:	0f 93       	push	r16
    1afc:	1f 93       	push	r17
    1afe:	cf 93       	push	r28
    1b00:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    1b02:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    1b06:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    1b0a:	c8 ed       	ldi	r28, 0xD8	; 216
    1b0c:	d0 e0       	ldi	r29, 0x00	; 0
    1b0e:	88 81       	ld	r24, Y
    1b10:	8f 77       	andi	r24, 0x7F	; 127
    1b12:	88 83       	st	Y, r24
				USBCON |=  (1 << USBE);
    1b14:	88 81       	ld	r24, Y
    1b16:	80 68       	ori	r24, 0x80	; 128
    1b18:	88 83       	st	Y, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1b1a:	88 81       	ld	r24, Y
    1b1c:	8f 7d       	andi	r24, 0xDF	; 223
    1b1e:	88 83       	st	Y, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1b20:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    1b22:	10 92 21 03 	sts	0x0321, r1	; 0x800321 <USB_DeviceState>
	USB_Device_ConfigurationNumber  = 0;
    1b26:	10 92 1d 03 	sts	0x031D, r1	; 0x80031d <USB_Device_ConfigurationNumber>

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
    1b2a:	10 92 1f 03 	sts	0x031F, r1	; 0x80031f <USB_Device_RemoteWakeupEnabled>
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
    1b2e:	10 92 1e 03 	sts	0x031E, r1	; 0x80031e <USB_Device_CurrentlySelfPowered>
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
    1b32:	00 ee       	ldi	r16, 0xE0	; 224
    1b34:	10 e0       	ldi	r17, 0x00	; 0
    1b36:	f8 01       	movw	r30, r16
    1b38:	80 81       	ld	r24, Z
    1b3a:	8b 7f       	andi	r24, 0xFB	; 251
    1b3c:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
    1b3e:	88 81       	ld	r24, Y
    1b40:	81 60       	ori	r24, 0x01	; 1
    1b42:	88 83       	st	Y, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1b44:	42 e0       	ldi	r20, 0x02	; 2
    1b46:	60 e0       	ldi	r22, 0x00	; 0
    1b48:	80 e0       	ldi	r24, 0x00	; 0
    1b4a:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    1b4e:	e1 ee       	ldi	r30, 0xE1	; 225
    1b50:	f0 e0       	ldi	r31, 0x00	; 0
    1b52:	80 81       	ld	r24, Z
    1b54:	8e 7f       	andi	r24, 0xFE	; 254
    1b56:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    1b58:	e2 ee       	ldi	r30, 0xE2	; 226
    1b5a:	f0 e0       	ldi	r31, 0x00	; 0
    1b5c:	80 81       	ld	r24, Z
    1b5e:	81 60       	ori	r24, 0x01	; 1
    1b60:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
    1b62:	80 81       	ld	r24, Z
    1b64:	88 60       	ori	r24, 0x08	; 8
    1b66:	80 83       	st	Z, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    1b68:	f8 01       	movw	r30, r16
    1b6a:	80 81       	ld	r24, Z
    1b6c:	8e 7f       	andi	r24, 0xFE	; 254
    1b6e:	80 83       	st	Z, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    1b70:	88 81       	ld	r24, Y
    1b72:	80 61       	ori	r24, 0x10	; 16
    1b74:	88 83       	st	Y, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    1b76:	df 91       	pop	r29
    1b78:	cf 91       	pop	r28
    1b7a:	1f 91       	pop	r17
    1b7c:	0f 91       	pop	r16
    1b7e:	08 95       	ret

00001b80 <USB_Init>:
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    1b80:	e8 ed       	ldi	r30, 0xD8	; 216
    1b82:	f0 e0       	ldi	r31, 0x00	; 0
    1b84:	80 81       	ld	r24, Z
    1b86:	8f 7e       	andi	r24, 0xEF	; 239
    1b88:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
    1b8a:	e7 ed       	ldi	r30, 0xD7	; 215
    1b8c:	f0 e0       	ldi	r31, 0x00	; 0
    1b8e:	80 81       	ld	r24, Z
    1b90:	81 60       	ori	r24, 0x01	; 1
    1b92:	80 83       	st	Z, r24
	  USB_REG_Off();

	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = (1 << PDIV2);
    1b94:	84 e0       	ldi	r24, 0x04	; 4
    1b96:	82 bf       	out	0x32, r24	; 50
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    1b98:	81 e0       	ldi	r24, 0x01	; 1
    1b9a:	80 93 20 03 	sts	0x0320, r24	; 0x800320 <USB_IsInitialized>

	USB_ResetInterface();
    1b9e:	0c 94 7d 0d 	jmp	0x1afa	; 0x1afa <USB_ResetInterface>

00001ba2 <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
    1ba2:	e8 ed       	ldi	r30, 0xD8	; 216
    1ba4:	f0 e0       	ldi	r31, 0x00	; 0
    1ba6:	80 81       	ld	r24, Z
    1ba8:	8e 7f       	andi	r24, 0xFE	; 254
    1baa:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    1bac:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
    1bb0:	08 95       	ret

00001bb2 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    1bb2:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <__DATA_REGION_ORIGIN__+0x7a>
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    1bb6:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>
    1bba:	08 95       	ret

00001bbc <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
    1bbc:	1f 92       	push	r1
    1bbe:	0f 92       	push	r0
    1bc0:	0f b6       	in	r0, 0x3f	; 63
    1bc2:	0f 92       	push	r0
    1bc4:	11 24       	eor	r1, r1
    1bc6:	2f 93       	push	r18
    1bc8:	3f 93       	push	r19
    1bca:	4f 93       	push	r20
    1bcc:	5f 93       	push	r21
    1bce:	6f 93       	push	r22
    1bd0:	7f 93       	push	r23
    1bd2:	8f 93       	push	r24
    1bd4:	9f 93       	push	r25
    1bd6:	af 93       	push	r26
    1bd8:	bf 93       	push	r27
    1bda:	ef 93       	push	r30
    1bdc:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
    1bde:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    1be2:	82 ff       	sbrs	r24, 2
    1be4:	0b c0       	rjmp	.+22     	; 0x1bfc <__vector_10+0x40>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
    1be6:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
    1bea:	82 ff       	sbrs	r24, 2
    1bec:	07 c0       	rjmp	.+14     	; 0x1bfc <__vector_10+0x40>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
    1bee:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>
    1bf2:	8b 7f       	andi	r24, 0xFB	; 251
    1bf4:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    1bf8:	0e 94 b6 09 	call	0x136c	; 0x136c <EVENT_USB_Device_StartOfFrame>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
    1bfc:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__DATA_REGION_ORIGIN__+0x7a>
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    1c00:	80 ff       	sbrs	r24, 0
    1c02:	1f c0       	rjmp	.+62     	; 0x1c42 <__vector_10+0x86>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
    1c04:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__DATA_REGION_ORIGIN__+0x78>
    1c08:	80 ff       	sbrs	r24, 0
    1c0a:	1b c0       	rjmp	.+54     	; 0x1c42 <__vector_10+0x86>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
    1c0c:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__DATA_REGION_ORIGIN__+0x7a>
    1c10:	8e 7f       	andi	r24, 0xFE	; 254
    1c12:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__DATA_REGION_ORIGIN__+0x7a>
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
    1c16:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__DATA_REGION_ORIGIN__+0x79>
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    1c1a:	80 ff       	sbrs	r24, 0
    1c1c:	0d c0       	rjmp	.+26     	; 0x1c38 <__vector_10+0x7c>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1c1e:	80 e1       	ldi	r24, 0x10	; 16
    1c20:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1c22:	82 e1       	ldi	r24, 0x12	; 18
    1c24:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    1c26:	09 b4       	in	r0, 0x29	; 41
    1c28:	00 fe       	sbrs	r0, 0
    1c2a:	fd cf       	rjmp	.-6      	; 0x1c26 <__vector_10+0x6a>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    1c2c:	81 e0       	ldi	r24, 0x01	; 1
    1c2e:	80 93 21 03 	sts	0x0321, r24	; 0x800321 <USB_DeviceState>
			EVENT_USB_Device_Connect();
    1c32:	0e 94 9c 09 	call	0x1338	; 0x1338 <EVENT_USB_Device_Connect>
    1c36:	05 c0       	rjmp	.+10     	; 0x1c42 <__vector_10+0x86>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1c38:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
    1c3a:	10 92 21 03 	sts	0x0321, r1	; 0x800321 <USB_DeviceState>
			EVENT_USB_Device_Disconnect();
    1c3e:	0e 94 ae 09 	call	0x135c	; 0x135c <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    1c42:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    1c46:	80 ff       	sbrs	r24, 0
    1c48:	19 c0       	rjmp	.+50     	; 0x1c7c <__vector_10+0xc0>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    1c4a:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
    1c4e:	80 ff       	sbrs	r24, 0
    1c50:	15 c0       	rjmp	.+42     	; 0x1c7c <__vector_10+0xc0>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    1c52:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
    1c56:	8e 7f       	andi	r24, 0xFE	; 254
    1c58:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    1c5c:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
    1c60:	80 61       	ori	r24, 0x10	; 16
    1c62:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
    1c66:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__DATA_REGION_ORIGIN__+0x78>
    1c6a:	80 62       	ori	r24, 0x20	; 32
    1c6c:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__DATA_REGION_ORIGIN__+0x78>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1c70:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    1c72:	85 e0       	ldi	r24, 0x05	; 5
    1c74:	80 93 21 03 	sts	0x0321, r24	; 0x800321 <USB_DeviceState>
		EVENT_USB_Device_Suspend();
    1c78:	0e 94 92 0a 	call	0x1524	; 0x1524 <EVENT_USB_Device_Suspend>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    1c7c:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    1c80:	84 ff       	sbrs	r24, 4
    1c82:	30 c0       	rjmp	.+96     	; 0x1ce4 <__vector_10+0x128>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    1c84:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
    1c88:	84 ff       	sbrs	r24, 4
    1c8a:	2c c0       	rjmp	.+88     	; 0x1ce4 <__vector_10+0x128>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1c8c:	80 e1       	ldi	r24, 0x10	; 16
    1c8e:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1c90:	82 e1       	ldi	r24, 0x12	; 18
    1c92:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    1c94:	09 b4       	in	r0, 0x29	; 41
    1c96:	00 fe       	sbrs	r0, 0
    1c98:	fd cf       	rjmp	.-6      	; 0x1c94 <__vector_10+0xd8>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1c9a:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__DATA_REGION_ORIGIN__+0x78>
    1c9e:	8f 7d       	andi	r24, 0xDF	; 223
    1ca0:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__DATA_REGION_ORIGIN__+0x78>
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    1ca4:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>
    1ca8:	8f 7e       	andi	r24, 0xEF	; 239
    1caa:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    1cae:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
    1cb2:	8f 7e       	andi	r24, 0xEF	; 239
    1cb4:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    1cb8:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
    1cbc:	81 60       	ori	r24, 0x01	; 1
    1cbe:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    1cc2:	80 91 1d 03 	lds	r24, 0x031D	; 0x80031d <USB_Device_ConfigurationNumber>
    1cc6:	88 23       	and	r24, r24
    1cc8:	11 f0       	breq	.+4      	; 0x1cce <__vector_10+0x112>
		  USB_DeviceState = DEVICE_STATE_Configured;
    1cca:	84 e0       	ldi	r24, 0x04	; 4
    1ccc:	07 c0       	rjmp	.+14     	; 0x1cdc <__vector_10+0x120>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    1cce:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__DATA_REGION_ORIGIN__+0x83>
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    1cd2:	87 fd       	sbrc	r24, 7
    1cd4:	02 c0       	rjmp	.+4      	; 0x1cda <__vector_10+0x11e>
    1cd6:	81 e0       	ldi	r24, 0x01	; 1
    1cd8:	01 c0       	rjmp	.+2      	; 0x1cdc <__vector_10+0x120>
    1cda:	83 e0       	ldi	r24, 0x03	; 3
    1cdc:	80 93 21 03 	sts	0x0321, r24	; 0x800321 <USB_DeviceState>

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    1ce0:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <EVENT_USB_Device_WakeUp>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    1ce4:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    1ce8:	83 ff       	sbrs	r24, 3
    1cea:	29 c0       	rjmp	.+82     	; 0x1d3e <__vector_10+0x182>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    1cec:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
    1cf0:	83 ff       	sbrs	r24, 3
    1cf2:	25 c0       	rjmp	.+74     	; 0x1d3e <__vector_10+0x182>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    1cf4:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>
    1cf8:	87 7f       	andi	r24, 0xF7	; 247
    1cfa:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    1cfe:	82 e0       	ldi	r24, 0x02	; 2
    1d00:	80 93 21 03 	sts	0x0321, r24	; 0x800321 <USB_DeviceState>
		USB_Device_ConfigurationNumber = 0;
    1d04:	10 92 1d 03 	sts	0x031D, r1	; 0x80031d <USB_Device_ConfigurationNumber>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    1d08:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>
    1d0c:	8e 7f       	andi	r24, 0xFE	; 254
    1d0e:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    1d12:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
    1d16:	8e 7f       	andi	r24, 0xFE	; 254
    1d18:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    1d1c:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
    1d20:	80 61       	ori	r24, 0x10	; 16
    1d22:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1d26:	42 e0       	ldi	r20, 0x02	; 2
    1d28:	60 e0       	ldi	r22, 0x00	; 0
    1d2a:	80 e0       	ldi	r24, 0x00	; 0
    1d2c:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <Endpoint_ConfigureEndpoint_Prv>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    1d30:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__DATA_REGION_ORIGIN__+0x90>
    1d34:	88 60       	ori	r24, 0x08	; 8
    1d36:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__DATA_REGION_ORIGIN__+0x90>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    1d3a:	0e 94 b5 09 	call	0x136a	; 0x136a <EVENT_USB_Device_Reset>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    1d3e:	ff 91       	pop	r31
    1d40:	ef 91       	pop	r30
    1d42:	bf 91       	pop	r27
    1d44:	af 91       	pop	r26
    1d46:	9f 91       	pop	r25
    1d48:	8f 91       	pop	r24
    1d4a:	7f 91       	pop	r23
    1d4c:	6f 91       	pop	r22
    1d4e:	5f 91       	pop	r21
    1d50:	4f 91       	pop	r20
    1d52:	3f 91       	pop	r19
    1d54:	2f 91       	pop	r18
    1d56:	0f 90       	pop	r0
    1d58:	0f be       	out	0x3f, r0	; 63
    1d5a:	0f 90       	pop	r0
    1d5c:	1f 90       	pop	r1
    1d5e:	18 95       	reti

00001d60 <__vector_11>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
    1d60:	1f 92       	push	r1
    1d62:	0f 92       	push	r0
    1d64:	0f b6       	in	r0, 0x3f	; 63
    1d66:	0f 92       	push	r0
    1d68:	11 24       	eor	r1, r1
    1d6a:	2f 93       	push	r18
    1d6c:	3f 93       	push	r19
    1d6e:	4f 93       	push	r20
    1d70:	5f 93       	push	r21
    1d72:	6f 93       	push	r22
    1d74:	7f 93       	push	r23
    1d76:	8f 93       	push	r24
    1d78:	9f 93       	push	r25
    1d7a:	af 93       	push	r26
    1d7c:	bf 93       	push	r27
    1d7e:	cf 93       	push	r28
    1d80:	df 93       	push	r29
    1d82:	ef 93       	push	r30
    1d84:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1d86:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
    1d8a:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1d8c:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__DATA_REGION_ORIGIN__+0x8c>
    1d90:	d8 2f       	mov	r29, r24
    1d92:	d1 70       	andi	r29, 0x01	; 1
    1d94:	80 fd       	sbrc	r24, 0
    1d96:	d0 e8       	ldi	r29, 0x80	; 128
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1d98:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
    1d9c:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__DATA_REGION_ORIGIN__+0x90>
    1da0:	87 7f       	andi	r24, 0xF7	; 247
    1da2:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__DATA_REGION_ORIGIN__+0x90>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
    1da6:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
    1da8:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <USB_Device_ProcessControlRequest>
    1dac:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    1db0:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__DATA_REGION_ORIGIN__+0x90>
    1db4:	88 60       	ori	r24, 0x08	; 8
    1db6:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__DATA_REGION_ORIGIN__+0x90>
    1dba:	cd 2b       	or	r28, r29
    1dbc:	cf 70       	andi	r28, 0x0F	; 15
    1dbe:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
    1dc2:	ff 91       	pop	r31
    1dc4:	ef 91       	pop	r30
    1dc6:	df 91       	pop	r29
    1dc8:	cf 91       	pop	r28
    1dca:	bf 91       	pop	r27
    1dcc:	af 91       	pop	r26
    1dce:	9f 91       	pop	r25
    1dd0:	8f 91       	pop	r24
    1dd2:	7f 91       	pop	r23
    1dd4:	6f 91       	pop	r22
    1dd6:	5f 91       	pop	r21
    1dd8:	4f 91       	pop	r20
    1dda:	3f 91       	pop	r19
    1ddc:	2f 91       	pop	r18
    1dde:	0f 90       	pop	r0
    1de0:	0f be       	out	0x3f, r0	; 63
    1de2:	0f 90       	pop	r0
    1de4:	1f 90       	pop	r1
    1de6:	18 95       	reti

00001de8 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    1de8:	1f 93       	push	r17
    1dea:	cf 93       	push	r28
    1dec:	df 93       	push	r29
    1dee:	cd b7       	in	r28, 0x3d	; 61
    1df0:	de b7       	in	r29, 0x3e	; 62
    1df2:	aa 97       	sbiw	r28, 0x2a	; 42
    1df4:	0f b6       	in	r0, 0x3f	; 63
    1df6:	f8 94       	cli
    1df8:	de bf       	out	0x3e, r29	; 62
    1dfa:	0f be       	out	0x3f, r0	; 63
    1dfc:	cd bf       	out	0x3d, r28	; 61
    1dfe:	e2 e2       	ldi	r30, 0x22	; 34
    1e00:	f3 e0       	ldi	r31, 0x03	; 3
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1e02:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    1e06:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    1e08:	23 e0       	ldi	r18, 0x03	; 3
    1e0a:	ea 32       	cpi	r30, 0x2A	; 42
    1e0c:	f2 07       	cpc	r31, r18
    1e0e:	c9 f7       	brne	.-14     	; 0x1e02 <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    1e10:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1e14:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

	if (Endpoint_IsSETUPReceived())
    1e18:	83 ff       	sbrs	r24, 3
    1e1a:	24 c1       	rjmp	.+584    	; 0x2064 <USB_Device_ProcessControlRequest+0x27c>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    1e1c:	80 91 22 03 	lds	r24, 0x0322	; 0x800322 <USB_ControlRequest>

		switch (USB_ControlRequest.bRequest)
    1e20:	90 91 23 03 	lds	r25, 0x0323	; 0x800323 <USB_ControlRequest+0x1>
    1e24:	49 2f       	mov	r20, r25
    1e26:	50 e0       	ldi	r21, 0x00	; 0
    1e28:	4a 30       	cpi	r20, 0x0A	; 10
    1e2a:	51 05       	cpc	r21, r1
    1e2c:	08 f0       	brcs	.+2      	; 0x1e30 <USB_Device_ProcessControlRequest+0x48>
    1e2e:	1a c1       	rjmp	.+564    	; 0x2064 <USB_Device_ProcessControlRequest+0x27c>
    1e30:	fa 01       	movw	r30, r20
    1e32:	ea 5a       	subi	r30, 0xAA	; 170
    1e34:	ff 4f       	sbci	r31, 0xFF	; 255
    1e36:	0c 94 e0 2a 	jmp	0x55c0	; 0x55c0 <__tablejump2__>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1e3a:	80 38       	cpi	r24, 0x80	; 128
    1e3c:	81 f0       	breq	.+32     	; 0x1e5e <USB_Device_ProcessControlRequest+0x76>
    1e3e:	82 38       	cpi	r24, 0x82	; 130
    1e40:	09 f0       	breq	.+2      	; 0x1e44 <USB_Device_ProcessControlRequest+0x5c>
    1e42:	10 c1       	rjmp	.+544    	; 0x2064 <USB_Device_ProcessControlRequest+0x27c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1e44:	80 91 26 03 	lds	r24, 0x0326	; 0x800326 <USB_ControlRequest+0x4>
    1e48:	8f 70       	andi	r24, 0x0F	; 15
    1e4a:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1e4e:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__DATA_REGION_ORIGIN__+0x8b>
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);

			CurrentStatus = Endpoint_IsStalled();
    1e52:	85 fb       	bst	r24, 5
    1e54:	88 27       	eor	r24, r24
    1e56:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1e58:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
    1e5c:	06 c0       	rjmp	.+12     	; 0x1e6a <USB_Device_ProcessControlRequest+0x82>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
    1e5e:	80 91 1e 03 	lds	r24, 0x031E	; 0x80031e <USB_Device_CurrentlySelfPowered>
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    1e62:	90 91 1f 03 	lds	r25, 0x031F	; 0x80031f <USB_Device_RemoteWakeupEnabled>
    1e66:	91 11       	cpse	r25, r1
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    1e68:	82 60       	ori	r24, 0x02	; 2
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1e6a:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    1e6e:	97 7f       	andi	r25, 0xF7	; 247
    1e70:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    1e74:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
				UEDATX = (Data >> 8);
    1e78:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
    1e7c:	c8 c0       	rjmp	.+400    	; 0x200e <USB_Device_ProcessControlRequest+0x226>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1e7e:	28 2f       	mov	r18, r24
    1e80:	2d 7f       	andi	r18, 0xFD	; 253
    1e82:	09 f0       	breq	.+2      	; 0x1e86 <USB_Device_ProcessControlRequest+0x9e>
    1e84:	ef c0       	rjmp	.+478    	; 0x2064 <USB_Device_ProcessControlRequest+0x27c>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    1e86:	88 23       	and	r24, r24
    1e88:	19 f0       	breq	.+6      	; 0x1e90 <USB_Device_ProcessControlRequest+0xa8>
    1e8a:	82 30       	cpi	r24, 0x02	; 2
    1e8c:	61 f0       	breq	.+24     	; 0x1ea6 <USB_Device_ProcessControlRequest+0xbe>
    1e8e:	ea c0       	rjmp	.+468    	; 0x2064 <USB_Device_ProcessControlRequest+0x27c>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    1e90:	80 91 24 03 	lds	r24, 0x0324	; 0x800324 <USB_ControlRequest+0x2>
    1e94:	81 30       	cpi	r24, 0x01	; 1
    1e96:	09 f0       	breq	.+2      	; 0x1e9a <USB_Device_ProcessControlRequest+0xb2>
    1e98:	e5 c0       	rjmp	.+458    	; 0x2064 <USB_Device_ProcessControlRequest+0x27c>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    1e9a:	93 30       	cpi	r25, 0x03	; 3
    1e9c:	09 f0       	breq	.+2      	; 0x1ea0 <USB_Device_ProcessControlRequest+0xb8>
    1e9e:	80 e0       	ldi	r24, 0x00	; 0
    1ea0:	80 93 1f 03 	sts	0x031F, r24	; 0x80031f <USB_Device_RemoteWakeupEnabled>
    1ea4:	2b c0       	rjmp	.+86     	; 0x1efc <USB_Device_ProcessControlRequest+0x114>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    1ea6:	80 91 24 03 	lds	r24, 0x0324	; 0x800324 <USB_ControlRequest+0x2>
    1eaa:	81 11       	cpse	r24, r1
    1eac:	27 c0       	rjmp	.+78     	; 0x1efc <USB_Device_ProcessControlRequest+0x114>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    1eae:	80 91 26 03 	lds	r24, 0x0326	; 0x800326 <USB_ControlRequest+0x4>
    1eb2:	8f 70       	andi	r24, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    1eb4:	09 f4       	brne	.+2      	; 0x1eb8 <USB_Device_ProcessControlRequest+0xd0>
    1eb6:	d6 c0       	rjmp	.+428    	; 0x2064 <USB_Device_ProcessControlRequest+0x27c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1eb8:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    1ebc:	20 91 eb 00 	lds	r18, 0x00EB	; 0x8000eb <__DATA_REGION_ORIGIN__+0x8b>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    1ec0:	20 ff       	sbrs	r18, 0
    1ec2:	1c c0       	rjmp	.+56     	; 0x1efc <USB_Device_ProcessControlRequest+0x114>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    1ec4:	93 30       	cpi	r25, 0x03	; 3
    1ec6:	21 f4       	brne	.+8      	; 0x1ed0 <USB_Device_ProcessControlRequest+0xe8>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1ec8:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__DATA_REGION_ORIGIN__+0x8b>
    1ecc:	80 62       	ori	r24, 0x20	; 32
    1ece:	14 c0       	rjmp	.+40     	; 0x1ef8 <USB_Device_ProcessControlRequest+0x110>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    1ed0:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__DATA_REGION_ORIGIN__+0x8b>
    1ed4:	90 61       	ori	r25, 0x10	; 16
    1ed6:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__DATA_REGION_ORIGIN__+0x8b>
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    1eda:	21 e0       	ldi	r18, 0x01	; 1
    1edc:	30 e0       	ldi	r19, 0x00	; 0
    1ede:	a9 01       	movw	r20, r18
    1ee0:	02 c0       	rjmp	.+4      	; 0x1ee6 <USB_Device_ProcessControlRequest+0xfe>
    1ee2:	44 0f       	add	r20, r20
    1ee4:	55 1f       	adc	r21, r21
    1ee6:	8a 95       	dec	r24
    1ee8:	e2 f7       	brpl	.-8      	; 0x1ee2 <USB_Device_ProcessControlRequest+0xfa>
    1eea:	40 93 ea 00 	sts	0x00EA, r20	; 0x8000ea <__DATA_REGION_ORIGIN__+0x8a>
				UERST = 0;
    1eee:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__DATA_REGION_ORIGIN__+0x8a>

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    1ef2:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__DATA_REGION_ORIGIN__+0x8b>
    1ef6:	88 60       	ori	r24, 0x08	; 8
    1ef8:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__DATA_REGION_ORIGIN__+0x8b>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1efc:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1f00:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    1f04:	87 7f       	andi	r24, 0xF7	; 247
    1f06:	86 c0       	rjmp	.+268    	; 0x2014 <USB_Device_ProcessControlRequest+0x22c>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    1f08:	81 11       	cpse	r24, r1
    1f0a:	ac c0       	rjmp	.+344    	; 0x2064 <USB_Device_ProcessControlRequest+0x27c>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    1f0c:	10 91 24 03 	lds	r17, 0x0324	; 0x800324 <USB_ControlRequest+0x2>
    1f10:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    1f12:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__DATA_REGION_ORIGIN__+0x83>
    1f16:	80 78       	andi	r24, 0x80	; 128
    1f18:	81 2b       	or	r24, r17
    1f1a:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__DATA_REGION_ORIGIN__+0x83>
    1f1e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    1f22:	87 7f       	andi	r24, 0xF7	; 247
    1f24:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    1f28:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1f2c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

	while (!(Endpoint_IsINReady()));
    1f30:	80 ff       	sbrs	r24, 0
    1f32:	fc cf       	rjmp	.-8      	; 0x1f2c <USB_Device_ProcessControlRequest+0x144>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
    1f34:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__DATA_REGION_ORIGIN__+0x83>
    1f38:	80 68       	ori	r24, 0x80	; 128
    1f3a:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__DATA_REGION_ORIGIN__+0x83>

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    1f3e:	11 11       	cpse	r17, r1
    1f40:	02 c0       	rjmp	.+4      	; 0x1f46 <USB_Device_ProcessControlRequest+0x15e>
    1f42:	82 e0       	ldi	r24, 0x02	; 2
    1f44:	01 c0       	rjmp	.+2      	; 0x1f48 <USB_Device_ProcessControlRequest+0x160>
    1f46:	83 e0       	ldi	r24, 0x03	; 3
    1f48:	80 93 21 03 	sts	0x0321, r24	; 0x800321 <USB_DeviceState>
    1f4c:	8b c0       	rjmp	.+278    	; 0x2064 <USB_Device_ProcessControlRequest+0x27c>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1f4e:	80 58       	subi	r24, 0x80	; 128
    1f50:	82 30       	cpi	r24, 0x02	; 2
    1f52:	08 f0       	brcs	.+2      	; 0x1f56 <USB_Device_ProcessControlRequest+0x16e>
    1f54:	87 c0       	rjmp	.+270    	; 0x2064 <USB_Device_ProcessControlRequest+0x27c>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    1f56:	80 91 24 03 	lds	r24, 0x0324	; 0x800324 <USB_ControlRequest+0x2>
    1f5a:	90 91 25 03 	lds	r25, 0x0325	; 0x800325 <USB_ControlRequest+0x3>
    1f5e:	8c 3d       	cpi	r24, 0xDC	; 220
    1f60:	53 e0       	ldi	r21, 0x03	; 3
    1f62:	95 07       	cpc	r25, r21
    1f64:	79 f5       	brne	.+94     	; 0x1fc4 <USB_Device_ProcessControlRequest+0x1dc>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    1f66:	83 e0       	ldi	r24, 0x03	; 3
    1f68:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    1f6a:	8a e2       	ldi	r24, 0x2A	; 42
    1f6c:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    1f6e:	4f b7       	in	r20, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    1f70:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
    1f72:	de 01       	movw	r26, r28
    1f74:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    1f76:	20 e0       	ldi	r18, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    1f78:	3e e0       	ldi	r19, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    1f7a:	51 e2       	ldi	r21, 0x21	; 33
    1f7c:	e3 2f       	mov	r30, r19
    1f7e:	f0 e0       	ldi	r31, 0x00	; 0
    1f80:	50 93 57 00 	sts	0x0057, r21	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
    1f84:	e4 91       	lpm	r30, Z

					if (SerialCharNum & 0x01)
    1f86:	20 ff       	sbrs	r18, 0
    1f88:	03 c0       	rjmp	.+6      	; 0x1f90 <USB_Device_ProcessControlRequest+0x1a8>
					{
						SerialByte >>= 4;
    1f8a:	e2 95       	swap	r30
    1f8c:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
    1f8e:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    1f90:	ef 70       	andi	r30, 0x0F	; 15
    1f92:	8e 2f       	mov	r24, r30
    1f94:	90 e0       	ldi	r25, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    1f96:	ea 30       	cpi	r30, 0x0A	; 10
    1f98:	10 f0       	brcs	.+4      	; 0x1f9e <USB_Device_ProcessControlRequest+0x1b6>
    1f9a:	c7 96       	adiw	r24, 0x37	; 55
    1f9c:	01 c0       	rjmp	.+2      	; 0x1fa0 <USB_Device_ProcessControlRequest+0x1b8>
    1f9e:	c0 96       	adiw	r24, 0x30	; 48
    1fa0:	8d 93       	st	X+, r24
    1fa2:	9d 93       	st	X+, r25
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    1fa4:	2f 5f       	subi	r18, 0xFF	; 255
    1fa6:	24 31       	cpi	r18, 0x14	; 20
    1fa8:	49 f7       	brne	.-46     	; 0x1f7c <USB_Device_ProcessControlRequest+0x194>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    1faa:	4f bf       	out	0x3f, r20	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1fac:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    1fb0:	87 7f       	andi	r24, 0xF7	; 247
    1fb2:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    1fb6:	6a e2       	ldi	r22, 0x2A	; 42
    1fb8:	70 e0       	ldi	r23, 0x00	; 0
    1fba:	ce 01       	movw	r24, r28
    1fbc:	01 96       	adiw	r24, 0x01	; 1
    1fbe:	0e 94 1d 0c 	call	0x183a	; 0x183a <Endpoint_Write_Control_Stream_LE>
    1fc2:	14 c0       	rjmp	.+40     	; 0x1fec <USB_Device_ProcessControlRequest+0x204>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    1fc4:	ae 01       	movw	r20, r28
    1fc6:	4f 5f       	subi	r20, 0xFF	; 255
    1fc8:	5f 4f       	sbci	r21, 0xFF	; 255
    1fca:	60 91 26 03 	lds	r22, 0x0326	; 0x800326 <USB_ControlRequest+0x4>
    1fce:	0e 94 66 0b 	call	0x16cc	; 0x16cc <CALLBACK_USB_GetDescriptor>
    1fd2:	bc 01       	movw	r22, r24
    1fd4:	89 2b       	or	r24, r25
    1fd6:	09 f4       	brne	.+2      	; 0x1fda <USB_Device_ProcessControlRequest+0x1f2>
    1fd8:	45 c0       	rjmp	.+138    	; 0x2064 <USB_Device_ProcessControlRequest+0x27c>
    1fda:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    1fde:	97 7f       	andi	r25, 0xF7	; 247
    1fe0:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    1fe4:	89 81       	ldd	r24, Y+1	; 0x01
    1fe6:	9a 81       	ldd	r25, Y+2	; 0x02
    1fe8:	0e 94 7b 0c 	call	0x18f6	; 0x18f6 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1fec:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    1ff0:	8b 77       	andi	r24, 0x7B	; 123
    1ff2:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    1ff6:	36 c0       	rjmp	.+108    	; 0x2064 <USB_Device_ProcessControlRequest+0x27c>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    1ff8:	80 38       	cpi	r24, 0x80	; 128
    1ffa:	a1 f5       	brne	.+104    	; 0x2064 <USB_Device_ProcessControlRequest+0x27c>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1ffc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    2000:	87 7f       	andi	r24, 0xF7	; 247
    2002:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    2006:	80 91 1d 03 	lds	r24, 0x031D	; 0x80031d <USB_Device_ConfigurationNumber>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    200a:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    200e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    2012:	8e 77       	andi	r24, 0x7E	; 126
    2014:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    2018:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <Endpoint_ClearStatusStage>
    201c:	23 c0       	rjmp	.+70     	; 0x2064 <USB_Device_ProcessControlRequest+0x27c>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    201e:	81 11       	cpse	r24, r1
    2020:	21 c0       	rjmp	.+66     	; 0x2064 <USB_Device_ProcessControlRequest+0x27c>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    2022:	80 91 24 03 	lds	r24, 0x0324	; 0x800324 <USB_ControlRequest+0x2>
    2026:	90 91 25 03 	lds	r25, 0x0325	; 0x800325 <USB_ControlRequest+0x3>
    202a:	99 27       	eor	r25, r25
    202c:	02 97       	sbiw	r24, 0x02	; 2
    202e:	d4 f4       	brge	.+52     	; 0x2064 <USB_Device_ProcessControlRequest+0x27c>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2030:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    2034:	87 7f       	andi	r24, 0xF7	; 247
    2036:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    203a:	80 91 24 03 	lds	r24, 0x0324	; 0x800324 <USB_ControlRequest+0x2>
    203e:	80 93 1d 03 	sts	0x031D, r24	; 0x80031d <USB_Device_ConfigurationNumber>

	Endpoint_ClearStatusStage();
    2042:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
    2046:	80 91 1d 03 	lds	r24, 0x031D	; 0x80031d <USB_Device_ConfigurationNumber>
    204a:	81 11       	cpse	r24, r1
    204c:	06 c0       	rjmp	.+12     	; 0x205a <USB_Device_ProcessControlRequest+0x272>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    204e:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__DATA_REGION_ORIGIN__+0x83>
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    2052:	87 fd       	sbrc	r24, 7
    2054:	02 c0       	rjmp	.+4      	; 0x205a <USB_Device_ProcessControlRequest+0x272>
    2056:	81 e0       	ldi	r24, 0x01	; 1
    2058:	01 c0       	rjmp	.+2      	; 0x205c <USB_Device_ProcessControlRequest+0x274>
    205a:	84 e0       	ldi	r24, 0x04	; 4
    205c:	80 93 21 03 	sts	0x0321, r24	; 0x800321 <USB_DeviceState>

	EVENT_USB_Device_ConfigurationChanged();
    2060:	0e 94 b7 09 	call	0x136e	; 0x136e <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    2064:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    2068:	83 ff       	sbrs	r24, 3
    206a:	0a c0       	rjmp	.+20     	; 0x2080 <USB_Device_ProcessControlRequest+0x298>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    206c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    2070:	87 7f       	andi	r24, 0xF7	; 247
    2072:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    2076:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__DATA_REGION_ORIGIN__+0x8b>
    207a:	80 62       	ori	r24, 0x20	; 32
    207c:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__DATA_REGION_ORIGIN__+0x8b>
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    2080:	aa 96       	adiw	r28, 0x2a	; 42
    2082:	0f b6       	in	r0, 0x3f	; 63
    2084:	f8 94       	cli
    2086:	de bf       	out	0x3e, r29	; 62
    2088:	0f be       	out	0x3f, r0	; 63
    208a:	cd bf       	out	0x3d, r28	; 61
    208c:	df 91       	pop	r29
    208e:	cf 91       	pop	r28
    2090:	1f 91       	pop	r17
    2092:	08 95       	ret

00002094 <host_set_driver>:
}

host_driver_t *host_get_driver(void)
{
    return driver;
}
    2094:	90 93 77 02 	sts	0x0277, r25	; 0x800277 <driver+0x1>
    2098:	80 93 76 02 	sts	0x0276, r24	; 0x800276 <driver>
    209c:	08 95       	ret

0000209e <host_keyboard_leds>:

uint8_t host_keyboard_leds(void)
{
    if (!driver) return 0;
    209e:	e0 91 76 02 	lds	r30, 0x0276	; 0x800276 <driver>
    20a2:	f0 91 77 02 	lds	r31, 0x0277	; 0x800277 <driver+0x1>
    20a6:	30 97       	sbiw	r30, 0x00	; 0
    20a8:	21 f0       	breq	.+8      	; 0x20b2 <host_keyboard_leds+0x14>
    return (*driver->keyboard_leds)();
    20aa:	01 90       	ld	r0, Z+
    20ac:	f0 81       	ld	r31, Z
    20ae:	e0 2d       	mov	r30, r0
    20b0:	09 94       	ijmp
}
    20b2:	80 e0       	ldi	r24, 0x00	; 0
    20b4:	08 95       	ret

000020b6 <host_keyboard_send>:
/* send report */
void host_keyboard_send(report_keyboard_t *report)
{
    20b6:	ef 92       	push	r14
    20b8:	ff 92       	push	r15
    20ba:	0f 93       	push	r16
    20bc:	1f 93       	push	r17
    20be:	cf 93       	push	r28
    20c0:	df 93       	push	r29
    if (!driver) return;
    20c2:	e0 91 76 02 	lds	r30, 0x0276	; 0x800276 <driver>
    20c6:	f0 91 77 02 	lds	r31, 0x0277	; 0x800277 <driver+0x1>
    20ca:	30 97       	sbiw	r30, 0x00	; 0
    20cc:	b1 f1       	breq	.+108    	; 0x213a <host_keyboard_send+0x84>
    20ce:	8c 01       	movw	r16, r24
    (*driver->send_keyboard)(report);
    20d0:	02 80       	ldd	r0, Z+2	; 0x02
    20d2:	f3 81       	ldd	r31, Z+3	; 0x03
    20d4:	e0 2d       	mov	r30, r0
    20d6:	09 95       	icall

    if (debug_keyboard) {
    20d8:	80 91 0c 03 	lds	r24, 0x030C	; 0x80030c <debug_config>
    20dc:	82 ff       	sbrs	r24, 2
    20de:	2d c0       	rjmp	.+90     	; 0x213a <host_keyboard_send+0x84>
        dprint("keyboard: ");
    20e0:	80 ff       	sbrs	r24, 0
    20e2:	04 c0       	rjmp	.+8      	; 0x20ec <host_keyboard_send+0x36>
    20e4:	80 e3       	ldi	r24, 0x30	; 48
    20e6:	94 e0       	ldi	r25, 0x04	; 4
    20e8:	0e 94 79 06 	call	0xcf2	; 0xcf2 <xputs>
    20ec:	e8 01       	movw	r28, r16
    if (!driver) return 0;
    return (*driver->keyboard_leds)();
}
/* send report */
void host_keyboard_send(report_keyboard_t *report)
{
    20ee:	10 e2       	ldi	r17, 0x20	; 32
    (*driver->send_keyboard)(report);

    if (debug_keyboard) {
        dprint("keyboard: ");
        for (uint8_t i = 0; i < KEYBOARD_REPORT_SIZE; i++) {
            dprintf("%02X ", report->raw[i]);
    20f0:	8a e2       	ldi	r24, 0x2A	; 42
    20f2:	e8 2e       	mov	r14, r24
    20f4:	84 e0       	ldi	r24, 0x04	; 4
    20f6:	f8 2e       	mov	r15, r24
    20f8:	80 91 0c 03 	lds	r24, 0x030C	; 0x80030c <debug_config>
    20fc:	80 ff       	sbrs	r24, 0
    20fe:	0b c0       	rjmp	.+22     	; 0x2116 <host_keyboard_send+0x60>
    2100:	88 81       	ld	r24, Y
    2102:	1f 92       	push	r1
    2104:	8f 93       	push	r24
    2106:	ff 92       	push	r15
    2108:	ef 92       	push	r14
    210a:	0e 94 12 07 	call	0xe24	; 0xe24 <__xprintf>
    210e:	0f 90       	pop	r0
    2110:	0f 90       	pop	r0
    2112:	0f 90       	pop	r0
    2114:	0f 90       	pop	r0
    2116:	11 50       	subi	r17, 0x01	; 1
    2118:	21 96       	adiw	r28, 0x01	; 1
    if (!driver) return;
    (*driver->send_keyboard)(report);

    if (debug_keyboard) {
        dprint("keyboard: ");
        for (uint8_t i = 0; i < KEYBOARD_REPORT_SIZE; i++) {
    211a:	11 11       	cpse	r17, r1
    211c:	ed cf       	rjmp	.-38     	; 0x20f8 <host_keyboard_send+0x42>
            dprintf("%02X ", report->raw[i]);
        }
        dprint("\n");
    211e:	80 91 0c 03 	lds	r24, 0x030C	; 0x80030c <debug_config>
    2122:	80 ff       	sbrs	r24, 0
    2124:	0a c0       	rjmp	.+20     	; 0x213a <host_keyboard_send+0x84>
    2126:	88 e2       	ldi	r24, 0x28	; 40
    2128:	94 e0       	ldi	r25, 0x04	; 4
    }
}
    212a:	df 91       	pop	r29
    212c:	cf 91       	pop	r28
    212e:	1f 91       	pop	r17
    2130:	0f 91       	pop	r16
    2132:	ff 90       	pop	r15
    2134:	ef 90       	pop	r14
    if (debug_keyboard) {
        dprint("keyboard: ");
        for (uint8_t i = 0; i < KEYBOARD_REPORT_SIZE; i++) {
            dprintf("%02X ", report->raw[i]);
        }
        dprint("\n");
    2136:	0c 94 79 06 	jmp	0xcf2	; 0xcf2 <xputs>
    }
}
    213a:	df 91       	pop	r29
    213c:	cf 91       	pop	r28
    213e:	1f 91       	pop	r17
    2140:	0f 91       	pop	r16
    2142:	ff 90       	pop	r15
    2144:	ef 90       	pop	r14
    2146:	08 95       	ret

00002148 <host_mouse_send>:

void host_mouse_send(report_mouse_t *report)
{
    if (!driver) return;
    2148:	e0 91 76 02 	lds	r30, 0x0276	; 0x800276 <driver>
    214c:	f0 91 77 02 	lds	r31, 0x0277	; 0x800277 <driver+0x1>
    2150:	30 97       	sbiw	r30, 0x00	; 0
    2152:	21 f0       	breq	.+8      	; 0x215c <host_mouse_send+0x14>
    (*driver->send_mouse)(report);
    2154:	04 80       	ldd	r0, Z+4	; 0x04
    2156:	f5 81       	ldd	r31, Z+5	; 0x05
    2158:	e0 2d       	mov	r30, r0
    215a:	09 94       	ijmp
    215c:	08 95       	ret

0000215e <host_system_send>:
}

void host_system_send(uint16_t report)
{
    215e:	cf 93       	push	r28
    2160:	df 93       	push	r29
    if (report == last_system_report) return;
    2162:	20 91 74 02 	lds	r18, 0x0274	; 0x800274 <last_system_report>
    2166:	30 91 75 02 	lds	r19, 0x0275	; 0x800275 <last_system_report+0x1>
    216a:	28 17       	cp	r18, r24
    216c:	39 07       	cpc	r19, r25
    216e:	09 f1       	breq	.+66     	; 0x21b2 <host_system_send+0x54>
    last_system_report = report;
    2170:	90 93 75 02 	sts	0x0275, r25	; 0x800275 <last_system_report+0x1>
    2174:	80 93 74 02 	sts	0x0274, r24	; 0x800274 <last_system_report>

    if (!driver) return;
    2178:	e0 91 76 02 	lds	r30, 0x0276	; 0x800276 <driver>
    217c:	f0 91 77 02 	lds	r31, 0x0277	; 0x800277 <driver+0x1>
    2180:	30 97       	sbiw	r30, 0x00	; 0
    2182:	b9 f0       	breq	.+46     	; 0x21b2 <host_system_send+0x54>
    2184:	ec 01       	movw	r28, r24
    (*driver->send_system)(report);
    2186:	06 80       	ldd	r0, Z+6	; 0x06
    2188:	f7 81       	ldd	r31, Z+7	; 0x07
    218a:	e0 2d       	mov	r30, r0
    218c:	09 95       	icall

    if (debug_keyboard) {
    218e:	80 91 0c 03 	lds	r24, 0x030C	; 0x80030c <debug_config>
    2192:	82 ff       	sbrs	r24, 2
    2194:	0e c0       	rjmp	.+28     	; 0x21b2 <host_system_send+0x54>
        dprintf("system: %04X\n", report);
    2196:	80 ff       	sbrs	r24, 0
    2198:	0c c0       	rjmp	.+24     	; 0x21b2 <host_system_send+0x54>
    219a:	df 93       	push	r29
    219c:	cf 93       	push	r28
    219e:	8a e1       	ldi	r24, 0x1A	; 26
    21a0:	94 e0       	ldi	r25, 0x04	; 4
    21a2:	9f 93       	push	r25
    21a4:	8f 93       	push	r24
    21a6:	0e 94 12 07 	call	0xe24	; 0xe24 <__xprintf>
    21aa:	0f 90       	pop	r0
    21ac:	0f 90       	pop	r0
    21ae:	0f 90       	pop	r0
    21b0:	0f 90       	pop	r0
    }
}
    21b2:	df 91       	pop	r29
    21b4:	cf 91       	pop	r28
    21b6:	08 95       	ret

000021b8 <host_consumer_send>:

void host_consumer_send(uint16_t report)
{
    21b8:	cf 93       	push	r28
    21ba:	df 93       	push	r29
    if (report == last_consumer_report) return;
    21bc:	20 91 72 02 	lds	r18, 0x0272	; 0x800272 <last_consumer_report>
    21c0:	30 91 73 02 	lds	r19, 0x0273	; 0x800273 <last_consumer_report+0x1>
    21c4:	28 17       	cp	r18, r24
    21c6:	39 07       	cpc	r19, r25
    21c8:	09 f1       	breq	.+66     	; 0x220c <host_consumer_send+0x54>
    last_consumer_report = report;
    21ca:	90 93 73 02 	sts	0x0273, r25	; 0x800273 <last_consumer_report+0x1>
    21ce:	80 93 72 02 	sts	0x0272, r24	; 0x800272 <last_consumer_report>

    if (!driver) return;
    21d2:	e0 91 76 02 	lds	r30, 0x0276	; 0x800276 <driver>
    21d6:	f0 91 77 02 	lds	r31, 0x0277	; 0x800277 <driver+0x1>
    21da:	30 97       	sbiw	r30, 0x00	; 0
    21dc:	b9 f0       	breq	.+46     	; 0x220c <host_consumer_send+0x54>
    21de:	ec 01       	movw	r28, r24
    (*driver->send_consumer)(report);
    21e0:	00 84       	ldd	r0, Z+8	; 0x08
    21e2:	f1 85       	ldd	r31, Z+9	; 0x09
    21e4:	e0 2d       	mov	r30, r0
    21e6:	09 95       	icall

    if (debug_keyboard) {
    21e8:	80 91 0c 03 	lds	r24, 0x030C	; 0x80030c <debug_config>
    21ec:	82 ff       	sbrs	r24, 2
    21ee:	0e c0       	rjmp	.+28     	; 0x220c <host_consumer_send+0x54>
        dprintf("consumer: %04X\n", report);
    21f0:	80 ff       	sbrs	r24, 0
    21f2:	0c c0       	rjmp	.+24     	; 0x220c <host_consumer_send+0x54>
    21f4:	df 93       	push	r29
    21f6:	cf 93       	push	r28
    21f8:	8a e0       	ldi	r24, 0x0A	; 10
    21fa:	94 e0       	ldi	r25, 0x04	; 4
    21fc:	9f 93       	push	r25
    21fe:	8f 93       	push	r24
    2200:	0e 94 12 07 	call	0xe24	; 0xe24 <__xprintf>
    2204:	0f 90       	pop	r0
    2206:	0f 90       	pop	r0
    2208:	0f 90       	pop	r0
    220a:	0f 90       	pop	r0
    }
}
    220c:	df 91       	pop	r29
    220e:	cf 91       	pop	r28
    2210:	08 95       	ret

00002212 <keyboard_setup>:
#endif


void keyboard_setup(void)
{
    matrix_setup();
    2212:	0c 94 b7 11 	jmp	0x236e	; 0x236e <matrix_setup>

00002216 <keyboard_init>:
}

void keyboard_init(void)
{
    timer_init();
    2216:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <timer_init>
    matrix_init();
    221a:	0e 94 42 07 	call	0xe84	; 0xe84 <matrix_init>
    adb_mouse_init();
#endif


#ifdef BOOTMAGIC_ENABLE
    bootmagic();
    221e:	0c 94 3c 20 	jmp	0x4078	; 0x4078 <bootmagic>

00002222 <keyboard_task>:
/*
 * Do keyboard routine jobs: scan matrix, light LEDs, ...
 * This is repeatedly called as fast as possible.
 */
void keyboard_task(void)
{
    2222:	bf 92       	push	r11
    2224:	cf 92       	push	r12
    2226:	df 92       	push	r13
    2228:	ef 92       	push	r14
    222a:	ff 92       	push	r15
    222c:	0f 93       	push	r16
    222e:	1f 93       	push	r17
    2230:	cf 93       	push	r28
    2232:	df 93       	push	r29
    2234:	00 d0       	rcall	.+0      	; 0x2236 <keyboard_task+0x14>
    2236:	00 d0       	rcall	.+0      	; 0x2238 <keyboard_task+0x16>
    2238:	1f 92       	push	r1
    223a:	cd b7       	in	r28, 0x3d	; 61
    223c:	de b7       	in	r29, 0x3e	; 62
#endif
    static uint8_t led_status = 0;
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    223e:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <matrix_scan>
    2242:	09 e7       	ldi	r16, 0x79	; 121
    2244:	12 e0       	ldi	r17, 0x02	; 2
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    2246:	f1 2c       	mov	r15, r1
        matrix_row = matrix_get_row(r);
    2248:	8f 2d       	mov	r24, r15
    224a:	0e 94 18 08 	call	0x1030	; 0x1030 <matrix_get_row>
    224e:	b8 2e       	mov	r11, r24
        matrix_change = matrix_row ^ matrix_prev[r];
    2250:	f8 01       	movw	r30, r16
    2252:	c0 80       	ld	r12, Z
    2254:	c8 26       	eor	r12, r24
        if (matrix_change) {
    2256:	39 f4       	brne	.+14     	; 0x2266 <keyboard_task+0x44>
    static uint8_t led_status = 0;
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    2258:	f3 94       	inc	r15
    225a:	0f 5f       	subi	r16, 0xFF	; 255
    225c:	1f 4f       	sbci	r17, 0xFF	; 255
    225e:	f6 e0       	ldi	r31, 0x06	; 6
    2260:	ff 12       	cpse	r15, r31
    2262:	f2 cf       	rjmp	.-28     	; 0x2248 <keyboard_task+0x26>
    2264:	30 c0       	rjmp	.+96     	; 0x22c6 <keyboard_task+0xa4>
                matrix_ghost[r] = matrix_row;
                continue;
            }
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
    2266:	80 91 0c 03 	lds	r24, 0x030C	; 0x80030c <debug_config>
    226a:	81 fd       	sbrc	r24, 1
    226c:	0e 94 b8 11 	call	0x2370	; 0x2370 <matrix_print>
    static uint8_t led_status = 0;
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    2270:	d1 2c       	mov	r13, r1
    2272:	ee 24       	eor	r14, r14
    2274:	e3 94       	inc	r14
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            matrix_row_t col_mask = 1;
            for (uint8_t c = 0; c < MATRIX_COLS; c++, col_mask <<= 1) {
                if (matrix_change & col_mask) {
    2276:	8c 2d       	mov	r24, r12
    2278:	8e 21       	and	r24, r14
    227a:	f9 f0       	breq	.+62     	; 0x22ba <keyboard_task+0x98>
                    keyevent_t e = (keyevent_t){
    227c:	d9 82       	std	Y+1, r13	; 0x01
    227e:	fa 82       	std	Y+2, r15	; 0x02
    2280:	91 e0       	ldi	r25, 0x01	; 1
    2282:	8b 2d       	mov	r24, r11
    2284:	8e 21       	and	r24, r14
    2286:	09 f4       	brne	.+2      	; 0x228a <keyboard_task+0x68>
    2288:	90 e0       	ldi	r25, 0x00	; 0
    228a:	9b 83       	std	Y+3, r25	; 0x03
                        .key = (keypos_t){ .row = r, .col = c },
                        .pressed = (matrix_row & col_mask),
                        .time = (timer_read() | 1) /* time should not be 0 */
    228c:	0e 94 3f 1e 	call	0x3c7e	; 0x3c7e <timer_read>
#endif
            if (debug_matrix) matrix_print();
            matrix_row_t col_mask = 1;
            for (uint8_t c = 0; c < MATRIX_COLS; c++, col_mask <<= 1) {
                if (matrix_change & col_mask) {
                    keyevent_t e = (keyevent_t){
    2290:	81 60       	ori	r24, 0x01	; 1
    2292:	78 2f       	mov	r23, r24
    2294:	9d 83       	std	Y+5, r25	; 0x05
    2296:	8c 83       	std	Y+4, r24	; 0x04
                        .key = (keypos_t){ .row = r, .col = c },
                        .pressed = (matrix_row & col_mask),
                        .time = (timer_read() | 1) /* time should not be 0 */
                    };
                    action_exec(e);
    2298:	49 81       	ldd	r20, Y+1	; 0x01
    229a:	5a 81       	ldd	r21, Y+2	; 0x02
    229c:	6b 81       	ldd	r22, Y+3	; 0x03
    229e:	8d 81       	ldd	r24, Y+5	; 0x05
    22a0:	0e 94 ee 11 	call	0x23dc	; 0x23dc <action_exec>
                    hook_matrix_change(e);
    22a4:	49 81       	ldd	r20, Y+1	; 0x01
    22a6:	5a 81       	ldd	r21, Y+2	; 0x02
    22a8:	6b 81       	ldd	r22, Y+3	; 0x03
    22aa:	7c 81       	ldd	r23, Y+4	; 0x04
    22ac:	8d 81       	ldd	r24, Y+5	; 0x05
    22ae:	0e 94 b8 1d 	call	0x3b70	; 0x3b70 <hook_matrix_change>
                    // record a processed key
                    matrix_prev[r] ^= col_mask;
    22b2:	f8 01       	movw	r30, r16
    22b4:	80 81       	ld	r24, Z
    22b6:	8e 25       	eor	r24, r14
    22b8:	80 83       	st	Z, r24
            }
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            matrix_row_t col_mask = 1;
            for (uint8_t c = 0; c < MATRIX_COLS; c++, col_mask <<= 1) {
    22ba:	d3 94       	inc	r13
    22bc:	ee 0c       	add	r14, r14
    22be:	f7 e0       	ldi	r31, 0x07	; 7
    22c0:	df 12       	cpse	r13, r31
    22c2:	d9 cf       	rjmp	.-78     	; 0x2276 <keyboard_task+0x54>
    22c4:	c9 cf       	rjmp	.-110    	; 0x2258 <keyboard_task+0x36>
                }
            }
        }
    }
    // call with pseudo tick event when no real key event.
    action_exec(TICK);
    22c6:	8f ef       	ldi	r24, 0xFF	; 255
    22c8:	89 83       	std	Y+1, r24	; 0x01
    22ca:	8a 83       	std	Y+2, r24	; 0x02
    22cc:	1b 82       	std	Y+3, r1	; 0x03
    22ce:	0e 94 3f 1e 	call	0x3c7e	; 0x3c7e <timer_read>
    22d2:	81 60       	ori	r24, 0x01	; 1
    22d4:	78 2f       	mov	r23, r24
    22d6:	9d 83       	std	Y+5, r25	; 0x05
    22d8:	8c 83       	std	Y+4, r24	; 0x04
    22da:	49 81       	ldd	r20, Y+1	; 0x01
    22dc:	5a 81       	ldd	r21, Y+2	; 0x02
    22de:	6b 81       	ldd	r22, Y+3	; 0x03
    22e0:	8d 81       	ldd	r24, Y+5	; 0x05
    22e2:	0e 94 ee 11 	call	0x23dc	; 0x23dc <action_exec>

//MATRIX_LOOP_END:

    hook_keyboard_loop();
    22e6:	0e 94 b7 1d 	call	0x3b6e	; 0x3b6e <hook_keyboard_loop>

#ifdef MOUSEKEY_ENABLE
    // mousekey repeat & acceleration
    mousekey_task();
    22ea:	0e 94 c6 23 	call	0x478c	; 0x478c <mousekey_task>
#ifdef ADB_MOUSE_ENABLE
        adb_mouse_task();
#endif

    // update LED
    if (led_status != host_keyboard_leds()) {
    22ee:	0e 94 4f 10 	call	0x209e	; 0x209e <host_keyboard_leds>
    22f2:	90 91 78 02 	lds	r25, 0x0278	; 0x800278 <led_status.4977>
    22f6:	89 17       	cp	r24, r25
    22f8:	41 f1       	breq	.+80     	; 0x234a <keyboard_task+0x128>
        led_status = host_keyboard_leds();
    22fa:	0e 94 4f 10 	call	0x209e	; 0x209e <host_keyboard_leds>
    22fe:	80 93 78 02 	sts	0x0278, r24	; 0x800278 <led_status.4977>
        if (debug_keyboard) dprintf("LED: %02X\n", led_status);
    2302:	90 91 0c 03 	lds	r25, 0x030C	; 0x80030c <debug_config>
    2306:	92 ff       	sbrs	r25, 2
    2308:	0e c0       	rjmp	.+28     	; 0x2326 <keyboard_task+0x104>
    230a:	90 ff       	sbrs	r25, 0
    230c:	0c c0       	rjmp	.+24     	; 0x2326 <keyboard_task+0x104>
    230e:	1f 92       	push	r1
    2310:	8f 93       	push	r24
    2312:	8b e3       	ldi	r24, 0x3B	; 59
    2314:	94 e0       	ldi	r25, 0x04	; 4
    2316:	9f 93       	push	r25
    2318:	8f 93       	push	r24
    231a:	0e 94 12 07 	call	0xe24	; 0xe24 <__xprintf>
    231e:	0f 90       	pop	r0
    2320:	0f 90       	pop	r0
    2322:	0f 90       	pop	r0
    2324:	0f 90       	pop	r0
        hook_keyboard_leds_change(led_status);
    2326:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <led_status.4977>
    }
}
    232a:	0f 90       	pop	r0
    232c:	0f 90       	pop	r0
    232e:	0f 90       	pop	r0
    2330:	0f 90       	pop	r0
    2332:	0f 90       	pop	r0
    2334:	df 91       	pop	r29
    2336:	cf 91       	pop	r28
    2338:	1f 91       	pop	r17
    233a:	0f 91       	pop	r16
    233c:	ff 90       	pop	r15
    233e:	ef 90       	pop	r14
    2340:	df 90       	pop	r13
    2342:	cf 90       	pop	r12
    2344:	bf 90       	pop	r11

    // update LED
    if (led_status != host_keyboard_leds()) {
        led_status = host_keyboard_leds();
        if (debug_keyboard) dprintf("LED: %02X\n", led_status);
        hook_keyboard_leds_change(led_status);
    2346:	0c 94 c9 1d 	jmp	0x3b92	; 0x3b92 <hook_keyboard_leds_change>
    }
}
    234a:	0f 90       	pop	r0
    234c:	0f 90       	pop	r0
    234e:	0f 90       	pop	r0
    2350:	0f 90       	pop	r0
    2352:	0f 90       	pop	r0
    2354:	df 91       	pop	r29
    2356:	cf 91       	pop	r28
    2358:	1f 91       	pop	r17
    235a:	0f 91       	pop	r16
    235c:	ff 90       	pop	r15
    235e:	ef 90       	pop	r14
    2360:	df 90       	pop	r13
    2362:	cf 90       	pop	r12
    2364:	bf 90       	pop	r11
    2366:	08 95       	ret

00002368 <keyboard_set_leds>:

void keyboard_set_leds(uint8_t leds)
{
    led_set(leds);
    2368:	0c 94 1e 08 	jmp	0x103c	; 0x103c <led_set>

0000236c <matrix_clear>:
    236c:	08 95       	ret

0000236e <matrix_setup>:
    236e:	08 95       	ret

00002370 <matrix_print>:
    return (matrix_get_row(row) & (1<<col));
}

__attribute__ ((weak))
void matrix_print(void)
{
    2370:	ef 92       	push	r14
    2372:	ff 92       	push	r15
    2374:	0f 93       	push	r16
    2376:	1f 93       	push	r17
    2378:	cf 93       	push	r28
    237a:	df 93       	push	r29
#if (MATRIX_COLS <= 8)
    print("r/c 01234567\n");
    237c:	84 e5       	ldi	r24, 0x54	; 84
    237e:	94 e0       	ldi	r25, 0x04	; 4
    2380:	0e 94 79 06 	call	0xcf2	; 0xcf2 <xputs>
    2384:	c0 e0       	ldi	r28, 0x00	; 0
    2386:	d0 e0       	ldi	r29, 0x00	; 0
#endif

    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {

#if (MATRIX_COLS <= 8)
        xprintf("%02X: %08b%s\n", row, bitrev(matrix_get_row(row)),
    2388:	83 e3       	ldi	r24, 0x33	; 51
    238a:	e8 2e       	mov	r14, r24
    238c:	81 e0       	ldi	r24, 0x01	; 1
    238e:	f8 2e       	mov	r15, r24
    2390:	06 e4       	ldi	r16, 0x46	; 70
    2392:	14 e0       	ldi	r17, 0x04	; 4
    2394:	8c 2f       	mov	r24, r28
    2396:	0e 94 18 08 	call	0x1030	; 0x1030 <matrix_get_row>
    239a:	0e 94 a5 1d 	call	0x3b4a	; 0x3b4a <bitrev>
    239e:	ff 92       	push	r15
    23a0:	ef 92       	push	r14
    23a2:	1f 92       	push	r1
    23a4:	8f 93       	push	r24
    23a6:	df 93       	push	r29
    23a8:	cf 93       	push	r28
    23aa:	1f 93       	push	r17
    23ac:	0f 93       	push	r16
    23ae:	0e 94 12 07 	call	0xe24	; 0xe24 <__xprintf>
    23b2:	21 96       	adiw	r28, 0x01	; 1
    print("r/c 0123456789ABCDEF\n");
#elif (MATRIX_COLS <= 32)
    print("r/c 0123456789ABCDEF0123456789ABCDEF\n");
#endif

    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
    23b4:	8d b7       	in	r24, 0x3d	; 61
    23b6:	9e b7       	in	r25, 0x3e	; 62
    23b8:	08 96       	adiw	r24, 0x08	; 8
    23ba:	0f b6       	in	r0, 0x3f	; 63
    23bc:	f8 94       	cli
    23be:	9e bf       	out	0x3e, r25	; 62
    23c0:	0f be       	out	0x3f, r0	; 63
    23c2:	8d bf       	out	0x3d, r24	; 61
    23c4:	c6 30       	cpi	r28, 0x06	; 6
    23c6:	d1 05       	cpc	r29, r1
    23c8:	29 f7       	brne	.-54     	; 0x2394 <matrix_print+0x24>
#else
        ""
#endif
        );
    }
}
    23ca:	df 91       	pop	r29
    23cc:	cf 91       	pop	r28
    23ce:	1f 91       	pop	r17
    23d0:	0f 91       	pop	r16
    23d2:	ff 90       	pop	r15
    23d4:	ef 90       	pop	r14
    23d6:	08 95       	ret

000023d8 <matrix_power_up>:
    23d8:	08 95       	ret

000023da <matrix_power_down>:
    return false;
}
#endif

__attribute__ ((weak)) void matrix_power_up(void) {}
__attribute__ ((weak)) void matrix_power_down(void) {}
    23da:	08 95       	ret

000023dc <action_exec>:
}

void type_code(uint8_t code)
{
    register_code(code);
    unregister_code(code);
    23dc:	cf 93       	push	r28
    23de:	df 93       	push	r29
    23e0:	cd b7       	in	r28, 0x3d	; 61
    23e2:	de b7       	in	r29, 0x3e	; 62
    23e4:	2b 97       	sbiw	r28, 0x0b	; 11
    23e6:	0f b6       	in	r0, 0x3f	; 63
    23e8:	f8 94       	cli
    23ea:	de bf       	out	0x3e, r29	; 62
    23ec:	0f be       	out	0x3f, r0	; 63
    23ee:	cd bf       	out	0x3d, r28	; 61
    23f0:	94 2f       	mov	r25, r20
    23f2:	4f 83       	std	Y+7, r20	; 0x07
    23f4:	25 2f       	mov	r18, r21
    23f6:	58 87       	std	Y+8, r21	; 0x08
    23f8:	69 87       	std	Y+9, r22	; 0x09
    23fa:	7a 87       	std	Y+10, r23	; 0x0a
    23fc:	8b 87       	std	Y+11, r24	; 0x0b
    23fe:	4a 85       	ldd	r20, Y+10	; 0x0a
    2400:	5b 85       	ldd	r21, Y+11	; 0x0b
    2402:	45 2b       	or	r20, r21
    2404:	31 f0       	breq	.+12     	; 0x2412 <action_exec+0x36>
    2406:	2f 3f       	cpi	r18, 0xFF	; 255
    2408:	31 f4       	brne	.+12     	; 0x2416 <action_exec+0x3a>
    240a:	81 e0       	ldi	r24, 0x01	; 1
    240c:	9f 3f       	cpi	r25, 0xFF	; 255
    240e:	19 f4       	brne	.+6      	; 0x2416 <action_exec+0x3a>
    2410:	03 c0       	rjmp	.+6      	; 0x2418 <action_exec+0x3c>
    2412:	81 e0       	ldi	r24, 0x01	; 1
    2414:	01 c0       	rjmp	.+2      	; 0x2418 <action_exec+0x3c>
    2416:	80 e0       	ldi	r24, 0x00	; 0
    2418:	80 fd       	sbrc	r24, 0
    241a:	07 c0       	rjmp	.+14     	; 0x242a <action_exec+0x4e>
    241c:	4f 81       	ldd	r20, Y+7	; 0x07
    241e:	58 85       	ldd	r21, Y+8	; 0x08
    2420:	69 85       	ldd	r22, Y+9	; 0x09
    2422:	7a 85       	ldd	r23, Y+10	; 0x0a
    2424:	8b 85       	ldd	r24, Y+11	; 0x0b
    2426:	0e 94 b8 1d 	call	0x3b70	; 0x3b70 <hook_matrix_change>
    242a:	de 01       	movw	r26, r28
    242c:	11 96       	adiw	r26, 0x01	; 1
    242e:	86 e0       	ldi	r24, 0x06	; 6
    2430:	fd 01       	movw	r30, r26
    2432:	11 92       	st	Z+, r1
    2434:	8a 95       	dec	r24
    2436:	e9 f7       	brne	.-6      	; 0x2432 <action_exec+0x56>
    2438:	85 e0       	ldi	r24, 0x05	; 5
    243a:	fe 01       	movw	r30, r28
    243c:	37 96       	adiw	r30, 0x07	; 7
    243e:	01 90       	ld	r0, Z+
    2440:	0d 92       	st	X+, r0
    2442:	8a 95       	dec	r24
    2444:	e1 f7       	brne	.-8      	; 0x243e <action_exec+0x62>
    2446:	49 81       	ldd	r20, Y+1	; 0x01
    2448:	5a 81       	ldd	r21, Y+2	; 0x02
    244a:	6b 81       	ldd	r22, Y+3	; 0x03
    244c:	7c 81       	ldd	r23, Y+4	; 0x04
    244e:	8d 81       	ldd	r24, Y+5	; 0x05
    2450:	9e 81       	ldd	r25, Y+6	; 0x06
    2452:	0e 94 b3 19 	call	0x3366	; 0x3366 <action_tapping_process>
    2456:	2b 96       	adiw	r28, 0x0b	; 11
    2458:	0f b6       	in	r0, 0x3f	; 63
    245a:	f8 94       	cli
    245c:	de bf       	out	0x3e, r29	; 62
    245e:	0f be       	out	0x3f, r0	; 63
    2460:	cd bf       	out	0x3d, r28	; 61
    2462:	df 91       	pop	r29
    2464:	cf 91       	pop	r28
    2466:	08 95       	ret

00002468 <register_code>:
    2468:	cf 93       	push	r28
    246a:	88 23       	and	r24, r24
    246c:	09 f4       	brne	.+2      	; 0x2470 <register_code+0x8>
    246e:	e8 c0       	rjmp	.+464    	; 0x2640 <register_code+0x1d8>
    2470:	c8 2f       	mov	r28, r24
    2472:	82 38       	cpi	r24, 0x82	; 130
    2474:	a1 f4       	brne	.+40     	; 0x249e <register_code+0x36>
    2476:	0e 94 4f 10 	call	0x209e	; 0x209e <host_keyboard_leds>
    247a:	81 fd       	sbrc	r24, 1
    247c:	e1 c0       	rjmp	.+450    	; 0x2640 <register_code+0x1d8>
    247e:	89 e3       	ldi	r24, 0x39	; 57
    2480:	0e 94 9b 1c 	call	0x3936	; 0x3936 <add_key>
    2484:	0e 94 7a 1d 	call	0x3af4	; 0x3af4 <send_keyboard_report>
    2488:	2f ef       	ldi	r18, 0xFF	; 255
    248a:	81 ee       	ldi	r24, 0xE1	; 225
    248c:	94 e0       	ldi	r25, 0x04	; 4
    248e:	21 50       	subi	r18, 0x01	; 1
    2490:	80 40       	sbci	r24, 0x00	; 0
    2492:	90 40       	sbci	r25, 0x00	; 0
    2494:	e1 f7       	brne	.-8      	; 0x248e <register_code+0x26>
    2496:	00 c0       	rjmp	.+0      	; 0x2498 <register_code+0x30>
    2498:	00 00       	nop
    249a:	89 e3       	ldi	r24, 0x39	; 57
    249c:	15 c0       	rjmp	.+42     	; 0x24c8 <register_code+0x60>
    249e:	83 38       	cpi	r24, 0x83	; 131
    24a0:	c1 f4       	brne	.+48     	; 0x24d2 <register_code+0x6a>
    24a2:	0e 94 4f 10 	call	0x209e	; 0x209e <host_keyboard_leds>
    24a6:	80 fd       	sbrc	r24, 0
    24a8:	cb c0       	rjmp	.+406    	; 0x2640 <register_code+0x1d8>
    24aa:	83 e5       	ldi	r24, 0x53	; 83
    24ac:	0e 94 9b 1c 	call	0x3936	; 0x3936 <add_key>
    24b0:	0e 94 7a 1d 	call	0x3af4	; 0x3af4 <send_keyboard_report>
    24b4:	2f ef       	ldi	r18, 0xFF	; 255
    24b6:	81 ee       	ldi	r24, 0xE1	; 225
    24b8:	94 e0       	ldi	r25, 0x04	; 4
    24ba:	21 50       	subi	r18, 0x01	; 1
    24bc:	80 40       	sbci	r24, 0x00	; 0
    24be:	90 40       	sbci	r25, 0x00	; 0
    24c0:	e1 f7       	brne	.-8      	; 0x24ba <register_code+0x52>
    24c2:	00 c0       	rjmp	.+0      	; 0x24c4 <register_code+0x5c>
    24c4:	00 00       	nop
    24c6:	83 e5       	ldi	r24, 0x53	; 83
    24c8:	0e 94 eb 1c 	call	0x39d6	; 0x39d6 <del_key>
    24cc:	cf 91       	pop	r28
    24ce:	0c 94 7a 1d 	jmp	0x3af4	; 0x3af4 <send_keyboard_report>
    24d2:	84 38       	cpi	r24, 0x84	; 132
    24d4:	a1 f4       	brne	.+40     	; 0x24fe <register_code+0x96>
    24d6:	0e 94 4f 10 	call	0x209e	; 0x209e <host_keyboard_leds>
    24da:	82 fd       	sbrc	r24, 2
    24dc:	b1 c0       	rjmp	.+354    	; 0x2640 <register_code+0x1d8>
    24de:	87 e4       	ldi	r24, 0x47	; 71
    24e0:	0e 94 9b 1c 	call	0x3936	; 0x3936 <add_key>
    24e4:	0e 94 7a 1d 	call	0x3af4	; 0x3af4 <send_keyboard_report>
    24e8:	2f ef       	ldi	r18, 0xFF	; 255
    24ea:	81 ee       	ldi	r24, 0xE1	; 225
    24ec:	94 e0       	ldi	r25, 0x04	; 4
    24ee:	21 50       	subi	r18, 0x01	; 1
    24f0:	80 40       	sbci	r24, 0x00	; 0
    24f2:	90 40       	sbci	r25, 0x00	; 0
    24f4:	e1 f7       	brne	.-8      	; 0x24ee <register_code+0x86>
    24f6:	00 c0       	rjmp	.+0      	; 0x24f8 <register_code+0x90>
    24f8:	00 00       	nop
    24fa:	87 e4       	ldi	r24, 0x47	; 71
    24fc:	e5 cf       	rjmp	.-54     	; 0x24c8 <register_code+0x60>
    24fe:	8c ef       	ldi	r24, 0xFC	; 252
    2500:	8c 0f       	add	r24, r28
    2502:	81 3a       	cpi	r24, 0xA1	; 161
    2504:	48 f4       	brcc	.+18     	; 0x2518 <register_code+0xb0>
    2506:	8c 2f       	mov	r24, r28
    2508:	0e 94 46 28 	call	0x508c	; 0x508c <command_proc>
    250c:	81 11       	cpse	r24, r1
    250e:	98 c0       	rjmp	.+304    	; 0x2640 <register_code+0x1d8>
    2510:	8c 2f       	mov	r24, r28
    2512:	0e 94 9b 1c 	call	0x3936	; 0x3936 <add_key>
    2516:	da cf       	rjmp	.-76     	; 0x24cc <register_code+0x64>
    2518:	80 e2       	ldi	r24, 0x20	; 32
    251a:	8c 0f       	add	r24, r28
    251c:	88 30       	cpi	r24, 0x08	; 8
    251e:	48 f4       	brcc	.+18     	; 0x2532 <register_code+0xca>
    2520:	c7 70       	andi	r28, 0x07	; 7
    2522:	81 e0       	ldi	r24, 0x01	; 1
    2524:	01 c0       	rjmp	.+2      	; 0x2528 <register_code+0xc0>
    2526:	88 0f       	add	r24, r24
    2528:	ca 95       	dec	r28
    252a:	ea f7       	brpl	.-6      	; 0x2526 <register_code+0xbe>
    252c:	0e 94 40 1d 	call	0x3a80	; 0x3a80 <add_mods>
    2530:	cd cf       	rjmp	.-102    	; 0x24cc <register_code+0x64>
    2532:	8b e5       	ldi	r24, 0x5B	; 91
    2534:	8c 0f       	add	r24, r28
    2536:	83 30       	cpi	r24, 0x03	; 3
    2538:	78 f4       	brcc	.+30     	; 0x2558 <register_code+0xf0>
    253a:	c5 3a       	cpi	r28, 0xA5	; 165
    253c:	29 f0       	breq	.+10     	; 0x2548 <register_code+0xe0>
    253e:	c6 3a       	cpi	r28, 0xA6	; 166
    2540:	31 f0       	breq	.+12     	; 0x254e <register_code+0xe6>
    2542:	83 e8       	ldi	r24, 0x83	; 131
    2544:	90 e0       	ldi	r25, 0x00	; 0
    2546:	05 c0       	rjmp	.+10     	; 0x2552 <register_code+0xea>
    2548:	81 e8       	ldi	r24, 0x81	; 129
    254a:	90 e0       	ldi	r25, 0x00	; 0
    254c:	02 c0       	rjmp	.+4      	; 0x2552 <register_code+0xea>
    254e:	82 e8       	ldi	r24, 0x82	; 130
    2550:	90 e0       	ldi	r25, 0x00	; 0
    2552:	cf 91       	pop	r28
    2554:	0c 94 af 10 	jmp	0x215e	; 0x215e <host_system_send>
    2558:	88 e5       	ldi	r24, 0x58	; 88
    255a:	8c 0f       	add	r24, r28
    255c:	85 31       	cpi	r24, 0x15	; 21
    255e:	08 f0       	brcs	.+2      	; 0x2562 <register_code+0xfa>
    2560:	6f c0       	rjmp	.+222    	; 0x2640 <register_code+0x1d8>
    2562:	c8 3a       	cpi	r28, 0xA8	; 168
    2564:	61 f1       	breq	.+88     	; 0x25be <register_code+0x156>
    2566:	c9 3a       	cpi	r28, 0xA9	; 169
    2568:	69 f1       	breq	.+90     	; 0x25c4 <register_code+0x15c>
    256a:	ca 3a       	cpi	r28, 0xAA	; 170
    256c:	71 f1       	breq	.+92     	; 0x25ca <register_code+0x162>
    256e:	cb 3a       	cpi	r28, 0xAB	; 171
    2570:	79 f1       	breq	.+94     	; 0x25d0 <register_code+0x168>
    2572:	cc 3a       	cpi	r28, 0xAC	; 172
    2574:	81 f1       	breq	.+96     	; 0x25d6 <register_code+0x16e>
    2576:	cd 3a       	cpi	r28, 0xAD	; 173
    2578:	89 f1       	breq	.+98     	; 0x25dc <register_code+0x174>
    257a:	ce 3a       	cpi	r28, 0xAE	; 174
    257c:	91 f1       	breq	.+100    	; 0x25e2 <register_code+0x17a>
    257e:	cf 3a       	cpi	r28, 0xAF	; 175
    2580:	99 f1       	breq	.+102    	; 0x25e8 <register_code+0x180>
    2582:	c1 3b       	cpi	r28, 0xB1	; 177
    2584:	a1 f1       	breq	.+104    	; 0x25ee <register_code+0x186>
    2586:	c0 3b       	cpi	r28, 0xB0	; 176
    2588:	a9 f1       	breq	.+106    	; 0x25f4 <register_code+0x18c>
    258a:	c2 3b       	cpi	r28, 0xB2	; 178
    258c:	b1 f1       	breq	.+108    	; 0x25fa <register_code+0x192>
    258e:	c3 3b       	cpi	r28, 0xB3	; 179
    2590:	b9 f1       	breq	.+110    	; 0x2600 <register_code+0x198>
    2592:	c4 3b       	cpi	r28, 0xB4	; 180
    2594:	c1 f1       	breq	.+112    	; 0x2606 <register_code+0x19e>
    2596:	c5 3b       	cpi	r28, 0xB5	; 181
    2598:	c9 f1       	breq	.+114    	; 0x260c <register_code+0x1a4>
    259a:	c6 3b       	cpi	r28, 0xB6	; 182
    259c:	d1 f1       	breq	.+116    	; 0x2612 <register_code+0x1aa>
    259e:	c7 3b       	cpi	r28, 0xB7	; 183
    25a0:	d9 f1       	breq	.+118    	; 0x2618 <register_code+0x1b0>
    25a2:	c8 3b       	cpi	r28, 0xB8	; 184
    25a4:	e1 f1       	breq	.+120    	; 0x261e <register_code+0x1b6>
    25a6:	c9 3b       	cpi	r28, 0xB9	; 185
    25a8:	e9 f1       	breq	.+122    	; 0x2624 <register_code+0x1bc>
    25aa:	ca 3b       	cpi	r28, 0xBA	; 186
    25ac:	f1 f1       	breq	.+124    	; 0x262a <register_code+0x1c2>
    25ae:	cb 3b       	cpi	r28, 0xBB	; 187
    25b0:	f9 f1       	breq	.+126    	; 0x2630 <register_code+0x1c8>
    25b2:	cc 3b       	cpi	r28, 0xBC	; 188
    25b4:	09 f4       	brne	.+2      	; 0x25b8 <register_code+0x150>
    25b6:	3f c0       	rjmp	.+126    	; 0x2636 <register_code+0x1ce>
    25b8:	80 e0       	ldi	r24, 0x00	; 0
    25ba:	90 e0       	ldi	r25, 0x00	; 0
    25bc:	3e c0       	rjmp	.+124    	; 0x263a <register_code+0x1d2>
    25be:	82 ee       	ldi	r24, 0xE2	; 226
    25c0:	90 e0       	ldi	r25, 0x00	; 0
    25c2:	3b c0       	rjmp	.+118    	; 0x263a <register_code+0x1d2>
    25c4:	89 ee       	ldi	r24, 0xE9	; 233
    25c6:	90 e0       	ldi	r25, 0x00	; 0
    25c8:	38 c0       	rjmp	.+112    	; 0x263a <register_code+0x1d2>
    25ca:	8a ee       	ldi	r24, 0xEA	; 234
    25cc:	90 e0       	ldi	r25, 0x00	; 0
    25ce:	35 c0       	rjmp	.+106    	; 0x263a <register_code+0x1d2>
    25d0:	85 eb       	ldi	r24, 0xB5	; 181
    25d2:	90 e0       	ldi	r25, 0x00	; 0
    25d4:	32 c0       	rjmp	.+100    	; 0x263a <register_code+0x1d2>
    25d6:	86 eb       	ldi	r24, 0xB6	; 182
    25d8:	90 e0       	ldi	r25, 0x00	; 0
    25da:	2f c0       	rjmp	.+94     	; 0x263a <register_code+0x1d2>
    25dc:	83 eb       	ldi	r24, 0xB3	; 179
    25de:	90 e0       	ldi	r25, 0x00	; 0
    25e0:	2c c0       	rjmp	.+88     	; 0x263a <register_code+0x1d2>
    25e2:	84 eb       	ldi	r24, 0xB4	; 180
    25e4:	90 e0       	ldi	r25, 0x00	; 0
    25e6:	29 c0       	rjmp	.+82     	; 0x263a <register_code+0x1d2>
    25e8:	87 eb       	ldi	r24, 0xB7	; 183
    25ea:	90 e0       	ldi	r25, 0x00	; 0
    25ec:	26 c0       	rjmp	.+76     	; 0x263a <register_code+0x1d2>
    25ee:	8c ec       	ldi	r24, 0xCC	; 204
    25f0:	90 e0       	ldi	r25, 0x00	; 0
    25f2:	23 c0       	rjmp	.+70     	; 0x263a <register_code+0x1d2>
    25f4:	8d ec       	ldi	r24, 0xCD	; 205
    25f6:	90 e0       	ldi	r25, 0x00	; 0
    25f8:	20 c0       	rjmp	.+64     	; 0x263a <register_code+0x1d2>
    25fa:	83 e8       	ldi	r24, 0x83	; 131
    25fc:	91 e0       	ldi	r25, 0x01	; 1
    25fe:	1d c0       	rjmp	.+58     	; 0x263a <register_code+0x1d2>
    2600:	8a e8       	ldi	r24, 0x8A	; 138
    2602:	91 e0       	ldi	r25, 0x01	; 1
    2604:	1a c0       	rjmp	.+52     	; 0x263a <register_code+0x1d2>
    2606:	82 e9       	ldi	r24, 0x92	; 146
    2608:	91 e0       	ldi	r25, 0x01	; 1
    260a:	17 c0       	rjmp	.+46     	; 0x263a <register_code+0x1d2>
    260c:	84 e9       	ldi	r24, 0x94	; 148
    260e:	91 e0       	ldi	r25, 0x01	; 1
    2610:	14 c0       	rjmp	.+40     	; 0x263a <register_code+0x1d2>
    2612:	81 e2       	ldi	r24, 0x21	; 33
    2614:	92 e0       	ldi	r25, 0x02	; 2
    2616:	11 c0       	rjmp	.+34     	; 0x263a <register_code+0x1d2>
    2618:	83 e2       	ldi	r24, 0x23	; 35
    261a:	92 e0       	ldi	r25, 0x02	; 2
    261c:	0e c0       	rjmp	.+28     	; 0x263a <register_code+0x1d2>
    261e:	84 e2       	ldi	r24, 0x24	; 36
    2620:	92 e0       	ldi	r25, 0x02	; 2
    2622:	0b c0       	rjmp	.+22     	; 0x263a <register_code+0x1d2>
    2624:	85 e2       	ldi	r24, 0x25	; 37
    2626:	92 e0       	ldi	r25, 0x02	; 2
    2628:	08 c0       	rjmp	.+16     	; 0x263a <register_code+0x1d2>
    262a:	86 e2       	ldi	r24, 0x26	; 38
    262c:	92 e0       	ldi	r25, 0x02	; 2
    262e:	05 c0       	rjmp	.+10     	; 0x263a <register_code+0x1d2>
    2630:	87 e2       	ldi	r24, 0x27	; 39
    2632:	92 e0       	ldi	r25, 0x02	; 2
    2634:	02 c0       	rjmp	.+4      	; 0x263a <register_code+0x1d2>
    2636:	8a e2       	ldi	r24, 0x2A	; 42
    2638:	92 e0       	ldi	r25, 0x02	; 2
    263a:	cf 91       	pop	r28
    263c:	0c 94 dc 10 	jmp	0x21b8	; 0x21b8 <host_consumer_send>
    2640:	cf 91       	pop	r28
    2642:	08 95       	ret

00002644 <unregister_code>:
    2644:	88 23       	and	r24, r24
    2646:	09 f4       	brne	.+2      	; 0x264a <unregister_code+0x6>
    2648:	66 c0       	rjmp	.+204    	; 0x2716 <unregister_code+0xd2>
    264a:	82 38       	cpi	r24, 0x82	; 130
    264c:	a1 f4       	brne	.+40     	; 0x2676 <unregister_code+0x32>
    264e:	0e 94 4f 10 	call	0x209e	; 0x209e <host_keyboard_leds>
    2652:	81 ff       	sbrs	r24, 1
    2654:	60 c0       	rjmp	.+192    	; 0x2716 <unregister_code+0xd2>
    2656:	89 e3       	ldi	r24, 0x39	; 57
    2658:	0e 94 9b 1c 	call	0x3936	; 0x3936 <add_key>
    265c:	0e 94 7a 1d 	call	0x3af4	; 0x3af4 <send_keyboard_report>
    2660:	2f ef       	ldi	r18, 0xFF	; 255
    2662:	81 ee       	ldi	r24, 0xE1	; 225
    2664:	94 e0       	ldi	r25, 0x04	; 4
    2666:	21 50       	subi	r18, 0x01	; 1
    2668:	80 40       	sbci	r24, 0x00	; 0
    266a:	90 40       	sbci	r25, 0x00	; 0
    266c:	e1 f7       	brne	.-8      	; 0x2666 <unregister_code+0x22>
    266e:	00 c0       	rjmp	.+0      	; 0x2670 <unregister_code+0x2c>
    2670:	00 00       	nop
    2672:	89 e3       	ldi	r24, 0x39	; 57
    2674:	15 c0       	rjmp	.+42     	; 0x26a0 <unregister_code+0x5c>
    2676:	83 38       	cpi	r24, 0x83	; 131
    2678:	b9 f4       	brne	.+46     	; 0x26a8 <unregister_code+0x64>
    267a:	0e 94 4f 10 	call	0x209e	; 0x209e <host_keyboard_leds>
    267e:	80 ff       	sbrs	r24, 0
    2680:	4a c0       	rjmp	.+148    	; 0x2716 <unregister_code+0xd2>
    2682:	83 e5       	ldi	r24, 0x53	; 83
    2684:	0e 94 9b 1c 	call	0x3936	; 0x3936 <add_key>
    2688:	0e 94 7a 1d 	call	0x3af4	; 0x3af4 <send_keyboard_report>
    268c:	2f ef       	ldi	r18, 0xFF	; 255
    268e:	81 ee       	ldi	r24, 0xE1	; 225
    2690:	94 e0       	ldi	r25, 0x04	; 4
    2692:	21 50       	subi	r18, 0x01	; 1
    2694:	80 40       	sbci	r24, 0x00	; 0
    2696:	90 40       	sbci	r25, 0x00	; 0
    2698:	e1 f7       	brne	.-8      	; 0x2692 <unregister_code+0x4e>
    269a:	00 c0       	rjmp	.+0      	; 0x269c <unregister_code+0x58>
    269c:	00 00       	nop
    269e:	83 e5       	ldi	r24, 0x53	; 83
    26a0:	0e 94 eb 1c 	call	0x39d6	; 0x39d6 <del_key>
    26a4:	0c 94 7a 1d 	jmp	0x3af4	; 0x3af4 <send_keyboard_report>
    26a8:	84 38       	cpi	r24, 0x84	; 132
    26aa:	a1 f4       	brne	.+40     	; 0x26d4 <unregister_code+0x90>
    26ac:	0e 94 4f 10 	call	0x209e	; 0x209e <host_keyboard_leds>
    26b0:	82 ff       	sbrs	r24, 2
    26b2:	31 c0       	rjmp	.+98     	; 0x2716 <unregister_code+0xd2>
    26b4:	87 e4       	ldi	r24, 0x47	; 71
    26b6:	0e 94 9b 1c 	call	0x3936	; 0x3936 <add_key>
    26ba:	0e 94 7a 1d 	call	0x3af4	; 0x3af4 <send_keyboard_report>
    26be:	2f ef       	ldi	r18, 0xFF	; 255
    26c0:	81 ee       	ldi	r24, 0xE1	; 225
    26c2:	94 e0       	ldi	r25, 0x04	; 4
    26c4:	21 50       	subi	r18, 0x01	; 1
    26c6:	80 40       	sbci	r24, 0x00	; 0
    26c8:	90 40       	sbci	r25, 0x00	; 0
    26ca:	e1 f7       	brne	.-8      	; 0x26c4 <unregister_code+0x80>
    26cc:	00 c0       	rjmp	.+0      	; 0x26ce <unregister_code+0x8a>
    26ce:	00 00       	nop
    26d0:	87 e4       	ldi	r24, 0x47	; 71
    26d2:	e6 cf       	rjmp	.-52     	; 0x26a0 <unregister_code+0x5c>
    26d4:	9c ef       	ldi	r25, 0xFC	; 252
    26d6:	98 0f       	add	r25, r24
    26d8:	91 3a       	cpi	r25, 0xA1	; 161
    26da:	10 f3       	brcs	.-60     	; 0x26a0 <unregister_code+0x5c>
    26dc:	90 e2       	ldi	r25, 0x20	; 32
    26de:	98 0f       	add	r25, r24
    26e0:	98 30       	cpi	r25, 0x08	; 8
    26e2:	50 f4       	brcc	.+20     	; 0x26f8 <unregister_code+0xb4>
    26e4:	87 70       	andi	r24, 0x07	; 7
    26e6:	91 e0       	ldi	r25, 0x01	; 1
    26e8:	01 c0       	rjmp	.+2      	; 0x26ec <unregister_code+0xa8>
    26ea:	99 0f       	add	r25, r25
    26ec:	8a 95       	dec	r24
    26ee:	ea f7       	brpl	.-6      	; 0x26ea <unregister_code+0xa6>
    26f0:	89 2f       	mov	r24, r25
    26f2:	0e 94 46 1d 	call	0x3a8c	; 0x3a8c <del_mods>
    26f6:	d6 cf       	rjmp	.-84     	; 0x26a4 <unregister_code+0x60>
    26f8:	9b e5       	ldi	r25, 0x5B	; 91
    26fa:	98 0f       	add	r25, r24
    26fc:	93 30       	cpi	r25, 0x03	; 3
    26fe:	20 f4       	brcc	.+8      	; 0x2708 <unregister_code+0xc4>
    2700:	80 e0       	ldi	r24, 0x00	; 0
    2702:	90 e0       	ldi	r25, 0x00	; 0
    2704:	0c 94 af 10 	jmp	0x215e	; 0x215e <host_system_send>
    2708:	88 5a       	subi	r24, 0xA8	; 168
    270a:	85 31       	cpi	r24, 0x15	; 21
    270c:	20 f4       	brcc	.+8      	; 0x2716 <unregister_code+0xd2>
    270e:	80 e0       	ldi	r24, 0x00	; 0
    2710:	90 e0       	ldi	r25, 0x00	; 0
    2712:	0c 94 dc 10 	jmp	0x21b8	; 0x21b8 <host_consumer_send>
    2716:	08 95       	ret

00002718 <register_mods>:
}

void register_mods(uint8_t mods)
{
    if (mods) {
    2718:	88 23       	and	r24, r24
    271a:	21 f0       	breq	.+8      	; 0x2724 <register_mods+0xc>
        add_mods(mods);
    271c:	0e 94 40 1d 	call	0x3a80	; 0x3a80 <add_mods>
        send_keyboard_report();
    2720:	0c 94 7a 1d 	jmp	0x3af4	; 0x3af4 <send_keyboard_report>
    2724:	08 95       	ret

00002726 <unregister_mods>:
    }
}

void unregister_mods(uint8_t mods)
{
    if (mods) {
    2726:	88 23       	and	r24, r24
    2728:	21 f0       	breq	.+8      	; 0x2732 <unregister_mods+0xc>
        del_mods(mods);
    272a:	0e 94 46 1d 	call	0x3a8c	; 0x3a8c <del_mods>
        send_keyboard_report();
    272e:	0c 94 7a 1d 	jmp	0x3af4	; 0x3af4 <send_keyboard_report>
    2732:	08 95       	ret

00002734 <process_action>:
    }
#endif
}

void process_action(keyrecord_t *record)
{
    2734:	cf 92       	push	r12
    2736:	df 92       	push	r13
    2738:	ef 92       	push	r14
    273a:	ff 92       	push	r15
    273c:	0f 93       	push	r16
    273e:	1f 93       	push	r17
    2740:	cf 93       	push	r28
    2742:	df 93       	push	r29
    2744:	00 d0       	rcall	.+0      	; 0x2746 <process_action+0x12>
    2746:	00 d0       	rcall	.+0      	; 0x2748 <process_action+0x14>
    2748:	1f 92       	push	r1
    274a:	cd b7       	in	r28, 0x3d	; 61
    274c:	de b7       	in	r29, 0x3e	; 62
    274e:	6c 01       	movw	r12, r24
    keyevent_t event = record->event;
    2750:	85 e0       	ldi	r24, 0x05	; 5
    2752:	f6 01       	movw	r30, r12
    2754:	de 01       	movw	r26, r28
    2756:	11 96       	adiw	r26, 0x01	; 1
    2758:	01 90       	ld	r0, Z+
    275a:	0d 92       	st	X+, r0
    275c:	8a 95       	dec	r24
    275e:	e1 f7       	brne	.-8      	; 0x2758 <process_action+0x24>
    2760:	f6 01       	movw	r30, r12
    2762:	40 81       	ld	r20, Z
    2764:	51 81       	ldd	r21, Z+1	; 0x01
    2766:	23 81       	ldd	r18, Z+3	; 0x03
    2768:	34 81       	ldd	r19, Z+4	; 0x04

/* Rules for No Event:
 * 1) (time == 0) to handle (keyevent_t){} as empty event
 * 2) Matrix(255, 255) to make TICK event available
 */
static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 && event.key.col == 255); }
    276a:	21 15       	cp	r18, r1
    276c:	31 05       	cpc	r19, r1
    276e:	31 f0       	breq	.+12     	; 0x277c <process_action+0x48>
    2770:	5f 3f       	cpi	r21, 0xFF	; 255
    2772:	31 f4       	brne	.+12     	; 0x2780 <process_action+0x4c>
    2774:	91 e0       	ldi	r25, 0x01	; 1
    2776:	4f 3f       	cpi	r20, 0xFF	; 255
    2778:	19 f4       	brne	.+6      	; 0x2780 <process_action+0x4c>
    277a:	03 c0       	rjmp	.+6      	; 0x2782 <process_action+0x4e>
    277c:	91 e0       	ldi	r25, 0x01	; 1
    277e:	01 c0       	rjmp	.+2      	; 0x2782 <process_action+0x4e>
    2780:	90 e0       	ldi	r25, 0x00	; 0
#ifndef NO_ACTION_TAPPING
    uint8_t tap_count = record->tap.count;
#endif

    if (IS_NOEVENT(event)) { return; }
    2782:	90 fd       	sbrc	r25, 0
    2784:	c5 c2       	rjmp	.+1418   	; 0x2d10 <process_action+0x5dc>
#endif
}

void process_action(keyrecord_t *record)
{
    keyevent_t event = record->event;
    2786:	f6 01       	movw	r30, r12
    2788:	f2 80       	ldd	r15, Z+2	; 0x02
#ifndef NO_ACTION_TAPPING
    uint8_t tap_count = record->tap.count;
    278a:	e5 80       	ldd	r14, Z+5	; 0x05
    278c:	e2 94       	swap	r14
    278e:	8f e0       	ldi	r24, 0x0F	; 15
    2790:	e8 22       	and	r14, r24
#endif

    if (IS_NOEVENT(event)) { return; }

    action_t action = layer_switch_get_action(event);
    2792:	72 2f       	mov	r23, r18
    2794:	3d 83       	std	Y+5, r19	; 0x05
    2796:	2c 83       	std	Y+4, r18	; 0x04
    2798:	6f 2d       	mov	r22, r15
    279a:	8d 81       	ldd	r24, Y+5	; 0x05
    279c:	0e 94 17 1c 	call	0x382e	; 0x382e <layer_switch_get_action>
    27a0:	8c 01       	movw	r16, r24
    dprint("ACTION: "); debug_action(action);
#ifndef NO_ACTION_LAYER
    dprint(" layer_state: "); layer_debug();
    27a2:	0e 94 16 1c 	call	0x382c	; 0x382c <layer_debug>
    dprint(" default_layer_state: "); default_layer_debug();
    27a6:	0e 94 06 1b 	call	0x360c	; 0x360c <default_layer_debug>
#endif
    dprintln();

    switch (action.kind.id) {
    27aa:	e1 2f       	mov	r30, r17
    27ac:	e2 95       	swap	r30
    27ae:	ef 70       	andi	r30, 0x0F	; 15
    27b0:	8e 2f       	mov	r24, r30
    27b2:	90 e0       	ldi	r25, 0x00	; 0
    27b4:	fc 01       	movw	r30, r24
    27b6:	e0 5a       	subi	r30, 0xA0	; 160
    27b8:	ff 4f       	sbci	r31, 0xFF	; 255
    27ba:	0c 94 e0 2a 	jmp	0x55c0	; 0x55c0 <__tablejump2__>
        /* Key and Mods */
        case ACT_LMODS:
        case ACT_RMODS:
            {
                uint8_t mods = (action.kind.id == ACT_LMODS) ?  action.key.mods :
    27be:	81 2f       	mov	r24, r17
    27c0:	80 7f       	andi	r24, 0xF0	; 240
    27c2:	1f 70       	andi	r17, 0x0F	; 15
    27c4:	88 23       	and	r24, r24
    27c6:	11 f0       	breq	.+4      	; 0x27cc <process_action+0x98>
    27c8:	12 95       	swap	r17
    27ca:	10 7f       	andi	r17, 0xF0	; 240
                                                                action.key.mods<<4;
                if (event.pressed) {
    27cc:	ff 20       	and	r15, r15
    27ce:	49 f0       	breq	.+18     	; 0x27e2 <process_action+0xae>
                    if (mods) {
    27d0:	11 23       	and	r17, r17
    27d2:	09 f4       	brne	.+2      	; 0x27d6 <process_action+0xa2>
    27d4:	52 c2       	rjmp	.+1188   	; 0x2c7a <process_action+0x546>
                        add_weak_mods(mods);
    27d6:	81 2f       	mov	r24, r17
    27d8:	0e 94 53 1d 	call	0x3aa6	; 0x3aa6 <add_weak_mods>
                        send_keyboard_report();
    27dc:	0e 94 7a 1d 	call	0x3af4	; 0x3af4 <send_keyboard_report>
    27e0:	4c c2       	rjmp	.+1176   	; 0x2c7a <process_action+0x546>
                    }
                    register_code(action.key.code);
                } else {
                    unregister_code(action.key.code);
    27e2:	80 2f       	mov	r24, r16
    27e4:	0e 94 22 13 	call	0x2644	; 0x2644 <unregister_code>
                    if (mods) {
    27e8:	11 23       	and	r17, r17
    27ea:	09 f4       	brne	.+2      	; 0x27ee <process_action+0xba>
    27ec:	91 c2       	rjmp	.+1314   	; 0x2d10 <process_action+0x5dc>
                        del_weak_mods(mods);
    27ee:	81 2f       	mov	r24, r17
    27f0:	0e 94 59 1d 	call	0x3ab2	; 0x3ab2 <del_weak_mods>
            break;
#endif
        default:
            break;
    }
}
    27f4:	0f 90       	pop	r0
    27f6:	0f 90       	pop	r0
    27f8:	0f 90       	pop	r0
    27fa:	0f 90       	pop	r0
    27fc:	0f 90       	pop	r0
    27fe:	df 91       	pop	r29
    2800:	cf 91       	pop	r28
    2802:	1f 91       	pop	r17
    2804:	0f 91       	pop	r16
    2806:	ff 90       	pop	r15
    2808:	ef 90       	pop	r14
    280a:	df 90       	pop	r13
    280c:	cf 90       	pop	r12
                    register_code(action.key.code);
                } else {
                    unregister_code(action.key.code);
                    if (mods) {
                        del_weak_mods(mods);
                        send_keyboard_report();
    280e:	0c 94 7a 1d 	jmp	0x3af4	; 0x3af4 <send_keyboard_report>
            break;
#ifndef NO_ACTION_TAPPING
        case ACT_LMODS_TAP:
        case ACT_RMODS_TAP:
            {
                uint8_t mods = (action.kind.id == ACT_LMODS_TAP) ?  action.key.mods :
    2812:	81 2f       	mov	r24, r17
    2814:	80 7f       	andi	r24, 0xF0	; 240
    2816:	1f 70       	andi	r17, 0x0F	; 15
    2818:	80 32       	cpi	r24, 0x20	; 32
    281a:	11 f0       	breq	.+4      	; 0x2820 <process_action+0xec>
    281c:	12 95       	swap	r17
    281e:	10 7f       	andi	r17, 0xF0	; 240
                                                                    action.key.mods<<4;
                switch (action.key.code) {
    2820:	00 23       	and	r16, r16
    2822:	19 f0       	breq	.+6      	; 0x282a <process_action+0xf6>
    2824:	01 30       	cpi	r16, 0x01	; 1
    2826:	09 f1       	breq	.+66     	; 0x286a <process_action+0x136>
    2828:	2b c0       	rjmp	.+86     	; 0x2880 <process_action+0x14c>
    #ifndef NO_ACTION_ONESHOT
                    case MODS_ONESHOT:
                        // Oneshot modifier
                        if (event.pressed) {
    282a:	ff 20       	and	r15, r15
    282c:	a9 f0       	breq	.+42     	; 0x2858 <process_action+0x124>
                            if (tap_count == 0) {
    282e:	ee 20       	and	r14, r14
    2830:	59 f1       	breq	.+86     	; 0x2888 <process_action+0x154>
                                register_mods(mods);
                            }
                            else if (tap_count == 1) {
    2832:	f1 e0       	ldi	r31, 0x01	; 1
                                dprint("MODS_TAP: Oneshot: start\n");
                                set_oneshot_mods(mods);
    2834:	81 2f       	mov	r24, r17
                        // Oneshot modifier
                        if (event.pressed) {
                            if (tap_count == 0) {
                                register_mods(mods);
                            }
                            else if (tap_count == 1) {
    2836:	ef 12       	cpse	r14, r31
    2838:	28 c0       	rjmp	.+80     	; 0x288a <process_action+0x156>
            break;
#endif
        default:
            break;
    }
}
    283a:	0f 90       	pop	r0
    283c:	0f 90       	pop	r0
    283e:	0f 90       	pop	r0
    2840:	0f 90       	pop	r0
    2842:	0f 90       	pop	r0
    2844:	df 91       	pop	r29
    2846:	cf 91       	pop	r28
    2848:	1f 91       	pop	r17
    284a:	0f 91       	pop	r16
    284c:	ff 90       	pop	r15
    284e:	ef 90       	pop	r14
    2850:	df 90       	pop	r13
    2852:	cf 90       	pop	r12
                            if (tap_count == 0) {
                                register_mods(mods);
                            }
                            else if (tap_count == 1) {
                                dprint("MODS_TAP: Oneshot: start\n");
                                set_oneshot_mods(mods);
    2854:	0c 94 63 1d 	jmp	0x3ac6	; 0x3ac6 <set_oneshot_mods>
                            }
                            else {
                                register_mods(mods);
                            }
                        } else {
                            if (tap_count == 0) {
    2858:	ee 20       	and	r14, r14
    285a:	21 f0       	breq	.+8      	; 0x2864 <process_action+0x130>
                                clear_oneshot_mods();
                                unregister_mods(mods);
                            }
                            else if (tap_count == 1) {
    285c:	81 e0       	ldi	r24, 0x01	; 1
    285e:	e8 16       	cp	r14, r24
    2860:	09 f4       	brne	.+2      	; 0x2864 <process_action+0x130>
    2862:	56 c2       	rjmp	.+1196   	; 0x2d10 <process_action+0x5dc>
                                // Retain Oneshot mods
                            }
                            else {
                                clear_oneshot_mods();
    2864:	0e 94 66 1d 	call	0x3acc	; 0x3acc <clear_oneshot_mods>
    2868:	2d c0       	rjmp	.+90     	; 0x28c4 <process_action+0x190>
                            }
                        }
                        break;
    #endif
                    case MODS_TAP_TOGGLE:
                        if (event.pressed) {
    286a:	ff 20       	and	r15, r15
    286c:	e9 f0       	breq	.+58     	; 0x28a8 <process_action+0x174>
                            if (tap_count <= TAPPING_TOGGLE) {
    286e:	e5 e0       	ldi	r30, 0x05	; 5
    2870:	ee 15       	cp	r30, r14
    2872:	08 f4       	brcc	.+2      	; 0x2876 <process_action+0x142>
    2874:	4d c2       	rjmp	.+1178   	; 0x2d10 <process_action+0x5dc>
                                if (mods & get_mods()) {
    2876:	0e 94 3d 1d 	call	0x3a7a	; 0x3a7a <get_mods>
    287a:	81 23       	and	r24, r17
    287c:	29 f0       	breq	.+10     	; 0x2888 <process_action+0x154>
    287e:	22 c0       	rjmp	.+68     	; 0x28c4 <process_action+0x190>
                                unregister_mods(mods);
                            }
                        }
                        break;
                    default:
                        if (event.pressed) {
    2880:	ff 20       	and	r15, r15
    2882:	f1 f0       	breq	.+60     	; 0x28c0 <process_action+0x18c>
                            if (tap_count > 0) {
    2884:	e1 10       	cpse	r14, r1
    2886:	15 c0       	rjmp	.+42     	; 0x28b2 <process_action+0x17e>
                                if (mods & get_mods()) {
                                    dprint("MODS_TAP_TOGGLE: toggle mods off\n");
                                    unregister_mods(mods);
                                } else {
                                    dprint("MODS_TAP_TOGGLE: toggle mods on\n");
                                    register_mods(mods);
    2888:	81 2f       	mov	r24, r17
            break;
#endif
        default:
            break;
    }
}
    288a:	0f 90       	pop	r0
    288c:	0f 90       	pop	r0
    288e:	0f 90       	pop	r0
    2890:	0f 90       	pop	r0
    2892:	0f 90       	pop	r0
    2894:	df 91       	pop	r29
    2896:	cf 91       	pop	r28
    2898:	1f 91       	pop	r17
    289a:	0f 91       	pop	r16
    289c:	ff 90       	pop	r15
    289e:	ef 90       	pop	r14
    28a0:	df 90       	pop	r13
    28a2:	cf 90       	pop	r12
                                if (mods & get_mods()) {
                                    dprint("MODS_TAP_TOGGLE: toggle mods off\n");
                                    unregister_mods(mods);
                                } else {
                                    dprint("MODS_TAP_TOGGLE: toggle mods on\n");
                                    register_mods(mods);
    28a4:	0c 94 8c 13 	jmp	0x2718	; 0x2718 <register_mods>
                                }
                            }
                        } else {
                            if (tap_count < TAPPING_TOGGLE) {
    28a8:	f4 e0       	ldi	r31, 0x04	; 4
    28aa:	fe 15       	cp	r31, r14
    28ac:	08 f4       	brcc	.+2      	; 0x28b0 <process_action+0x17c>
    28ae:	30 c2       	rjmp	.+1120   	; 0x2d10 <process_action+0x5dc>
    28b0:	09 c0       	rjmp	.+18     	; 0x28c4 <process_action+0x190>
                        }
                        break;
                    default:
                        if (event.pressed) {
                            if (tap_count > 0) {
                                if (record->tap.interrupted) {
    28b2:	f6 01       	movw	r30, r12
    28b4:	85 81       	ldd	r24, Z+5	; 0x05
    28b6:	80 ff       	sbrs	r24, 0
    28b8:	e0 c1       	rjmp	.+960    	; 0x2c7a <process_action+0x546>
                                    dprint("MODS_TAP: Tap: Cancel: add_mods\n");
                                    // ad hoc: set 0 to cancel tap
                                    record->tap.count = 0;
    28ba:	8f 70       	andi	r24, 0x0F	; 15
    28bc:	85 83       	std	Z+5, r24	; 0x05
    28be:	e4 cf       	rjmp	.-56     	; 0x2888 <process_action+0x154>
                            } else {
                                dprint("MODS_TAP: No tap: add_mods\n");
                                register_mods(mods);
                            }
                        } else {
                            if (tap_count > 0) {
    28c0:	e1 10       	cpse	r14, r1
    28c2:	ee c1       	rjmp	.+988    	; 0x2ca0 <process_action+0x56c>
                                dprint("MODS_TAP: Tap: unregister_code\n");
                                unregister_code(action.key.code);
                            } else {
                                dprint("MODS_TAP: No tap: add_mods\n");
                                unregister_mods(mods);
    28c4:	81 2f       	mov	r24, r17
    28c6:	61 c1       	rjmp	.+706    	; 0x2b8a <process_action+0x456>
            break;
#endif
#ifdef EXTRAKEY_ENABLE
        /* other HID usage */
        case ACT_USAGE:
            switch (action.usage.page) {
    28c8:	81 2f       	mov	r24, r17
    28ca:	86 95       	lsr	r24
    28cc:	86 95       	lsr	r24
    28ce:	83 70       	andi	r24, 0x03	; 3
    28d0:	19 f0       	breq	.+6      	; 0x28d8 <process_action+0x1a4>
    28d2:	81 30       	cpi	r24, 0x01	; 1
    28d4:	b9 f0       	breq	.+46     	; 0x2904 <process_action+0x1d0>
    28d6:	1c c2       	rjmp	.+1080   	; 0x2d10 <process_action+0x5dc>
                case PAGE_SYSTEM:
                    if (event.pressed) {
    28d8:	ff 20       	and	r15, r15
    28da:	19 f0       	breq	.+6      	; 0x28e2 <process_action+0x1ae>
                        host_system_send(action.usage.code);
    28dc:	c8 01       	movw	r24, r16
    28de:	93 70       	andi	r25, 0x03	; 3
    28e0:	02 c0       	rjmp	.+4      	; 0x28e6 <process_action+0x1b2>
                    } else {
                        host_system_send(0);
    28e2:	80 e0       	ldi	r24, 0x00	; 0
    28e4:	90 e0       	ldi	r25, 0x00	; 0
            break;
#endif
        default:
            break;
    }
}
    28e6:	0f 90       	pop	r0
    28e8:	0f 90       	pop	r0
    28ea:	0f 90       	pop	r0
    28ec:	0f 90       	pop	r0
    28ee:	0f 90       	pop	r0
    28f0:	df 91       	pop	r29
    28f2:	cf 91       	pop	r28
    28f4:	1f 91       	pop	r17
    28f6:	0f 91       	pop	r16
    28f8:	ff 90       	pop	r15
    28fa:	ef 90       	pop	r14
    28fc:	df 90       	pop	r13
    28fe:	cf 90       	pop	r12
            switch (action.usage.page) {
                case PAGE_SYSTEM:
                    if (event.pressed) {
                        host_system_send(action.usage.code);
                    } else {
                        host_system_send(0);
    2900:	0c 94 af 10 	jmp	0x215e	; 0x215e <host_system_send>
                    }
                    break;
                case PAGE_CONSUMER:
                    if (event.pressed) {
    2904:	ff 20       	and	r15, r15
    2906:	19 f0       	breq	.+6      	; 0x290e <process_action+0x1da>
                        host_consumer_send(action.usage.code);
    2908:	c8 01       	movw	r24, r16
    290a:	93 70       	andi	r25, 0x03	; 3
    290c:	02 c0       	rjmp	.+4      	; 0x2912 <process_action+0x1de>
                    } else {
                        host_consumer_send(0);
    290e:	80 e0       	ldi	r24, 0x00	; 0
    2910:	90 e0       	ldi	r25, 0x00	; 0
            break;
#endif
        default:
            break;
    }
}
    2912:	0f 90       	pop	r0
    2914:	0f 90       	pop	r0
    2916:	0f 90       	pop	r0
    2918:	0f 90       	pop	r0
    291a:	0f 90       	pop	r0
    291c:	df 91       	pop	r29
    291e:	cf 91       	pop	r28
    2920:	1f 91       	pop	r17
    2922:	0f 91       	pop	r16
    2924:	ff 90       	pop	r15
    2926:	ef 90       	pop	r14
    2928:	df 90       	pop	r13
    292a:	cf 90       	pop	r12
                    break;
                case PAGE_CONSUMER:
                    if (event.pressed) {
                        host_consumer_send(action.usage.code);
                    } else {
                        host_consumer_send(0);
    292c:	0c 94 dc 10 	jmp	0x21b8	; 0x21b8 <host_consumer_send>
#endif
#ifdef MOUSEKEY_ENABLE
        /* Mouse key */
        case ACT_MOUSEKEY:
            if (event.pressed) {
                mousekey_on(action.key.code);
    2930:	80 2f       	mov	r24, r16
            break;
#endif
#ifdef MOUSEKEY_ENABLE
        /* Mouse key */
        case ACT_MOUSEKEY:
            if (event.pressed) {
    2932:	ff 20       	and	r15, r15
    2934:	19 f0       	breq	.+6      	; 0x293c <process_action+0x208>
                mousekey_on(action.key.code);
    2936:	0e 94 4c 22 	call	0x4498	; 0x4498 <mousekey_on>
    293a:	02 c0       	rjmp	.+4      	; 0x2940 <process_action+0x20c>
                mousekey_send();
            } else {
                mousekey_off(action.key.code);
    293c:	0e 94 b4 22 	call	0x4568	; 0x4568 <mousekey_off>
            break;
#endif
        default:
            break;
    }
}
    2940:	0f 90       	pop	r0
    2942:	0f 90       	pop	r0
    2944:	0f 90       	pop	r0
    2946:	0f 90       	pop	r0
    2948:	0f 90       	pop	r0
    294a:	df 91       	pop	r29
    294c:	cf 91       	pop	r28
    294e:	1f 91       	pop	r17
    2950:	0f 91       	pop	r16
    2952:	ff 90       	pop	r15
    2954:	ef 90       	pop	r14
    2956:	df 90       	pop	r13
    2958:	cf 90       	pop	r12
            if (event.pressed) {
                mousekey_on(action.key.code);
                mousekey_send();
            } else {
                mousekey_off(action.key.code);
                mousekey_send();
    295a:	0c 94 39 23 	jmp	0x4672	; 0x4672 <mousekey_send>
            }
            break;
#endif
#ifndef NO_ACTION_LAYER
        case ACT_LAYER:
            if (action.layer_bitop.on == 0) {
    295e:	81 2f       	mov	r24, r17
    2960:	83 70       	andi	r24, 0x03	; 3
    2962:	09 f0       	breq	.+2      	; 0x2966 <process_action+0x232>
    2964:	70 c0       	rjmp	.+224    	; 0x2a46 <process_action+0x312>
                /* Default Layer Bitwise Operation */
                if (!event.pressed) {
    2966:	f1 10       	cpse	r15, r1
    2968:	d3 c1       	rjmp	.+934    	; 0x2d10 <process_action+0x5dc>
                    uint8_t shift = action.layer_bitop.part*4;
    296a:	20 2f       	mov	r18, r16
    296c:	22 95       	swap	r18
    296e:	26 95       	lsr	r18
    2970:	27 70       	andi	r18, 0x07	; 7
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
    2972:	22 0f       	add	r18, r18
    2974:	22 0f       	add	r18, r18
    2976:	60 2f       	mov	r22, r16
    2978:	6f 70       	andi	r22, 0x0F	; 15
    297a:	86 2f       	mov	r24, r22
    297c:	90 e0       	ldi	r25, 0x00	; 0
    297e:	a0 e0       	ldi	r26, 0x00	; 0
    2980:	b0 e0       	ldi	r27, 0x00	; 0
    2982:	6c 01       	movw	r12, r24
    2984:	7d 01       	movw	r14, r26
    2986:	02 2e       	mov	r0, r18
    2988:	04 c0       	rjmp	.+8      	; 0x2992 <process_action+0x25e>
    298a:	cc 0c       	add	r12, r12
    298c:	dd 1c       	adc	r13, r13
    298e:	ee 1c       	adc	r14, r14
    2990:	ff 1c       	adc	r15, r15
    2992:	0a 94       	dec	r0
    2994:	d2 f7       	brpl	.-12     	; 0x298a <process_action+0x256>
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
    2996:	04 ff       	sbrs	r16, 4
    2998:	12 c0       	rjmp	.+36     	; 0x29be <process_action+0x28a>
    299a:	8f e0       	ldi	r24, 0x0F	; 15
    299c:	90 e0       	ldi	r25, 0x00	; 0
    299e:	a0 e0       	ldi	r26, 0x00	; 0
    29a0:	b0 e0       	ldi	r27, 0x00	; 0
    29a2:	04 c0       	rjmp	.+8      	; 0x29ac <process_action+0x278>
    29a4:	88 0f       	add	r24, r24
    29a6:	99 1f       	adc	r25, r25
    29a8:	aa 1f       	adc	r26, r26
    29aa:	bb 1f       	adc	r27, r27
    29ac:	2a 95       	dec	r18
    29ae:	d2 f7       	brpl	.-12     	; 0x29a4 <process_action+0x270>
    29b0:	bc 01       	movw	r22, r24
    29b2:	cd 01       	movw	r24, r26
    29b4:	60 95       	com	r22
    29b6:	70 95       	com	r23
    29b8:	80 95       	com	r24
    29ba:	90 95       	com	r25
    29bc:	03 c0       	rjmp	.+6      	; 0x29c4 <process_action+0x290>
    29be:	60 e0       	ldi	r22, 0x00	; 0
    29c0:	70 e0       	ldi	r23, 0x00	; 0
    29c2:	cb 01       	movw	r24, r22
                    switch (action.layer_bitop.op) {
    29c4:	16 95       	lsr	r17
    29c6:	16 95       	lsr	r17
    29c8:	13 70       	andi	r17, 0x03	; 3
    29ca:	12 30       	cpi	r17, 0x02	; 2
    29cc:	b1 f0       	breq	.+44     	; 0x29fa <process_action+0x2c6>
    29ce:	40 f5       	brcc	.+80     	; 0x2a20 <process_action+0x2ec>
    29d0:	6c 29       	or	r22, r12
    29d2:	7d 29       	or	r23, r13
    29d4:	8e 29       	or	r24, r14
    29d6:	9f 29       	or	r25, r15
    29d8:	11 30       	cpi	r17, 0x01	; 1
    29da:	31 f1       	breq	.+76     	; 0x2a28 <process_action+0x2f4>
            break;
#endif
        default:
            break;
    }
}
    29dc:	0f 90       	pop	r0
    29de:	0f 90       	pop	r0
    29e0:	0f 90       	pop	r0
    29e2:	0f 90       	pop	r0
    29e4:	0f 90       	pop	r0
    29e6:	df 91       	pop	r29
    29e8:	cf 91       	pop	r28
    29ea:	1f 91       	pop	r17
    29ec:	0f 91       	pop	r16
    29ee:	ff 90       	pop	r15
    29f0:	ef 90       	pop	r14
    29f2:	df 90       	pop	r13
    29f4:	cf 90       	pop	r12
                if (!event.pressed) {
                    uint8_t shift = action.layer_bitop.part*4;
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: default_layer_and(bits | mask); break;
    29f6:	0c 94 2b 1b 	jmp	0x3656	; 0x3656 <default_layer_and>
                        case OP_BIT_OR:  default_layer_or(bits | mask);  break;
                        case OP_BIT_XOR: default_layer_xor(bits | mask); break;
    29fa:	6c 29       	or	r22, r12
    29fc:	7d 29       	or	r23, r13
    29fe:	8e 29       	or	r24, r14
    2a00:	9f 29       	or	r25, r15
            break;
#endif
        default:
            break;
    }
}
    2a02:	0f 90       	pop	r0
    2a04:	0f 90       	pop	r0
    2a06:	0f 90       	pop	r0
    2a08:	0f 90       	pop	r0
    2a0a:	0f 90       	pop	r0
    2a0c:	df 91       	pop	r29
    2a0e:	cf 91       	pop	r28
    2a10:	1f 91       	pop	r17
    2a12:	0f 91       	pop	r16
    2a14:	ff 90       	pop	r15
    2a16:	ef 90       	pop	r14
    2a18:	df 90       	pop	r13
    2a1a:	cf 90       	pop	r12
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: default_layer_and(bits | mask); break;
                        case OP_BIT_OR:  default_layer_or(bits | mask);  break;
                        case OP_BIT_XOR: default_layer_xor(bits | mask); break;
    2a1c:	0c 94 45 1b 	jmp	0x368a	; 0x368a <default_layer_xor>
                        case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
    2a20:	0e 94 2b 1b 	call	0x3656	; 0x3656 <default_layer_and>
    2a24:	c7 01       	movw	r24, r14
    2a26:	b6 01       	movw	r22, r12
            break;
#endif
        default:
            break;
    }
}
    2a28:	0f 90       	pop	r0
    2a2a:	0f 90       	pop	r0
    2a2c:	0f 90       	pop	r0
    2a2e:	0f 90       	pop	r0
    2a30:	0f 90       	pop	r0
    2a32:	df 91       	pop	r29
    2a34:	cf 91       	pop	r28
    2a36:	1f 91       	pop	r17
    2a38:	0f 91       	pop	r16
    2a3a:	ff 90       	pop	r15
    2a3c:	ef 90       	pop	r14
    2a3e:	df 90       	pop	r13
    2a40:	cf 90       	pop	r12
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: default_layer_and(bits | mask); break;
                        case OP_BIT_OR:  default_layer_or(bits | mask);  break;
                        case OP_BIT_XOR: default_layer_xor(bits | mask); break;
                        case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
    2a42:	0c 94 11 1b 	jmp	0x3622	; 0x3622 <default_layer_or>
                    }
                }
            } else {
                /* Layer Bitwise Operation */
                if (event.pressed ? (action.layer_bitop.on & ON_PRESS) :
    2a46:	ff 20       	and	r15, r15
    2a48:	19 f0       	breq	.+6      	; 0x2a50 <process_action+0x31c>
    2a4a:	81 2f       	mov	r24, r17
    2a4c:	81 70       	andi	r24, 0x01	; 1
    2a4e:	01 c0       	rjmp	.+2      	; 0x2a52 <process_action+0x31e>
    2a50:	86 95       	lsr	r24
    2a52:	88 23       	and	r24, r24
    2a54:	09 f4       	brne	.+2      	; 0x2a58 <process_action+0x324>
    2a56:	5c c1       	rjmp	.+696    	; 0x2d10 <process_action+0x5dc>
                                    (action.layer_bitop.on & ON_RELEASE)) {
                    uint8_t shift = action.layer_bitop.part*4;
    2a58:	20 2f       	mov	r18, r16
    2a5a:	22 95       	swap	r18
    2a5c:	26 95       	lsr	r18
    2a5e:	27 70       	andi	r18, 0x07	; 7
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
    2a60:	22 0f       	add	r18, r18
    2a62:	22 0f       	add	r18, r18
    2a64:	60 2f       	mov	r22, r16
    2a66:	6f 70       	andi	r22, 0x0F	; 15
    2a68:	86 2f       	mov	r24, r22
    2a6a:	90 e0       	ldi	r25, 0x00	; 0
    2a6c:	a0 e0       	ldi	r26, 0x00	; 0
    2a6e:	b0 e0       	ldi	r27, 0x00	; 0
    2a70:	6c 01       	movw	r12, r24
    2a72:	7d 01       	movw	r14, r26
    2a74:	02 2e       	mov	r0, r18
    2a76:	04 c0       	rjmp	.+8      	; 0x2a80 <process_action+0x34c>
    2a78:	cc 0c       	add	r12, r12
    2a7a:	dd 1c       	adc	r13, r13
    2a7c:	ee 1c       	adc	r14, r14
    2a7e:	ff 1c       	adc	r15, r15
    2a80:	0a 94       	dec	r0
    2a82:	d2 f7       	brpl	.-12     	; 0x2a78 <process_action+0x344>
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
    2a84:	04 ff       	sbrs	r16, 4
    2a86:	12 c0       	rjmp	.+36     	; 0x2aac <process_action+0x378>
    2a88:	8f e0       	ldi	r24, 0x0F	; 15
    2a8a:	90 e0       	ldi	r25, 0x00	; 0
    2a8c:	a0 e0       	ldi	r26, 0x00	; 0
    2a8e:	b0 e0       	ldi	r27, 0x00	; 0
    2a90:	04 c0       	rjmp	.+8      	; 0x2a9a <process_action+0x366>
    2a92:	88 0f       	add	r24, r24
    2a94:	99 1f       	adc	r25, r25
    2a96:	aa 1f       	adc	r26, r26
    2a98:	bb 1f       	adc	r27, r27
    2a9a:	2a 95       	dec	r18
    2a9c:	d2 f7       	brpl	.-12     	; 0x2a92 <process_action+0x35e>
    2a9e:	bc 01       	movw	r22, r24
    2aa0:	cd 01       	movw	r24, r26
    2aa2:	60 95       	com	r22
    2aa4:	70 95       	com	r23
    2aa6:	80 95       	com	r24
    2aa8:	90 95       	com	r25
    2aaa:	03 c0       	rjmp	.+6      	; 0x2ab2 <process_action+0x37e>
    2aac:	60 e0       	ldi	r22, 0x00	; 0
    2aae:	70 e0       	ldi	r23, 0x00	; 0
    2ab0:	cb 01       	movw	r24, r22
                    switch (action.layer_bitop.op) {
    2ab2:	16 95       	lsr	r17
    2ab4:	16 95       	lsr	r17
    2ab6:	13 70       	andi	r17, 0x03	; 3
    2ab8:	12 30       	cpi	r17, 0x02	; 2
    2aba:	b1 f0       	breq	.+44     	; 0x2ae8 <process_action+0x3b4>
    2abc:	40 f5       	brcc	.+80     	; 0x2b0e <process_action+0x3da>
    2abe:	6c 29       	or	r22, r12
    2ac0:	7d 29       	or	r23, r13
    2ac2:	8e 29       	or	r24, r14
    2ac4:	9f 29       	or	r25, r15
    2ac6:	11 30       	cpi	r17, 0x01	; 1
    2ac8:	31 f1       	breq	.+76     	; 0x2b16 <process_action+0x3e2>
            break;
#endif
        default:
            break;
    }
}
    2aca:	0f 90       	pop	r0
    2acc:	0f 90       	pop	r0
    2ace:	0f 90       	pop	r0
    2ad0:	0f 90       	pop	r0
    2ad2:	0f 90       	pop	r0
    2ad4:	df 91       	pop	r29
    2ad6:	cf 91       	pop	r28
    2ad8:	1f 91       	pop	r17
    2ada:	0f 91       	pop	r16
    2adc:	ff 90       	pop	r15
    2ade:	ef 90       	pop	r14
    2ae0:	df 90       	pop	r13
    2ae2:	cf 90       	pop	r12
                                    (action.layer_bitop.on & ON_RELEASE)) {
                    uint8_t shift = action.layer_bitop.part*4;
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: layer_and(bits | mask); break;
    2ae4:	0c 94 f2 1b 	jmp	0x37e4	; 0x37e4 <layer_and>
                        case OP_BIT_OR:  layer_or(bits | mask);  break;
                        case OP_BIT_XOR: layer_xor(bits | mask); break;
    2ae8:	6c 29       	or	r22, r12
    2aea:	7d 29       	or	r23, r13
    2aec:	8e 29       	or	r24, r14
    2aee:	9f 29       	or	r25, r15
            break;
#endif
        default:
            break;
    }
}
    2af0:	0f 90       	pop	r0
    2af2:	0f 90       	pop	r0
    2af4:	0f 90       	pop	r0
    2af6:	0f 90       	pop	r0
    2af8:	0f 90       	pop	r0
    2afa:	df 91       	pop	r29
    2afc:	cf 91       	pop	r28
    2afe:	1f 91       	pop	r17
    2b00:	0f 91       	pop	r16
    2b02:	ff 90       	pop	r15
    2b04:	ef 90       	pop	r14
    2b06:	df 90       	pop	r13
    2b08:	cf 90       	pop	r12
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: layer_and(bits | mask); break;
                        case OP_BIT_OR:  layer_or(bits | mask);  break;
                        case OP_BIT_XOR: layer_xor(bits | mask); break;
    2b0a:	0c 94 04 1c 	jmp	0x3808	; 0x3808 <layer_xor>
                        case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
    2b0e:	0e 94 f2 1b 	call	0x37e4	; 0x37e4 <layer_and>
    2b12:	c7 01       	movw	r24, r14
    2b14:	b6 01       	movw	r22, r12
            break;
#endif
        default:
            break;
    }
}
    2b16:	0f 90       	pop	r0
    2b18:	0f 90       	pop	r0
    2b1a:	0f 90       	pop	r0
    2b1c:	0f 90       	pop	r0
    2b1e:	0f 90       	pop	r0
    2b20:	df 91       	pop	r29
    2b22:	cf 91       	pop	r28
    2b24:	1f 91       	pop	r17
    2b26:	0f 91       	pop	r16
    2b28:	ff 90       	pop	r15
    2b2a:	ef 90       	pop	r14
    2b2c:	df 90       	pop	r13
    2b2e:	cf 90       	pop	r12
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: layer_and(bits | mask); break;
                        case OP_BIT_OR:  layer_or(bits | mask);  break;
                        case OP_BIT_XOR: layer_xor(bits | mask); break;
                        case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
    2b30:	0c 94 e0 1b 	jmp	0x37c0	; 0x37c0 <layer_or>
            }
            break;
    #ifndef NO_ACTION_TAPPING
        case ACT_LAYER_TAP:
        case ACT_LAYER_TAP_EXT:
            switch (action.layer_tap.code) {
    2b34:	00 3f       	cpi	r16, 0xF0	; 240
    2b36:	c1 f1       	breq	.+112    	; 0x2ba8 <process_action+0x474>
    2b38:	28 f4       	brcc	.+10     	; 0x2b44 <process_action+0x410>
    2b3a:	80 e4       	ldi	r24, 0x40	; 64
    2b3c:	80 0f       	add	r24, r16
    2b3e:	80 32       	cpi	r24, 0x20	; 32
    2b40:	50 f0       	brcs	.+20     	; 0x2b56 <process_action+0x422>
    2b42:	96 c0       	rjmp	.+300    	; 0x2c70 <process_action+0x53c>
    2b44:	02 3f       	cpi	r16, 0xF2	; 242
    2b46:	09 f4       	brne	.+2      	; 0x2b4a <process_action+0x416>
    2b48:	5e c0       	rjmp	.+188    	; 0x2c06 <process_action+0x4d2>
    2b4a:	08 f4       	brcc	.+2      	; 0x2b4e <process_action+0x41a>
    2b4c:	49 c0       	rjmp	.+146    	; 0x2be0 <process_action+0x4ac>
    2b4e:	03 3f       	cpi	r16, 0xF3	; 243
    2b50:	09 f4       	brne	.+2      	; 0x2b54 <process_action+0x420>
    2b52:	6c c0       	rjmp	.+216    	; 0x2c2c <process_action+0x4f8>
    2b54:	8d c0       	rjmp	.+282    	; 0x2c70 <process_action+0x53c>
    2b56:	f0 2f       	mov	r31, r16
    2b58:	f0 71       	andi	r31, 0x10	; 16
    2b5a:	ef 2e       	mov	r14, r31
    2b5c:	81 2f       	mov	r24, r17
    2b5e:	8f 71       	andi	r24, 0x1F	; 31
                case 0xc0 ... 0xdf:
                    /* layer On/Off with modifiers */
                    if (event.pressed) {
    2b60:	ff 20       	and	r15, r15
    2b62:	51 f0       	breq	.+20     	; 0x2b78 <process_action+0x444>
                        layer_on(action.layer_tap.val);
    2b64:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <layer_on>
                        register_mods((action.layer_tap.code & 0x10) ?
    2b68:	80 2f       	mov	r24, r16
    2b6a:	ee 20       	and	r14, r14
    2b6c:	19 f0       	breq	.+6      	; 0x2b74 <process_action+0x440>
    2b6e:	82 95       	swap	r24
    2b70:	80 7f       	andi	r24, 0xF0	; 240
    2b72:	8b ce       	rjmp	.-746    	; 0x288a <process_action+0x156>
    2b74:	8f 70       	andi	r24, 0x0F	; 15
    2b76:	89 ce       	rjmp	.-750    	; 0x288a <process_action+0x156>
                                (action.layer_tap.code & 0x0f) << 4 :
                                (action.layer_tap.code & 0x0f));
                    } else {
                        layer_off(action.layer_tap.val);
    2b78:	0e 94 9a 1b 	call	0x3734	; 0x3734 <layer_off>
                        unregister_mods((action.layer_tap.code & 0x10) ?
    2b7c:	80 2f       	mov	r24, r16
    2b7e:	ee 20       	and	r14, r14
    2b80:	19 f0       	breq	.+6      	; 0x2b88 <process_action+0x454>
    2b82:	82 95       	swap	r24
    2b84:	80 7f       	andi	r24, 0xF0	; 240
    2b86:	01 c0       	rjmp	.+2      	; 0x2b8a <process_action+0x456>
    2b88:	8f 70       	andi	r24, 0x0F	; 15
            break;
#endif
        default:
            break;
    }
}
    2b8a:	0f 90       	pop	r0
    2b8c:	0f 90       	pop	r0
    2b8e:	0f 90       	pop	r0
    2b90:	0f 90       	pop	r0
    2b92:	0f 90       	pop	r0
    2b94:	df 91       	pop	r29
    2b96:	cf 91       	pop	r28
    2b98:	1f 91       	pop	r17
    2b9a:	0f 91       	pop	r16
    2b9c:	ff 90       	pop	r15
    2b9e:	ef 90       	pop	r14
    2ba0:	df 90       	pop	r13
    2ba2:	cf 90       	pop	r12
                        register_mods((action.layer_tap.code & 0x10) ?
                                (action.layer_tap.code & 0x0f) << 4 :
                                (action.layer_tap.code & 0x0f));
                    } else {
                        layer_off(action.layer_tap.val);
                        unregister_mods((action.layer_tap.code & 0x10) ?
    2ba4:	0c 94 93 13 	jmp	0x2726	; 0x2726 <unregister_mods>
                                (action.layer_tap.code & 0x0f));
                    }
                    break;
                case OP_TAP_TOGGLE:
                    /* tap toggle */
                    if (event.pressed) {
    2ba8:	ff 20       	and	r15, r15
    2baa:	a9 f0       	breq	.+42     	; 0x2bd6 <process_action+0x4a2>
                        if (tap_count < TAPPING_TOGGLE) {
    2bac:	84 e0       	ldi	r24, 0x04	; 4
    2bae:	8e 15       	cp	r24, r14
    2bb0:	08 f4       	brcc	.+2      	; 0x2bb4 <process_action+0x480>
    2bb2:	ae c0       	rjmp	.+348    	; 0x2d10 <process_action+0x5dc>
                            layer_invert(action.layer_tap.val);
    2bb4:	81 2f       	mov	r24, r17
    2bb6:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    2bb8:	0f 90       	pop	r0
    2bba:	0f 90       	pop	r0
    2bbc:	0f 90       	pop	r0
    2bbe:	0f 90       	pop	r0
    2bc0:	0f 90       	pop	r0
    2bc2:	df 91       	pop	r29
    2bc4:	cf 91       	pop	r28
    2bc6:	1f 91       	pop	r17
    2bc8:	0f 91       	pop	r16
    2bca:	ff 90       	pop	r15
    2bcc:	ef 90       	pop	r14
    2bce:	df 90       	pop	r13
    2bd0:	cf 90       	pop	r12
                    break;
                case OP_TAP_TOGGLE:
                    /* tap toggle */
                    if (event.pressed) {
                        if (tap_count < TAPPING_TOGGLE) {
                            layer_invert(action.layer_tap.val);
    2bd2:	0c 94 bf 1b 	jmp	0x377e	; 0x377e <layer_invert>
                        }
                    } else {
                        if (tap_count <= TAPPING_TOGGLE) {
    2bd6:	e5 e0       	ldi	r30, 0x05	; 5
    2bd8:	ee 15       	cp	r30, r14
    2bda:	08 f4       	brcc	.+2      	; 0x2bde <process_action+0x4aa>
    2bdc:	99 c0       	rjmp	.+306    	; 0x2d10 <process_action+0x5dc>
    2bde:	ea cf       	rjmp	.-44     	; 0x2bb4 <process_action+0x480>
                            layer_invert(action.layer_tap.val);
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
    2be0:	ff 20       	and	r15, r15
    2be2:	99 f0       	breq	.+38     	; 0x2c0a <process_action+0x4d6>
    2be4:	81 2f       	mov	r24, r17
    2be6:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    2be8:	0f 90       	pop	r0
    2bea:	0f 90       	pop	r0
    2bec:	0f 90       	pop	r0
    2bee:	0f 90       	pop	r0
    2bf0:	0f 90       	pop	r0
    2bf2:	df 91       	pop	r29
    2bf4:	cf 91       	pop	r28
    2bf6:	1f 91       	pop	r17
    2bf8:	0f 91       	pop	r16
    2bfa:	ff 90       	pop	r15
    2bfc:	ef 90       	pop	r14
    2bfe:	df 90       	pop	r13
    2c00:	cf 90       	pop	r12
                            layer_invert(action.layer_tap.val);
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
    2c02:	0c 94 79 1b 	jmp	0x36f2	; 0x36f2 <layer_on>
                                    layer_off(action.layer_tap.val);
                    break;
                case OP_OFF_ON:
                    event.pressed ? layer_off(action.layer_tap.val) :
    2c06:	ff 20       	and	r15, r15
    2c08:	69 f3       	breq	.-38     	; 0x2be4 <process_action+0x4b0>
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
                                    layer_off(action.layer_tap.val);
    2c0a:	81 2f       	mov	r24, r17
    2c0c:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    2c0e:	0f 90       	pop	r0
    2c10:	0f 90       	pop	r0
    2c12:	0f 90       	pop	r0
    2c14:	0f 90       	pop	r0
    2c16:	0f 90       	pop	r0
    2c18:	df 91       	pop	r29
    2c1a:	cf 91       	pop	r28
    2c1c:	1f 91       	pop	r17
    2c1e:	0f 91       	pop	r16
    2c20:	ff 90       	pop	r15
    2c22:	ef 90       	pop	r14
    2c24:	df 90       	pop	r13
    2c26:	cf 90       	pop	r12
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
                                    layer_off(action.layer_tap.val);
    2c28:	0c 94 9a 1b 	jmp	0x3734	; 0x3734 <layer_off>
                case OP_OFF_ON:
                    event.pressed ? layer_off(action.layer_tap.val) :
                                    layer_on(action.layer_tap.val);
                    break;
                case OP_SET_CLEAR:
                    event.pressed ? layer_move(action.layer_tap.val) :
    2c2c:	ff 20       	and	r15, r15
    2c2e:	89 f0       	breq	.+34     	; 0x2c52 <process_action+0x51e>
    2c30:	81 2f       	mov	r24, r17
    2c32:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    2c34:	0f 90       	pop	r0
    2c36:	0f 90       	pop	r0
    2c38:	0f 90       	pop	r0
    2c3a:	0f 90       	pop	r0
    2c3c:	0f 90       	pop	r0
    2c3e:	df 91       	pop	r29
    2c40:	cf 91       	pop	r28
    2c42:	1f 91       	pop	r17
    2c44:	0f 91       	pop	r16
    2c46:	ff 90       	pop	r15
    2c48:	ef 90       	pop	r14
    2c4a:	df 90       	pop	r13
    2c4c:	cf 90       	pop	r12
                case OP_OFF_ON:
                    event.pressed ? layer_off(action.layer_tap.val) :
                                    layer_on(action.layer_tap.val);
                    break;
                case OP_SET_CLEAR:
                    event.pressed ? layer_move(action.layer_tap.val) :
    2c4e:	0c 94 64 1b 	jmp	0x36c8	; 0x36c8 <layer_move>
            break;
#endif
        default:
            break;
    }
}
    2c52:	0f 90       	pop	r0
    2c54:	0f 90       	pop	r0
    2c56:	0f 90       	pop	r0
    2c58:	0f 90       	pop	r0
    2c5a:	0f 90       	pop	r0
    2c5c:	df 91       	pop	r29
    2c5e:	cf 91       	pop	r28
    2c60:	1f 91       	pop	r17
    2c62:	0f 91       	pop	r16
    2c64:	ff 90       	pop	r15
    2c66:	ef 90       	pop	r14
    2c68:	df 90       	pop	r13
    2c6a:	cf 90       	pop	r12
                    event.pressed ? layer_off(action.layer_tap.val) :
                                    layer_on(action.layer_tap.val);
                    break;
                case OP_SET_CLEAR:
                    event.pressed ? layer_move(action.layer_tap.val) :
                                    layer_clear();
    2c6c:	0c 94 5f 1b 	jmp	0x36be	; 0x36be <layer_clear>
                    break;
                default:
                    /* tap key */
                    if (event.pressed) {
    2c70:	ff 20       	and	r15, r15
    2c72:	99 f0       	breq	.+38     	; 0x2c9a <process_action+0x566>
                        if (tap_count > 0) {
    2c74:	ee 20       	and	r14, r14
    2c76:	09 f4       	brne	.+2      	; 0x2c7a <process_action+0x546>
    2c78:	b5 cf       	rjmp	.-150    	; 0x2be4 <process_action+0x4b0>
                            dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
                            register_code(action.layer_tap.code);
    2c7a:	80 2f       	mov	r24, r16
            break;
#endif
        default:
            break;
    }
}
    2c7c:	0f 90       	pop	r0
    2c7e:	0f 90       	pop	r0
    2c80:	0f 90       	pop	r0
    2c82:	0f 90       	pop	r0
    2c84:	0f 90       	pop	r0
    2c86:	df 91       	pop	r29
    2c88:	cf 91       	pop	r28
    2c8a:	1f 91       	pop	r17
    2c8c:	0f 91       	pop	r16
    2c8e:	ff 90       	pop	r15
    2c90:	ef 90       	pop	r14
    2c92:	df 90       	pop	r13
    2c94:	cf 90       	pop	r12
                default:
                    /* tap key */
                    if (event.pressed) {
                        if (tap_count > 0) {
                            dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
                            register_code(action.layer_tap.code);
    2c96:	0c 94 34 12 	jmp	0x2468	; 0x2468 <register_code>
                        } else {
                            dprint("KEYMAP_TAP_KEY: No tap: On on press\n");
                            layer_on(action.layer_tap.val);
                        }
                    } else {
                        if (tap_count > 0) {
    2c9a:	ee 20       	and	r14, r14
    2c9c:	09 f4       	brne	.+2      	; 0x2ca0 <process_action+0x56c>
    2c9e:	b5 cf       	rjmp	.-150    	; 0x2c0a <process_action+0x4d6>
                            dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
                            unregister_code(action.layer_tap.code);
    2ca0:	80 2f       	mov	r24, r16
            break;
#endif
        default:
            break;
    }
}
    2ca2:	0f 90       	pop	r0
    2ca4:	0f 90       	pop	r0
    2ca6:	0f 90       	pop	r0
    2ca8:	0f 90       	pop	r0
    2caa:	0f 90       	pop	r0
    2cac:	df 91       	pop	r29
    2cae:	cf 91       	pop	r28
    2cb0:	1f 91       	pop	r17
    2cb2:	0f 91       	pop	r16
    2cb4:	ff 90       	pop	r15
    2cb6:	ef 90       	pop	r14
    2cb8:	df 90       	pop	r13
    2cba:	cf 90       	pop	r12
                            layer_on(action.layer_tap.val);
                        }
                    } else {
                        if (tap_count > 0) {
                            dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
                            unregister_code(action.layer_tap.code);
    2cbc:	0c 94 22 13 	jmp	0x2644	; 0x2644 <unregister_code>
    #endif
#endif
        /* Extentions */
#ifndef NO_ACTION_MACRO
        case ACT_MACRO:
            action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
    2cc0:	41 2f       	mov	r20, r17
    2cc2:	4f 70       	andi	r20, 0x0F	; 15
    2cc4:	60 2f       	mov	r22, r16
    2cc6:	c6 01       	movw	r24, r12
    2cc8:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <action_get_macro>
            break;
#endif
        default:
            break;
    }
}
    2ccc:	0f 90       	pop	r0
    2cce:	0f 90       	pop	r0
    2cd0:	0f 90       	pop	r0
    2cd2:	0f 90       	pop	r0
    2cd4:	0f 90       	pop	r0
    2cd6:	df 91       	pop	r29
    2cd8:	cf 91       	pop	r28
    2cda:	1f 91       	pop	r17
    2cdc:	0f 91       	pop	r16
    2cde:	ff 90       	pop	r15
    2ce0:	ef 90       	pop	r14
    2ce2:	df 90       	pop	r13
    2ce4:	cf 90       	pop	r12
    #endif
#endif
        /* Extentions */
#ifndef NO_ACTION_MACRO
        case ACT_MACRO:
            action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
    2ce6:	0c 94 61 1a 	jmp	0x34c2	; 0x34c2 <action_macro_play>
#endif
        case ACT_COMMAND:
            break;
#ifndef NO_ACTION_FUNCTION
        case ACT_FUNCTION:
            action_function(record, action.func.id, action.func.opt);
    2cea:	41 2f       	mov	r20, r17
    2cec:	4f 70       	andi	r20, 0x0F	; 15
    2cee:	60 2f       	mov	r22, r16
    2cf0:	c6 01       	movw	r24, r12
            break;
#endif
        default:
            break;
    }
}
    2cf2:	0f 90       	pop	r0
    2cf4:	0f 90       	pop	r0
    2cf6:	0f 90       	pop	r0
    2cf8:	0f 90       	pop	r0
    2cfa:	0f 90       	pop	r0
    2cfc:	df 91       	pop	r29
    2cfe:	cf 91       	pop	r28
    2d00:	1f 91       	pop	r17
    2d02:	0f 91       	pop	r16
    2d04:	ff 90       	pop	r15
    2d06:	ef 90       	pop	r14
    2d08:	df 90       	pop	r13
    2d0a:	cf 90       	pop	r12
#endif
        case ACT_COMMAND:
            break;
#ifndef NO_ACTION_FUNCTION
        case ACT_FUNCTION:
            action_function(record, action.func.id, action.func.opt);
    2d0c:	0c 94 31 07 	jmp	0xe62	; 0xe62 <action_function>
            break;
#endif
        default:
            break;
    }
}
    2d10:	0f 90       	pop	r0
    2d12:	0f 90       	pop	r0
    2d14:	0f 90       	pop	r0
    2d16:	0f 90       	pop	r0
    2d18:	0f 90       	pop	r0
    2d1a:	df 91       	pop	r29
    2d1c:	cf 91       	pop	r28
    2d1e:	1f 91       	pop	r17
    2d20:	0f 91       	pop	r16
    2d22:	ff 90       	pop	r15
    2d24:	ef 90       	pop	r14
    2d26:	df 90       	pop	r13
    2d28:	cf 90       	pop	r12
    2d2a:	08 95       	ret

00002d2c <clear_keyboard_but_mods>:
    clear_keyboard_but_mods();
}

void clear_keyboard_but_mods(void)
{
    clear_weak_mods();
    2d2c:	0e 94 60 1d 	call	0x3ac0	; 0x3ac0 <clear_weak_mods>
    clear_keys();
    2d30:	0e 94 2f 1d 	call	0x3a5e	; 0x3a5e <clear_keys>
    send_keyboard_report();
    2d34:	0e 94 7a 1d 	call	0x3af4	; 0x3af4 <send_keyboard_report>
#ifdef MOUSEKEY_ENABLE
    mousekey_clear();
    2d38:	0e 94 6b 24 	call	0x48d6	; 0x48d6 <mousekey_clear>
    mousekey_send();
    2d3c:	0e 94 39 23 	call	0x4672	; 0x4672 <mousekey_send>
#endif
#ifdef EXTRAKEY_ENABLE
    host_system_send(0);
    2d40:	80 e0       	ldi	r24, 0x00	; 0
    2d42:	90 e0       	ldi	r25, 0x00	; 0
    2d44:	0e 94 af 10 	call	0x215e	; 0x215e <host_system_send>
    host_consumer_send(0);
    2d48:	80 e0       	ldi	r24, 0x00	; 0
    2d4a:	90 e0       	ldi	r25, 0x00	; 0
    2d4c:	0c 94 dc 10 	jmp	0x21b8	; 0x21b8 <host_consumer_send>

00002d50 <clear_keyboard>:
    }
}

void clear_keyboard(void)
{
    clear_mods();
    2d50:	0e 94 50 1d 	call	0x3aa0	; 0x3aa0 <clear_mods>
    clear_keyboard_but_mods();
    2d54:	0c 94 96 16 	jmp	0x2d2c	; 0x2d2c <clear_keyboard_but_mods>

00002d58 <is_tap_key>:
    host_consumer_send(0);
#endif
}

bool is_tap_key(keyevent_t event)
{
    2d58:	1f 93       	push	r17
    2d5a:	cf 93       	push	r28
    2d5c:	df 93       	push	r29
    2d5e:	00 d0       	rcall	.+0      	; 0x2d60 <is_tap_key+0x8>
    2d60:	00 d0       	rcall	.+0      	; 0x2d62 <is_tap_key+0xa>
    2d62:	1f 92       	push	r1
    2d64:	cd b7       	in	r28, 0x3d	; 61
    2d66:	de b7       	in	r29, 0x3e	; 62
    2d68:	94 2f       	mov	r25, r20
    2d6a:	49 83       	std	Y+1, r20	; 0x01
    2d6c:	25 2f       	mov	r18, r21
    2d6e:	5a 83       	std	Y+2, r21	; 0x02
    2d70:	6b 83       	std	Y+3, r22	; 0x03
    2d72:	7c 83       	std	Y+4, r23	; 0x04
    2d74:	8d 83       	std	Y+5, r24	; 0x05
    2d76:	4c 81       	ldd	r20, Y+4	; 0x04
    2d78:	5d 81       	ldd	r21, Y+5	; 0x05
    2d7a:	45 2b       	or	r20, r21
    2d7c:	31 f0       	breq	.+12     	; 0x2d8a <is_tap_key+0x32>
    2d7e:	2f 3f       	cpi	r18, 0xFF	; 255
    2d80:	31 f4       	brne	.+12     	; 0x2d8e <is_tap_key+0x36>
    2d82:	81 e0       	ldi	r24, 0x01	; 1
    2d84:	9f 3f       	cpi	r25, 0xFF	; 255
    2d86:	19 f4       	brne	.+6      	; 0x2d8e <is_tap_key+0x36>
    2d88:	03 c0       	rjmp	.+6      	; 0x2d90 <is_tap_key+0x38>
    2d8a:	81 e0       	ldi	r24, 0x01	; 1
    2d8c:	01 c0       	rjmp	.+2      	; 0x2d90 <is_tap_key+0x38>
    2d8e:	80 e0       	ldi	r24, 0x00	; 0
    if (IS_NOEVENT(event)) { return false; }
    2d90:	18 2f       	mov	r17, r24
    2d92:	11 70       	andi	r17, 0x01	; 1
    2d94:	80 fd       	sbrc	r24, 0
    2d96:	31 c0       	rjmp	.+98     	; 0x2dfa <is_tap_key+0xa2>

    action_t action = layer_switch_get_action(event);
    2d98:	49 81       	ldd	r20, Y+1	; 0x01
    2d9a:	5a 81       	ldd	r21, Y+2	; 0x02
    2d9c:	6b 81       	ldd	r22, Y+3	; 0x03
    2d9e:	7c 81       	ldd	r23, Y+4	; 0x04
    2da0:	8d 81       	ldd	r24, Y+5	; 0x05
    2da2:	0e 94 17 1c 	call	0x382e	; 0x382e <layer_switch_get_action>

    switch (action.kind.id) {
    2da6:	29 2f       	mov	r18, r25
    2da8:	22 95       	swap	r18
    2daa:	2f 70       	andi	r18, 0x0F	; 15
    2dac:	2c 30       	cpi	r18, 0x0C	; 12
    2dae:	30 f4       	brcc	.+12     	; 0x2dbc <is_tap_key+0x64>
    2db0:	2a 30       	cpi	r18, 0x0A	; 10
    2db2:	a0 f4       	brcc	.+40     	; 0x2ddc <is_tap_key+0x84>
    2db4:	22 50       	subi	r18, 0x02	; 2
    2db6:	22 30       	cpi	r18, 0x02	; 2
    2db8:	30 f0       	brcs	.+12     	; 0x2dc6 <is_tap_key+0x6e>
    2dba:	22 c0       	rjmp	.+68     	; 0x2e00 <is_tap_key+0xa8>
    2dbc:	2c 30       	cpi	r18, 0x0C	; 12
    2dbe:	c9 f0       	breq	.+50     	; 0x2df2 <is_tap_key+0x9a>
    2dc0:	2f 30       	cpi	r18, 0x0F	; 15
    2dc2:	b9 f0       	breq	.+46     	; 0x2df2 <is_tap_key+0x9a>
    2dc4:	1d c0       	rjmp	.+58     	; 0x2e00 <is_tap_key+0xa8>
        case ACT_LMODS_TAP:
        case ACT_RMODS_TAP:
            switch (action.key.code) {
    2dc6:	85 3a       	cpi	r24, 0xA5	; 165
    2dc8:	28 f4       	brcc	.+10     	; 0x2dd4 <is_tap_key+0x7c>
    2dca:	84 30       	cpi	r24, 0x04	; 4
    2dcc:	c0 f4       	brcc	.+48     	; 0x2dfe <is_tap_key+0xa6>
    2dce:	82 30       	cpi	r24, 0x02	; 2
    2dd0:	28 f4       	brcc	.+10     	; 0x2ddc <is_tap_key+0x84>
    2dd2:	15 c0       	rjmp	.+42     	; 0x2dfe <is_tap_key+0xa6>
    2dd4:	90 e2       	ldi	r25, 0x20	; 32
    2dd6:	98 0f       	add	r25, r24
    2dd8:	98 30       	cpi	r25, 0x08	; 8
    2dda:	88 f0       	brcs	.+34     	; 0x2dfe <is_tap_key+0xa6>
                case KC_LCTRL ... KC_RGUI:              // tap key
                    return true;
            }
        case ACT_LAYER_TAP:
        case ACT_LAYER_TAP_EXT:
            switch (action.layer_tap.code) {
    2ddc:	88 3e       	cpi	r24, 0xE8	; 232
    2dde:	30 f4       	brcc	.+12     	; 0x2dec <is_tap_key+0x94>
    2de0:	80 3e       	cpi	r24, 0xE0	; 224
    2de2:	68 f4       	brcc	.+26     	; 0x2dfe <is_tap_key+0xa6>
    2de4:	84 50       	subi	r24, 0x04	; 4
    2de6:	81 3a       	cpi	r24, 0xA1	; 161
    2de8:	58 f4       	brcc	.+22     	; 0x2e00 <is_tap_key+0xa8>
    2dea:	09 c0       	rjmp	.+18     	; 0x2dfe <is_tap_key+0xa6>
    2dec:	80 3f       	cpi	r24, 0xF0	; 240
    2dee:	41 f4       	brne	.+16     	; 0x2e00 <is_tap_key+0xa8>
    2df0:	06 c0       	rjmp	.+12     	; 0x2dfe <is_tap_key+0xa6>
                    return true;
            }
            return false;
        case ACT_MACRO:
        case ACT_FUNCTION:
            if (action.func.opt & FUNC_TAP) { return true; }
    2df2:	93 fb       	bst	r25, 3
    2df4:	11 27       	eor	r17, r17
    2df6:	10 f9       	bld	r17, 0
    2df8:	03 c0       	rjmp	.+6      	; 0x2e00 <is_tap_key+0xa8>
#endif
}

bool is_tap_key(keyevent_t event)
{
    if (IS_NOEVENT(event)) { return false; }
    2dfa:	10 e0       	ldi	r17, 0x00	; 0
    2dfc:	01 c0       	rjmp	.+2      	; 0x2e00 <is_tap_key+0xa8>
            switch (action.key.code) {
                case MODS_ONESHOT:
                case MODS_TAP_TOGGLE:
                case KC_A ... KC_EXSEL:                 // tap key
                case KC_LCTRL ... KC_RGUI:              // tap key
                    return true;
    2dfe:	11 e0       	ldi	r17, 0x01	; 1
        case ACT_FUNCTION:
            if (action.func.opt & FUNC_TAP) { return true; }
            return false;
    }
    return false;
}
    2e00:	81 2f       	mov	r24, r17
    2e02:	0f 90       	pop	r0
    2e04:	0f 90       	pop	r0
    2e06:	0f 90       	pop	r0
    2e08:	0f 90       	pop	r0
    2e0a:	0f 90       	pop	r0
    2e0c:	df 91       	pop	r29
    2e0e:	cf 91       	pop	r28
    2e10:	1f 91       	pop	r17
    2e12:	08 95       	ret

00002e14 <debug_event>:

/*
 * debug print
 */
void debug_event(keyevent_t event)
{
    2e14:	cf 93       	push	r28
    2e16:	df 93       	push	r29
    2e18:	00 d0       	rcall	.+0      	; 0x2e1a <debug_event+0x6>
    2e1a:	00 d0       	rcall	.+0      	; 0x2e1c <debug_event+0x8>
    2e1c:	1f 92       	push	r1
    2e1e:	cd b7       	in	r28, 0x3d	; 61
    2e20:	de b7       	in	r29, 0x3e	; 62
    dprintf("%04X%c(%u)", (event.key.row<<8 | event.key.col), (event.pressed ? 'd' : 'u'), event.time);
}
    2e22:	0f 90       	pop	r0
    2e24:	0f 90       	pop	r0
    2e26:	0f 90       	pop	r0
    2e28:	0f 90       	pop	r0
    2e2a:	0f 90       	pop	r0
    2e2c:	df 91       	pop	r29
    2e2e:	cf 91       	pop	r28
    2e30:	08 95       	ret

00002e32 <debug_record>:

void debug_record(keyrecord_t record)
{
    2e32:	cf 93       	push	r28
    2e34:	df 93       	push	r29
    2e36:	00 d0       	rcall	.+0      	; 0x2e38 <debug_record+0x6>
    2e38:	00 d0       	rcall	.+0      	; 0x2e3a <debug_record+0x8>
    2e3a:	00 d0       	rcall	.+0      	; 0x2e3c <debug_record+0xa>
    2e3c:	cd b7       	in	r28, 0x3d	; 61
    2e3e:	de b7       	in	r29, 0x3e	; 62
    debug_event(record.event);
#ifndef NO_ACTION_TAPPING
    dprintf(":%u%c", record.tap.count, (record.tap.interrupted ? '-' : ' '));
#endif
}
    2e40:	26 96       	adiw	r28, 0x06	; 6
    2e42:	0f b6       	in	r0, 0x3f	; 63
    2e44:	f8 94       	cli
    2e46:	de bf       	out	0x3e, r29	; 62
    2e48:	0f be       	out	0x3f, r0	; 63
    2e4a:	cd bf       	out	0x3d, r28	; 61
    2e4c:	df 91       	pop	r29
    2e4e:	cf 91       	pop	r28
    2e50:	08 95       	ret

00002e52 <debug_waiting_buffer>:
{
    debug("TAPPING_KEY="); debug_record(tapping_key); debug("\n");
}

static void debug_waiting_buffer(void)
{
    2e52:	1f 93       	push	r17
    2e54:	cf 93       	push	r28
    2e56:	df 93       	push	r29
    debug("{ ");
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2e58:	c0 91 7f 02 	lds	r28, 0x027F	; 0x80027f <waiting_buffer_tail>
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    2e5c:	16 e0       	ldi	r17, 0x06	; 6
}

static void debug_waiting_buffer(void)
{
    debug("{ ");
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2e5e:	80 91 80 02 	lds	r24, 0x0280	; 0x800280 <waiting_buffer_head>
    2e62:	c8 17       	cp	r28, r24
    2e64:	99 f0       	breq	.+38     	; 0x2e8c <debug_waiting_buffer+0x3a>
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    2e66:	d0 e0       	ldi	r29, 0x00	; 0
    2e68:	1c 9f       	mul	r17, r28
    2e6a:	f0 01       	movw	r30, r0
    2e6c:	1d 9f       	mul	r17, r29
    2e6e:	f0 0d       	add	r31, r0
    2e70:	11 24       	eor	r1, r1
    2e72:	ef 57       	subi	r30, 0x7F	; 127
    2e74:	fd 4f       	sbci	r31, 0xFD	; 253
    2e76:	40 81       	ld	r20, Z
    2e78:	51 81       	ldd	r21, Z+1	; 0x01
    2e7a:	62 81       	ldd	r22, Z+2	; 0x02
    2e7c:	73 81       	ldd	r23, Z+3	; 0x03
    2e7e:	84 81       	ldd	r24, Z+4	; 0x04
    2e80:	95 81       	ldd	r25, Z+5	; 0x05
    2e82:	0e 94 19 17 	call	0x2e32	; 0x2e32 <debug_record>
}

static void debug_waiting_buffer(void)
{
    debug("{ ");
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2e86:	21 96       	adiw	r28, 0x01	; 1
    2e88:	c7 70       	andi	r28, 0x07	; 7
    2e8a:	e9 cf       	rjmp	.-46     	; 0x2e5e <debug_waiting_buffer+0xc>
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    }
    debug("}\n");
}
    2e8c:	df 91       	pop	r29
    2e8e:	cf 91       	pop	r28
    2e90:	1f 91       	pop	r17
    2e92:	08 95       	ret

00002e94 <debug_tapping_key>:
/*
 * debug print
 */
static void debug_tapping_key(void)
{
    debug("TAPPING_KEY="); debug_record(tapping_key); debug("\n");
    2e94:	40 91 b1 02 	lds	r20, 0x02B1	; 0x8002b1 <tapping_key>
    2e98:	50 91 b2 02 	lds	r21, 0x02B2	; 0x8002b2 <tapping_key+0x1>
    2e9c:	60 91 b3 02 	lds	r22, 0x02B3	; 0x8002b3 <tapping_key+0x2>
    2ea0:	70 91 b4 02 	lds	r23, 0x02B4	; 0x8002b4 <tapping_key+0x3>
    2ea4:	80 91 b5 02 	lds	r24, 0x02B5	; 0x8002b5 <tapping_key+0x4>
    2ea8:	90 91 b6 02 	lds	r25, 0x02B6	; 0x8002b6 <tapping_key+0x5>
    2eac:	0c 94 19 17 	jmp	0x2e32	; 0x2e32 <debug_record>

00002eb0 <waiting_buffer_scan_tap>:
    return false;
}

/* scan buffer for tapping */
void waiting_buffer_scan_tap(void)
{
    2eb0:	cf 93       	push	r28
    // tapping already is settled
    if (tapping_key.tap.count > 0) return;
    2eb2:	80 91 b6 02 	lds	r24, 0x02B6	; 0x8002b6 <tapping_key+0x5>
    2eb6:	82 95       	swap	r24
    2eb8:	8f 70       	andi	r24, 0x0F	; 15
    2eba:	09 f0       	breq	.+2      	; 0x2ebe <waiting_buffer_scan_tap+0xe>
    2ebc:	5f c0       	rjmp	.+190    	; 0x2f7c <waiting_buffer_scan_tap+0xcc>
    // invalid state: tapping_key released && tap.count == 0
    if (!tapping_key.event.pressed) return;
    2ebe:	80 91 b3 02 	lds	r24, 0x02B3	; 0x8002b3 <tapping_key+0x2>
    2ec2:	88 23       	and	r24, r24
    2ec4:	09 f4       	brne	.+2      	; 0x2ec8 <waiting_buffer_scan_tap+0x18>
    2ec6:	5a c0       	rjmp	.+180    	; 0x2f7c <waiting_buffer_scan_tap+0xcc>

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2ec8:	80 91 7f 02 	lds	r24, 0x027F	; 0x80027f <waiting_buffer_tail>
    2ecc:	b0 91 80 02 	lds	r27, 0x0280	; 0x800280 <waiting_buffer_head>
    2ed0:	70 91 b1 02 	lds	r23, 0x02B1	; 0x8002b1 <tapping_key>
    2ed4:	a0 91 b2 02 	lds	r26, 0x02B2	; 0x8002b2 <tapping_key+0x1>
    2ed8:	40 91 b4 02 	lds	r20, 0x02B4	; 0x8002b4 <tapping_key+0x3>
    2edc:	50 91 b5 02 	lds	r21, 0x02B5	; 0x8002b5 <tapping_key+0x4>
    2ee0:	91 e0       	ldi	r25, 0x01	; 1
    2ee2:	7f 3f       	cpi	r23, 0xFF	; 255
    2ee4:	09 f0       	breq	.+2      	; 0x2ee8 <waiting_buffer_scan_tap+0x38>
    2ee6:	90 e0       	ldi	r25, 0x00	; 0
    2ee8:	69 2f       	mov	r22, r25
        if (IS_TAPPING_KEY(waiting_buffer[i].event.key) &&
    2eea:	c6 e0       	ldi	r28, 0x06	; 6
    // tapping already is settled
    if (tapping_key.tap.count > 0) return;
    // invalid state: tapping_key released && tap.count == 0
    if (!tapping_key.event.pressed) return;

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2eec:	8b 17       	cp	r24, r27
    2eee:	09 f4       	brne	.+2      	; 0x2ef2 <waiting_buffer_scan_tap+0x42>
    2ef0:	45 c0       	rjmp	.+138    	; 0x2f7c <waiting_buffer_scan_tap+0xcc>
    2ef2:	41 15       	cp	r20, r1
    2ef4:	51 05       	cpc	r21, r1
    2ef6:	21 f0       	breq	.+8      	; 0x2f00 <waiting_buffer_scan_tap+0x50>
    2ef8:	af 3f       	cpi	r26, 0xFF	; 255
    2efa:	21 f0       	breq	.+8      	; 0x2f04 <waiting_buffer_scan_tap+0x54>
    2efc:	20 e0       	ldi	r18, 0x00	; 0
    2efe:	03 c0       	rjmp	.+6      	; 0x2f06 <waiting_buffer_scan_tap+0x56>
    2f00:	21 e0       	ldi	r18, 0x01	; 1
    2f02:	01 c0       	rjmp	.+2      	; 0x2f06 <waiting_buffer_scan_tap+0x56>
    2f04:	26 2f       	mov	r18, r22
    2f06:	90 e0       	ldi	r25, 0x00	; 0
        if (IS_TAPPING_KEY(waiting_buffer[i].event.key) &&
    2f08:	20 fd       	sbrc	r18, 0
    2f0a:	35 c0       	rjmp	.+106    	; 0x2f76 <waiting_buffer_scan_tap+0xc6>
    2f0c:	c8 9f       	mul	r28, r24
    2f0e:	f0 01       	movw	r30, r0
    2f10:	c9 9f       	mul	r28, r25
    2f12:	f0 0d       	add	r31, r0
    2f14:	11 24       	eor	r1, r1
    2f16:	ef 57       	subi	r30, 0x7F	; 127
    2f18:	fd 4f       	sbci	r31, 0xFD	; 253
    2f1a:	21 81       	ldd	r18, Z+1	; 0x01
    2f1c:	2a 13       	cpse	r18, r26
    2f1e:	2b c0       	rjmp	.+86     	; 0x2f76 <waiting_buffer_scan_tap+0xc6>
    2f20:	20 81       	ld	r18, Z
    2f22:	27 13       	cpse	r18, r23
    2f24:	28 c0       	rjmp	.+80     	; 0x2f76 <waiting_buffer_scan_tap+0xc6>
    2f26:	22 81       	ldd	r18, Z+2	; 0x02
    2f28:	21 11       	cpse	r18, r1
    2f2a:	25 c0       	rjmp	.+74     	; 0x2f76 <waiting_buffer_scan_tap+0xc6>
                !waiting_buffer[i].event.pressed &&
                WITHIN_TAPPING_TERM(waiting_buffer[i].event)) {
    2f2c:	23 81       	ldd	r18, Z+3	; 0x03
    2f2e:	34 81       	ldd	r19, Z+4	; 0x04
    2f30:	24 17       	cp	r18, r20
    2f32:	35 07       	cpc	r19, r21
    2f34:	10 f4       	brcc	.+4      	; 0x2f3a <waiting_buffer_scan_tap+0x8a>
    2f36:	21 50       	subi	r18, 0x01	; 1
    2f38:	31 09       	sbc	r19, r1
    2f3a:	24 1b       	sub	r18, r20
    2f3c:	35 0b       	sbc	r19, r21
    2f3e:	28 3c       	cpi	r18, 0xC8	; 200
    2f40:	31 05       	cpc	r19, r1
    2f42:	c8 f4       	brcc	.+50     	; 0x2f76 <waiting_buffer_scan_tap+0xc6>
            tapping_key.tap.count = 1;
    2f44:	20 91 b6 02 	lds	r18, 0x02B6	; 0x8002b6 <tapping_key+0x5>
    2f48:	2f 70       	andi	r18, 0x0F	; 15
    2f4a:	20 61       	ori	r18, 0x10	; 16
    2f4c:	20 93 b6 02 	sts	0x02B6, r18	; 0x8002b6 <tapping_key+0x5>
            waiting_buffer[i].tap.count = 1;
    2f50:	26 e0       	ldi	r18, 0x06	; 6
    2f52:	28 9f       	mul	r18, r24
    2f54:	f0 01       	movw	r30, r0
    2f56:	29 9f       	mul	r18, r25
    2f58:	f0 0d       	add	r31, r0
    2f5a:	11 24       	eor	r1, r1
    2f5c:	ea 57       	subi	r30, 0x7A	; 122
    2f5e:	fd 4f       	sbci	r31, 0xFD	; 253
    2f60:	80 81       	ld	r24, Z
    2f62:	8f 70       	andi	r24, 0x0F	; 15
    2f64:	80 61       	ori	r24, 0x10	; 16
    2f66:	80 83       	st	Z, r24
            process_action(&tapping_key);
    2f68:	81 eb       	ldi	r24, 0xB1	; 177
    2f6a:	92 e0       	ldi	r25, 0x02	; 2
    2f6c:	0e 94 9a 13 	call	0x2734	; 0x2734 <process_action>
            debug("waiting_buffer_scan_tap: found at ["); debug_dec(i); debug("]\n");
            debug_waiting_buffer();
            return;
        }
    }
}
    2f70:	cf 91       	pop	r28
            tapping_key.tap.count = 1;
            waiting_buffer[i].tap.count = 1;
            process_action(&tapping_key);

            debug("waiting_buffer_scan_tap: found at ["); debug_dec(i); debug("]\n");
            debug_waiting_buffer();
    2f72:	0c 94 29 17 	jmp	0x2e52	; 0x2e52 <debug_waiting_buffer>
    // tapping already is settled
    if (tapping_key.tap.count > 0) return;
    // invalid state: tapping_key released && tap.count == 0
    if (!tapping_key.event.pressed) return;

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2f76:	01 96       	adiw	r24, 0x01	; 1
    2f78:	87 70       	andi	r24, 0x07	; 7
    2f7a:	b8 cf       	rjmp	.-144    	; 0x2eec <waiting_buffer_scan_tap+0x3c>
            debug("waiting_buffer_scan_tap: found at ["); debug_dec(i); debug("]\n");
            debug_waiting_buffer();
            return;
        }
    }
}
    2f7c:	cf 91       	pop	r28
    2f7e:	08 95       	ret

00002f80 <process_tapping>:
 * Rule: Tap key is typed(pressed and released) within TAPPING_TERM.
 *       (without interfering by typing other key)
 */
/* return true when key event is processed or consumed. */
bool process_tapping(keyrecord_t *keyp)
{
    2f80:	af 92       	push	r10
    2f82:	bf 92       	push	r11
    2f84:	cf 92       	push	r12
    2f86:	df 92       	push	r13
    2f88:	ef 92       	push	r14
    2f8a:	ff 92       	push	r15
    2f8c:	0f 93       	push	r16
    2f8e:	1f 93       	push	r17
    2f90:	cf 93       	push	r28
    2f92:	df 93       	push	r29
    2f94:	cd b7       	in	r28, 0x3d	; 61
    2f96:	de b7       	in	r29, 0x3e	; 62
    2f98:	61 97       	sbiw	r28, 0x11	; 17
    2f9a:	0f b6       	in	r0, 0x3f	; 63
    2f9c:	f8 94       	cli
    2f9e:	de bf       	out	0x3e, r29	; 62
    2fa0:	0f be       	out	0x3f, r0	; 63
    2fa2:	cd bf       	out	0x3d, r28	; 61
    2fa4:	7c 01       	movw	r14, r24
    keyevent_t event = keyp->event;
    2fa6:	85 e0       	ldi	r24, 0x05	; 5
    2fa8:	f7 01       	movw	r30, r14
    2faa:	de 01       	movw	r26, r28
    2fac:	1d 96       	adiw	r26, 0x0d	; 13
    2fae:	01 90       	ld	r0, Z+
    2fb0:	0d 92       	st	X+, r0
    2fb2:	8a 95       	dec	r24
    2fb4:	e1 f7       	brne	.-8      	; 0x2fae <process_tapping+0x2e>
    2fb6:	d7 01       	movw	r26, r14
    2fb8:	4c 91       	ld	r20, X
    2fba:	11 96       	adiw	r26, 0x01	; 1
    2fbc:	5c 91       	ld	r21, X
    2fbe:	11 97       	sbiw	r26, 0x01	; 1
    2fc0:	12 96       	adiw	r26, 0x02	; 2
    2fc2:	dc 90       	ld	r13, X
    2fc4:	12 97       	sbiw	r26, 0x02	; 2
    2fc6:	13 96       	adiw	r26, 0x03	; 3
    2fc8:	0d 91       	ld	r16, X+
    2fca:	1c 91       	ld	r17, X
    2fcc:	14 97       	sbiw	r26, 0x04	; 4
    2fce:	30 91 b1 02 	lds	r19, 0x02B1	; 0x8002b1 <tapping_key>
    2fd2:	60 91 b2 02 	lds	r22, 0x02B2	; 0x8002b2 <tapping_key+0x1>
    2fd6:	80 91 b4 02 	lds	r24, 0x02B4	; 0x8002b4 <tapping_key+0x3>
    2fda:	90 91 b5 02 	lds	r25, 0x02B5	; 0x8002b5 <tapping_key+0x4>
    2fde:	00 97       	sbiw	r24, 0x00	; 0
    2fe0:	31 f0       	breq	.+12     	; 0x2fee <process_tapping+0x6e>
    2fe2:	6f 3f       	cpi	r22, 0xFF	; 255
    2fe4:	31 f4       	brne	.+12     	; 0x2ff2 <process_tapping+0x72>
    2fe6:	21 e0       	ldi	r18, 0x01	; 1
    2fe8:	3f 3f       	cpi	r19, 0xFF	; 255
    2fea:	19 f4       	brne	.+6      	; 0x2ff2 <process_tapping+0x72>
    2fec:	03 c0       	rjmp	.+6      	; 0x2ff4 <process_tapping+0x74>
    2fee:	21 e0       	ldi	r18, 0x01	; 1
    2ff0:	01 c0       	rjmp	.+2      	; 0x2ff4 <process_tapping+0x74>
    2ff2:	20 e0       	ldi	r18, 0x00	; 0

    // if tapping
    if (IS_TAPPING_PRESSED()) {
    2ff4:	b2 2f       	mov	r27, r18
    2ff6:	b1 70       	andi	r27, 0x01	; 1
    2ff8:	bb 2e       	mov	r11, r27
    2ffa:	20 fd       	sbrc	r18, 0
    2ffc:	6e c1       	rjmp	.+732    	; 0x32da <process_tapping+0x35a>
    2ffe:	a0 90 b3 02 	lds	r10, 0x02B3	; 0x8002b3 <tapping_key+0x2>
    3002:	aa 20       	and	r10, r10
    3004:	09 f4       	brne	.+2      	; 0x3008 <process_tapping+0x88>
    3006:	cc c0       	rjmp	.+408    	; 0x31a0 <process_tapping+0x220>
    3008:	20 91 b6 02 	lds	r18, 0x02B6	; 0x8002b6 <tapping_key+0x5>
        if (WITHIN_TAPPING_TERM(event)) {
    300c:	08 17       	cp	r16, r24
    300e:	19 07       	cpc	r17, r25
    3010:	28 f0       	brcs	.+10     	; 0x301c <process_tapping+0x9c>
    3012:	f8 01       	movw	r30, r16
    3014:	e8 1b       	sub	r30, r24
    3016:	f9 0b       	sbc	r31, r25
    3018:	cf 01       	movw	r24, r30
    301a:	04 c0       	rjmp	.+8      	; 0x3024 <process_tapping+0xa4>
    301c:	80 95       	com	r24
    301e:	90 95       	com	r25
    3020:	80 0f       	add	r24, r16
    3022:	91 1f       	adc	r25, r17
    3024:	cc 24       	eor	r12, r12
    3026:	c3 94       	inc	r12
    3028:	88 3c       	cpi	r24, 0xC8	; 200
    302a:	91 05       	cpc	r25, r1
    302c:	80 f0       	brcs	.+32     	; 0x304e <process_tapping+0xce>
    302e:	c1 2c       	mov	r12, r1
                }
            }
        }
        // after TAPPING_TERM
        else {
            if (tapping_key.tap.count == 0) {
    3030:	20 7f       	andi	r18, 0xF0	; 240
    3032:	09 f0       	breq	.+2      	; 0x3036 <process_tapping+0xb6>
    3034:	a1 c0       	rjmp	.+322    	; 0x3178 <process_tapping+0x1f8>
                debug("Tapping: End. Timeout. Not tap(0): ");
                debug_event(event); debug("\n");
    3036:	70 2f       	mov	r23, r16
    3038:	19 8b       	std	Y+17, r17	; 0x11
    303a:	08 8b       	std	Y+16, r16	; 0x10
    303c:	6d 2d       	mov	r22, r13
    303e:	89 89       	ldd	r24, Y+17	; 0x11
    3040:	0e 94 0a 17 	call	0x2e14	; 0x2e14 <debug_event>
                process_action(&tapping_key);
    3044:	81 eb       	ldi	r24, 0xB1	; 177
    3046:	92 e0       	ldi	r25, 0x02	; 2
    3048:	0e 94 9a 13 	call	0x2734	; 0x2734 <process_action>
    304c:	bd c0       	rjmp	.+378    	; 0x31c8 <process_tapping+0x248>
    keyevent_t event = keyp->event;

    // if tapping
    if (IS_TAPPING_PRESSED()) {
        if (WITHIN_TAPPING_TERM(event)) {
            if (tapping_key.tap.count == 0) {
    304e:	82 2f       	mov	r24, r18
    3050:	80 7f       	andi	r24, 0xF0	; 240
    3052:	09 f0       	breq	.+2      	; 0x3056 <process_tapping+0xd6>
    3054:	56 c0       	rjmp	.+172    	; 0x3102 <process_tapping+0x182>
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    3056:	56 13       	cpse	r21, r22
    3058:	15 c0       	rjmp	.+42     	; 0x3084 <process_tapping+0x104>
    305a:	43 13       	cpse	r20, r19
    305c:	13 c0       	rjmp	.+38     	; 0x3084 <process_tapping+0x104>
    305e:	cd 2c       	mov	r12, r13
    3060:	d1 10       	cpse	r13, r1
    3062:	10 c0       	rjmp	.+32     	; 0x3084 <process_tapping+0x104>
                    // first tap!
                    debug("Tapping: First tap(0->1).\n");
                    tapping_key.tap.count = 1;
    3064:	2f 70       	andi	r18, 0x0F	; 15
    3066:	20 61       	ori	r18, 0x10	; 16
    3068:	20 93 b6 02 	sts	0x02B6, r18	; 0x8002b6 <tapping_key+0x5>
                    debug_tapping_key();
    306c:	0e 94 4a 17 	call	0x2e94	; 0x2e94 <debug_tapping_key>
                    process_action(&tapping_key);
    3070:	81 eb       	ldi	r24, 0xB1	; 177
    3072:	92 e0       	ldi	r25, 0x02	; 2
    3074:	0e 94 9a 13 	call	0x2734	; 0x2734 <process_action>

                    // copy tapping state
                    keyp->tap = tapping_key.tap;
    3078:	80 91 b6 02 	lds	r24, 0x02B6	; 0x8002b6 <tapping_key+0x5>
    307c:	d7 01       	movw	r26, r14
    307e:	15 96       	adiw	r26, 0x05	; 5
    3080:	8c 93       	st	X, r24
                    // enqueue
                    return false;
    3082:	5f c1       	rjmp	.+702    	; 0x3342 <process_tapping+0x3c2>
    3084:	01 15       	cp	r16, r1
    3086:	11 05       	cpc	r17, r1
    3088:	31 f0       	breq	.+12     	; 0x3096 <process_tapping+0x116>
    308a:	5f 3f       	cpi	r21, 0xFF	; 255
    308c:	31 f4       	brne	.+12     	; 0x309a <process_tapping+0x11a>
    308e:	81 e0       	ldi	r24, 0x01	; 1
    3090:	4f 3f       	cpi	r20, 0xFF	; 255
    3092:	19 f4       	brne	.+6      	; 0x309a <process_tapping+0x11a>
    3094:	03 c0       	rjmp	.+6      	; 0x309c <process_tapping+0x11c>
    3096:	81 e0       	ldi	r24, 0x01	; 1
    3098:	01 c0       	rjmp	.+2      	; 0x309c <process_tapping+0x11c>
    309a:	80 e0       	ldi	r24, 0x00	; 0
static inline bool IS_PRESSED(keyevent_t event) { return (!IS_NOEVENT(event) && event.pressed); }
static inline bool IS_RELEASED(keyevent_t event) { return (!IS_NOEVENT(event) && !event.pressed); }
    309c:	80 fd       	sbrc	r24, 0
    309e:	03 c0       	rjmp	.+6      	; 0x30a6 <process_tapping+0x126>
    30a0:	81 e0       	ldi	r24, 0x01	; 1
    30a2:	8d 25       	eor	r24, r13
    30a4:	02 c0       	rjmp	.+4      	; 0x30aa <process_tapping+0x12a>
    30a6:	80 e0       	ldi	r24, 0x00	; 0
    30a8:	90 e0       	ldi	r25, 0x00	; 0
#endif
                /* Process release event of a key pressed before tapping starts
                 * Without this unexpected repeating will occur with having fast repeating setting
                 * https://github.com/tmk/tmk_keyboard/issues/60
                 */
                else if (IS_RELEASED(event) && !waiting_buffer_typed(event)) {
    30aa:	b8 2f       	mov	r27, r24
    30ac:	b1 70       	andi	r27, 0x01	; 1
    30ae:	cb 2e       	mov	r12, r27
    30b0:	80 ff       	sbrs	r24, 0
    30b2:	1c c0       	rjmp	.+56     	; 0x30ec <process_tapping+0x16c>
    waiting_buffer_tail = 0;
}

bool waiting_buffer_typed(keyevent_t event)
{
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    30b4:	80 91 7f 02 	lds	r24, 0x027F	; 0x80027f <waiting_buffer_tail>
    30b8:	20 91 80 02 	lds	r18, 0x0280	; 0x800280 <waiting_buffer_head>
        if (KEYEQ(event.key, waiting_buffer[i].event.key) && event.pressed !=  waiting_buffer[i].event.pressed) {
    30bc:	36 e0       	ldi	r19, 0x06	; 6
    waiting_buffer_tail = 0;
}

bool waiting_buffer_typed(keyevent_t event)
{
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    30be:	82 17       	cp	r24, r18
    30c0:	09 f4       	brne	.+2      	; 0x30c4 <process_tapping+0x144>
    30c2:	1c c1       	rjmp	.+568    	; 0x32fc <process_tapping+0x37c>
        if (KEYEQ(event.key, waiting_buffer[i].event.key) && event.pressed !=  waiting_buffer[i].event.pressed) {
    30c4:	90 e0       	ldi	r25, 0x00	; 0
    30c6:	38 9f       	mul	r19, r24
    30c8:	f0 01       	movw	r30, r0
    30ca:	39 9f       	mul	r19, r25
    30cc:	f0 0d       	add	r31, r0
    30ce:	11 24       	eor	r1, r1
    30d0:	ef 57       	subi	r30, 0x7F	; 127
    30d2:	fd 4f       	sbci	r31, 0xFD	; 253
    30d4:	61 81       	ldd	r22, Z+1	; 0x01
    30d6:	56 13       	cpse	r21, r22
    30d8:	06 c0       	rjmp	.+12     	; 0x30e6 <process_tapping+0x166>
    30da:	60 81       	ld	r22, Z
    30dc:	46 13       	cpse	r20, r22
    30de:	03 c0       	rjmp	.+6      	; 0x30e6 <process_tapping+0x166>
    30e0:	62 81       	ldd	r22, Z+2	; 0x02
    30e2:	d6 12       	cpse	r13, r22
    30e4:	03 c0       	rjmp	.+6      	; 0x30ec <process_tapping+0x16c>
    waiting_buffer_tail = 0;
}

bool waiting_buffer_typed(keyevent_t event)
{
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    30e6:	01 96       	adiw	r24, 0x01	; 1
    30e8:	87 70       	andi	r24, 0x07	; 7
    30ea:	e9 cf       	rjmp	.-46     	; 0x30be <process_tapping+0x13e>
                    process_action(keyp);
                    return true;
                }
                else {
                    // set interrupted flag when other key preesed during tapping
                    if (event.pressed) {
    30ec:	cd 2c       	mov	r12, r13
    30ee:	dd 20       	and	r13, r13
    30f0:	09 f4       	brne	.+2      	; 0x30f4 <process_tapping+0x174>
    30f2:	27 c1       	rjmp	.+590    	; 0x3342 <process_tapping+0x3c2>
                        tapping_key.tap.interrupted = true;
    30f4:	80 91 b6 02 	lds	r24, 0x02B6	; 0x8002b6 <tapping_key+0x5>
    30f8:	81 60       	ori	r24, 0x01	; 1
    30fa:	80 93 b6 02 	sts	0x02B6, r24	; 0x8002b6 <tapping_key+0x5>
                    }
                    // enqueue 
                    return false;
    30fe:	c1 2c       	mov	r12, r1
    3100:	20 c1       	rjmp	.+576    	; 0x3342 <process_tapping+0x3c2>
                }
            }
            // tap_count > 0
            else {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    3102:	56 13       	cpse	r21, r22
    3104:	08 c0       	rjmp	.+16     	; 0x3116 <process_tapping+0x196>
    3106:	43 13       	cpse	r20, r19
    3108:	06 c0       	rjmp	.+12     	; 0x3116 <process_tapping+0x196>
    310a:	d1 10       	cpse	r13, r1
    310c:	04 c0       	rjmp	.+8      	; 0x3116 <process_tapping+0x196>
                    debug("Tapping: Tap release("); debug_dec(tapping_key.tap.count); debug(")\n");
                    keyp->tap = tapping_key.tap;
    310e:	80 91 b6 02 	lds	r24, 0x02B6	; 0x8002b6 <tapping_key+0x5>
    3112:	d7 01       	movw	r26, r14
    3114:	b6 c0       	rjmp	.+364    	; 0x3282 <process_tapping+0x302>
                    process_action(keyp);
                    tapping_key = *keyp;
                    debug_tapping_key();
                    return true;
                }
                else if (is_tap_key(event) && event.pressed) {
    3116:	4d 87       	std	Y+13, r20	; 0x0d
    3118:	5e 87       	std	Y+14, r21	; 0x0e
    311a:	df 86       	std	Y+15, r13	; 0x0f
    311c:	70 2f       	mov	r23, r16
    311e:	19 8b       	std	Y+17, r17	; 0x11
    3120:	08 8b       	std	Y+16, r16	; 0x10
    3122:	6d 2d       	mov	r22, r13
    3124:	89 89       	ldd	r24, Y+17	; 0x11
    3126:	0e 94 ac 16 	call	0x2d58	; 0x2d58 <is_tap_key>
    312a:	88 23       	and	r24, r24
    312c:	99 f1       	breq	.+102    	; 0x3194 <process_tapping+0x214>
    312e:	dd 20       	and	r13, r13
    3130:	89 f1       	breq	.+98     	; 0x3194 <process_tapping+0x214>
                    if (tapping_key.tap.count > 1) {
    3132:	20 91 b6 02 	lds	r18, 0x02B6	; 0x8002b6 <tapping_key+0x5>
    3136:	82 2f       	mov	r24, r18
    3138:	82 95       	swap	r24
    313a:	8f 70       	andi	r24, 0x0F	; 15
    313c:	90 e0       	ldi	r25, 0x00	; 0
    313e:	02 97       	sbiw	r24, 0x02	; 2
    3140:	74 f0       	brlt	.+28     	; 0x315e <process_tapping+0x1de>
                        debug("Tapping: Start new tap with releasing last tap(>1).\n");
                        // unregister key
                        process_action(&(keyrecord_t){
    3142:	80 91 b1 02 	lds	r24, 0x02B1	; 0x8002b1 <tapping_key>
    3146:	90 91 b2 02 	lds	r25, 0x02B2	; 0x8002b2 <tapping_key+0x1>
    314a:	98 87       	std	Y+8, r25	; 0x08
    314c:	8f 83       	std	Y+7, r24	; 0x07
    314e:	19 86       	std	Y+9, r1	; 0x09
    3150:	1b 87       	std	Y+11, r17	; 0x0b
    3152:	0a 87       	std	Y+10, r16	; 0x0a
    3154:	2c 87       	std	Y+12, r18	; 0x0c
    3156:	ce 01       	movw	r24, r28
    3158:	07 96       	adiw	r24, 0x07	; 7
    315a:	0e 94 9a 13 	call	0x2734	; 0x2734 <process_action>
                                .event.pressed = false
                        });
                    } else {
                        debug("Tapping: Start while last tap(1).\n");
                    }
                    tapping_key = *keyp;
    315e:	86 e0       	ldi	r24, 0x06	; 6
    3160:	f7 01       	movw	r30, r14
    3162:	a1 eb       	ldi	r26, 0xB1	; 177
    3164:	b2 e0       	ldi	r27, 0x02	; 2
    3166:	01 90       	ld	r0, Z+
    3168:	0d 92       	st	X+, r0
    316a:	8a 95       	dec	r24
    316c:	e1 f7       	brne	.-8      	; 0x3166 <process_tapping+0x1e6>
                    waiting_buffer_scan_tap();
    316e:	0e 94 58 17 	call	0x2eb0	; 0x2eb0 <waiting_buffer_scan_tap>
                    debug_tapping_key();
    3172:	0e 94 4a 17 	call	0x2e94	; 0x2e94 <debug_tapping_key>
    3176:	11 c0       	rjmp	.+34     	; 0x319a <process_tapping+0x21a>
                process_action(&tapping_key);
                tapping_key = (keyrecord_t){};
                debug_tapping_key();
                return false;
            }  else {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    3178:	56 17       	cp	r21, r22
    317a:	81 f1       	breq	.+96     	; 0x31dc <process_tapping+0x25c>
                    keyp->tap = tapping_key.tap;
                    process_action(keyp);
                    tapping_key = (keyrecord_t){};
                    return true;
                }
                else if (is_tap_key(event) && event.pressed) {
    317c:	4d 87       	std	Y+13, r20	; 0x0d
    317e:	5e 87       	std	Y+14, r21	; 0x0e
    3180:	df 86       	std	Y+15, r13	; 0x0f
    3182:	70 2f       	mov	r23, r16
    3184:	19 8b       	std	Y+17, r17	; 0x11
    3186:	08 8b       	std	Y+16, r16	; 0x10
    3188:	6d 2d       	mov	r22, r13
    318a:	89 89       	ldd	r24, Y+17	; 0x11
    318c:	0e 94 ac 16 	call	0x2d58	; 0x2d58 <is_tap_key>
    3190:	81 11       	cpse	r24, r1
    3192:	38 c0       	rjmp	.+112    	; 0x3204 <process_tapping+0x284>
                }
                else {
                    if (!IS_NOEVENT(event)) {
                        debug("Tapping: key event while last tap(>0).\n");
                    }
                    process_action(keyp);
    3194:	c7 01       	movw	r24, r14
    3196:	0e 94 9a 13 	call	0x2734	; 0x2734 <process_action>
                    return true;
    319a:	cc 24       	eor	r12, r12
    319c:	c3 94       	inc	r12
    319e:	d1 c0       	rjmp	.+418    	; 0x3342 <process_tapping+0x3c2>
                    return true;
                }
            }
        }
    } else if (IS_TAPPING_RELEASED()) {
        if (WITHIN_TAPPING_TERM(event)) {
    31a0:	08 17       	cp	r16, r24
    31a2:	19 07       	cpc	r17, r25
    31a4:	08 f4       	brcc	.+2      	; 0x31a8 <process_tapping+0x228>
    31a6:	46 c0       	rjmp	.+140    	; 0x3234 <process_tapping+0x2b4>
    31a8:	f8 01       	movw	r30, r16
    31aa:	e8 1b       	sub	r30, r24
    31ac:	f9 0b       	sbc	r31, r25
    31ae:	cf 01       	movw	r24, r30
    31b0:	88 3c       	cpi	r24, 0xC8	; 200
    31b2:	91 05       	cpc	r25, r1
    31b4:	08 f4       	brcc	.+2      	; 0x31b8 <process_tapping+0x238>
    31b6:	43 c0       	rjmp	.+134    	; 0x323e <process_tapping+0x2be>
    31b8:	c1 2c       	mov	r12, r1
            }
        } else {
            // FIX: process_aciton here?
            // timeout. no sequential tap.
            debug("Tapping: End(Timeout after releasing last tap): ");
            debug_event(event); debug("\n");
    31ba:	70 2f       	mov	r23, r16
    31bc:	19 8b       	std	Y+17, r17	; 0x11
    31be:	08 8b       	std	Y+16, r16	; 0x10
    31c0:	6d 2d       	mov	r22, r13
    31c2:	89 89       	ldd	r24, Y+17	; 0x11
    31c4:	0e 94 0a 17 	call	0x2e14	; 0x2e14 <debug_event>
        else {
            if (tapping_key.tap.count == 0) {
                debug("Tapping: End. Timeout. Not tap(0): ");
                debug_event(event); debug("\n");
                process_action(&tapping_key);
                tapping_key = (keyrecord_t){};
    31c8:	e1 eb       	ldi	r30, 0xB1	; 177
    31ca:	f2 e0       	ldi	r31, 0x02	; 2
    31cc:	86 e0       	ldi	r24, 0x06	; 6
    31ce:	df 01       	movw	r26, r30
    31d0:	1d 92       	st	X+, r1
    31d2:	8a 95       	dec	r24
    31d4:	e9 f7       	brne	.-6      	; 0x31d0 <process_tapping+0x250>
                debug_tapping_key();
    31d6:	0e 94 4a 17 	call	0x2e94	; 0x2e94 <debug_tapping_key>
                return false;
    31da:	b3 c0       	rjmp	.+358    	; 0x3342 <process_tapping+0x3c2>
            }  else {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    31dc:	43 13       	cpse	r20, r19
    31de:	ce cf       	rjmp	.-100    	; 0x317c <process_tapping+0x1fc>
    31e0:	d1 10       	cpse	r13, r1
    31e2:	cc cf       	rjmp	.-104    	; 0x317c <process_tapping+0x1fc>
                    debug("Tapping: End. last timeout tap release(>0).");
                    keyp->tap = tapping_key.tap;
    31e4:	80 91 b6 02 	lds	r24, 0x02B6	; 0x8002b6 <tapping_key+0x5>
    31e8:	f7 01       	movw	r30, r14
    31ea:	85 83       	std	Z+5, r24	; 0x05
                    process_action(keyp);
    31ec:	c7 01       	movw	r24, r14
    31ee:	0e 94 9a 13 	call	0x2734	; 0x2734 <process_action>
                    tapping_key = (keyrecord_t){};
    31f2:	86 e0       	ldi	r24, 0x06	; 6
    31f4:	e1 eb       	ldi	r30, 0xB1	; 177
    31f6:	f2 e0       	ldi	r31, 0x02	; 2
    31f8:	df 01       	movw	r26, r30
    31fa:	1d 92       	st	X+, r1
    31fc:	8a 95       	dec	r24
    31fe:	e9 f7       	brne	.-6      	; 0x31fa <process_tapping+0x27a>
                    return true;
    3200:	ca 2c       	mov	r12, r10
    3202:	9f c0       	rjmp	.+318    	; 0x3342 <process_tapping+0x3c2>
                }
                else if (is_tap_key(event) && event.pressed) {
    3204:	dd 20       	and	r13, r13
    3206:	31 f2       	breq	.-116    	; 0x3194 <process_tapping+0x214>
                    if (tapping_key.tap.count > 1) {
    3208:	20 91 b6 02 	lds	r18, 0x02B6	; 0x8002b6 <tapping_key+0x5>
    320c:	82 2f       	mov	r24, r18
    320e:	82 95       	swap	r24
    3210:	8f 70       	andi	r24, 0x0F	; 15
    3212:	90 e0       	ldi	r25, 0x00	; 0
    3214:	02 97       	sbiw	r24, 0x02	; 2
    3216:	0c f4       	brge	.+2      	; 0x321a <process_tapping+0x29a>
    3218:	a2 cf       	rjmp	.-188    	; 0x315e <process_tapping+0x1de>
                        debug("Tapping: Start new tap with releasing last timeout tap(>1).\n");
                        // unregister key
                        process_action(&(keyrecord_t){
    321a:	80 91 b1 02 	lds	r24, 0x02B1	; 0x8002b1 <tapping_key>
    321e:	90 91 b2 02 	lds	r25, 0x02B2	; 0x8002b2 <tapping_key+0x1>
    3222:	9a 83       	std	Y+2, r25	; 0x02
    3224:	89 83       	std	Y+1, r24	; 0x01
    3226:	1b 82       	std	Y+3, r1	; 0x03
    3228:	1d 83       	std	Y+5, r17	; 0x05
    322a:	0c 83       	std	Y+4, r16	; 0x04
    322c:	2e 83       	std	Y+6, r18	; 0x06
    322e:	ce 01       	movw	r24, r28
    3230:	01 96       	adiw	r24, 0x01	; 1
    3232:	93 cf       	rjmp	.-218    	; 0x315a <process_tapping+0x1da>
                    return true;
                }
            }
        }
    } else if (IS_TAPPING_RELEASED()) {
        if (WITHIN_TAPPING_TERM(event)) {
    3234:	80 95       	com	r24
    3236:	90 95       	com	r25
    3238:	80 0f       	add	r24, r16
    323a:	91 1f       	adc	r25, r17
    323c:	b9 cf       	rjmp	.-142    	; 0x31b0 <process_tapping+0x230>
            if (event.pressed) {
    323e:	cd 2c       	mov	r12, r13
    3240:	dd 20       	and	r13, r13
    3242:	09 f4       	brne	.+2      	; 0x3246 <process_tapping+0x2c6>
    3244:	a7 cf       	rjmp	.-178    	; 0x3194 <process_tapping+0x214>
                if (IS_TAPPING_KEY(event.key)) {
    3246:	56 13       	cpse	r21, r22
    3248:	33 c0       	rjmp	.+102    	; 0x32b0 <process_tapping+0x330>
    324a:	43 13       	cpse	r20, r19
    324c:	31 c0       	rjmp	.+98     	; 0x32b0 <process_tapping+0x330>
                    if (!tapping_key.tap.interrupted && tapping_key.tap.count > 0) {
    324e:	20 91 b6 02 	lds	r18, 0x02B6	; 0x8002b6 <tapping_key+0x5>
    3252:	20 fd       	sbrc	r18, 0
    3254:	24 c0       	rjmp	.+72     	; 0x329e <process_tapping+0x31e>
    3256:	82 2f       	mov	r24, r18
    3258:	82 95       	swap	r24
    325a:	8f 70       	andi	r24, 0x0F	; 15
    325c:	48 2f       	mov	r20, r24
    325e:	50 e0       	ldi	r21, 0x00	; 0
    3260:	41 15       	cp	r20, r1
    3262:	51 05       	cpc	r21, r1
    3264:	e1 f0       	breq	.+56     	; 0x329e <process_tapping+0x31e>
                        // sequential tap.
                        keyp->tap = tapping_key.tap;
    3266:	d7 01       	movw	r26, r14
    3268:	15 96       	adiw	r26, 0x05	; 5
    326a:	2c 93       	st	X, r18
    326c:	15 97       	sbiw	r26, 0x05	; 5
                        if (keyp->tap.count < 15) keyp->tap.count += 1;
    326e:	4f 30       	cpi	r20, 0x0F	; 15
    3270:	51 05       	cpc	r21, r1
    3272:	49 f0       	breq	.+18     	; 0x3286 <process_tapping+0x306>
    3274:	8f 5f       	subi	r24, 0xFF	; 255
    3276:	98 2f       	mov	r25, r24
    3278:	92 95       	swap	r25
    327a:	90 7f       	andi	r25, 0xF0	; 240
    327c:	82 2f       	mov	r24, r18
    327e:	8f 70       	andi	r24, 0x0F	; 15
    3280:	89 2b       	or	r24, r25
    3282:	15 96       	adiw	r26, 0x05	; 5
    3284:	8c 93       	st	X, r24
                        debug("Tapping: Tap press("); debug_dec(keyp->tap.count); debug(")\n");
                        process_action(keyp);
    3286:	c7 01       	movw	r24, r14
    3288:	0e 94 9a 13 	call	0x2734	; 0x2734 <process_action>
                        tapping_key = *keyp;
    328c:	86 e0       	ldi	r24, 0x06	; 6
    328e:	f7 01       	movw	r30, r14
    3290:	a1 eb       	ldi	r26, 0xB1	; 177
    3292:	b2 e0       	ldi	r27, 0x02	; 2
    3294:	01 90       	ld	r0, Z+
    3296:	0d 92       	st	X+, r0
    3298:	8a 95       	dec	r24
    329a:	e1 f7       	brne	.-8      	; 0x3294 <process_tapping+0x314>
    329c:	9c cf       	rjmp	.-200    	; 0x31d6 <process_tapping+0x256>
                        debug_tapping_key();
                        return true;
                    } else {
                        // FIX: start new tap again
                        tapping_key = *keyp;
    329e:	86 e0       	ldi	r24, 0x06	; 6
    32a0:	f7 01       	movw	r30, r14
    32a2:	a1 eb       	ldi	r26, 0xB1	; 177
    32a4:	b2 e0       	ldi	r27, 0x02	; 2
    32a6:	01 90       	ld	r0, Z+
    32a8:	0d 92       	st	X+, r0
    32aa:	8a 95       	dec	r24
    32ac:	e1 f7       	brne	.-8      	; 0x32a6 <process_tapping+0x326>
                        return true;
    32ae:	49 c0       	rjmp	.+146    	; 0x3342 <process_tapping+0x3c2>
                    }
                } else if (is_tap_key(event)) {
    32b0:	4d 87       	std	Y+13, r20	; 0x0d
    32b2:	5e 87       	std	Y+14, r21	; 0x0e
    32b4:	df 86       	std	Y+15, r13	; 0x0f
    32b6:	70 2f       	mov	r23, r16
    32b8:	19 8b       	std	Y+17, r17	; 0x11
    32ba:	08 8b       	std	Y+16, r16	; 0x10
    32bc:	6d 2d       	mov	r22, r13
    32be:	89 89       	ldd	r24, Y+17	; 0x11
    32c0:	0e 94 ac 16 	call	0x2d58	; 0x2d58 <is_tap_key>
    32c4:	81 11       	cpse	r24, r1
    32c6:	4b cf       	rjmp	.-362    	; 0x315e <process_tapping+0x1de>
                    debug_tapping_key();
                    return true;
                } else {
                    // should none in buffer
                    // FIX: interrupted when other key is pressed
                    tapping_key.tap.interrupted = true;
    32c8:	80 91 b6 02 	lds	r24, 0x02B6	; 0x8002b6 <tapping_key+0x5>
    32cc:	81 60       	ori	r24, 0x01	; 1
    32ce:	80 93 b6 02 	sts	0x02B6, r24	; 0x8002b6 <tapping_key+0x5>
                    process_action(keyp);
    32d2:	c7 01       	movw	r24, r14
    32d4:	0e 94 9a 13 	call	0x2734	; 0x2734 <process_action>
                    return true;
    32d8:	34 c0       	rjmp	.+104    	; 0x3342 <process_tapping+0x3c2>
            return false;
        }
    }
    // not tapping state
    else {
        if (event.pressed && is_tap_key(event)) {
    32da:	dd 20       	and	r13, r13
    32dc:	09 f4       	brne	.+2      	; 0x32e0 <process_tapping+0x360>
    32de:	5a cf       	rjmp	.-332    	; 0x3194 <process_tapping+0x214>
    32e0:	4d 87       	std	Y+13, r20	; 0x0d
    32e2:	5e 87       	std	Y+14, r21	; 0x0e
    32e4:	df 86       	std	Y+15, r13	; 0x0f
    32e6:	70 2f       	mov	r23, r16
    32e8:	19 8b       	std	Y+17, r17	; 0x11
    32ea:	08 8b       	std	Y+16, r16	; 0x10
    32ec:	6d 2d       	mov	r22, r13
    32ee:	89 89       	ldd	r24, Y+17	; 0x11
    32f0:	0e 94 ac 16 	call	0x2d58	; 0x2d58 <is_tap_key>
    32f4:	88 23       	and	r24, r24
    32f6:	09 f4       	brne	.+2      	; 0x32fa <process_tapping+0x37a>
    32f8:	4d cf       	rjmp	.-358    	; 0x3194 <process_tapping+0x214>
    32fa:	31 cf       	rjmp	.-414    	; 0x315e <process_tapping+0x1de>
                 * Without this unexpected repeating will occur with having fast repeating setting
                 * https://github.com/tmk/tmk_keyboard/issues/60
                 */
                else if (IS_RELEASED(event) && !waiting_buffer_typed(event)) {
                    // Modifier should be retained till end of this tapping.
                    action_t action = layer_switch_get_action(event);
    32fc:	70 2f       	mov	r23, r16
    32fe:	19 8b       	std	Y+17, r17	; 0x11
    3300:	08 8b       	std	Y+16, r16	; 0x10
    3302:	6d 2d       	mov	r22, r13
    3304:	89 89       	ldd	r24, Y+17	; 0x11
    3306:	0e 94 17 1c 	call	0x382e	; 0x382e <layer_switch_get_action>
                    switch (action.kind.id) {
    330a:	29 2f       	mov	r18, r25
    330c:	22 95       	swap	r18
    330e:	2f 70       	andi	r18, 0x0F	; 15
    3310:	22 30       	cpi	r18, 0x02	; 2
    3312:	28 f4       	brcc	.+10     	; 0x331e <process_tapping+0x39e>
                        case ACT_LMODS:
                        case ACT_RMODS:
                            if (action.key.mods && !action.key.code) return false;
    3314:	9f 70       	andi	r25, 0x0F	; 15
    3316:	39 f0       	breq	.+14     	; 0x3326 <process_tapping+0x3a6>
    3318:	81 11       	cpse	r24, r1
    331a:	05 c0       	rjmp	.+10     	; 0x3326 <process_tapping+0x3a6>
    331c:	0b c0       	rjmp	.+22     	; 0x3334 <process_tapping+0x3b4>
                 * https://github.com/tmk/tmk_keyboard/issues/60
                 */
                else if (IS_RELEASED(event) && !waiting_buffer_typed(event)) {
                    // Modifier should be retained till end of this tapping.
                    action_t action = layer_switch_get_action(event);
                    switch (action.kind.id) {
    331e:	24 30       	cpi	r18, 0x04	; 4
    3320:	28 f4       	brcc	.+10     	; 0x332c <process_tapping+0x3ac>
                            if (action.key.mods && !action.key.code) return false;
                            if (IS_MOD(action.key.code)) return false;
                            break;
                        case ACT_LMODS_TAP:
                        case ACT_RMODS_TAP:
                            if (action.key.mods && keyp->tap.count == 0) return false;
    3322:	9f 70       	andi	r25, 0x0F	; 15
    3324:	49 f4       	brne	.+18     	; 0x3338 <process_tapping+0x3b8>
                            if (IS_MOD(action.key.code)) return false;
    3326:	80 5e       	subi	r24, 0xE0	; 224
    3328:	88 30       	cpi	r24, 0x08	; 8
    332a:	20 f0       	brcs	.+8      	; 0x3334 <process_tapping+0x3b4>
                            break;
                    }
                    // Release of key should be process immediately.
                    debug("Tapping: release event of a key pressed before tapping\n");
                    process_action(keyp);
    332c:	c7 01       	movw	r24, r14
    332e:	0e 94 9a 13 	call	0x2734	; 0x2734 <process_action>
                    return true;
    3332:	bc 2c       	mov	r11, r12
    3334:	cb 2c       	mov	r12, r11
    3336:	05 c0       	rjmp	.+10     	; 0x3342 <process_tapping+0x3c2>
                            if (action.key.mods && !action.key.code) return false;
                            if (IS_MOD(action.key.code)) return false;
                            break;
                        case ACT_LMODS_TAP:
                        case ACT_RMODS_TAP:
                            if (action.key.mods && keyp->tap.count == 0) return false;
    3338:	f7 01       	movw	r30, r14
    333a:	95 81       	ldd	r25, Z+5	; 0x05
    333c:	90 7f       	andi	r25, 0xF0	; 240
    333e:	99 f7       	brne	.-26     	; 0x3326 <process_tapping+0x3a6>
    3340:	f9 cf       	rjmp	.-14     	; 0x3334 <process_tapping+0x3b4>
        } else {
            process_action(keyp);
            return true;
        }
    }
}
    3342:	8c 2d       	mov	r24, r12
    3344:	61 96       	adiw	r28, 0x11	; 17
    3346:	0f b6       	in	r0, 0x3f	; 63
    3348:	f8 94       	cli
    334a:	de bf       	out	0x3e, r29	; 62
    334c:	0f be       	out	0x3f, r0	; 63
    334e:	cd bf       	out	0x3d, r28	; 61
    3350:	df 91       	pop	r29
    3352:	cf 91       	pop	r28
    3354:	1f 91       	pop	r17
    3356:	0f 91       	pop	r16
    3358:	ff 90       	pop	r15
    335a:	ef 90       	pop	r14
    335c:	df 90       	pop	r13
    335e:	cf 90       	pop	r12
    3360:	bf 90       	pop	r11
    3362:	af 90       	pop	r10
    3364:	08 95       	ret

00003366 <action_tapping_process>:
static void debug_tapping_key(void);
static void debug_waiting_buffer(void);


void action_tapping_process(keyrecord_t record)
{
    3366:	1f 93       	push	r17
    3368:	cf 93       	push	r28
    336a:	df 93       	push	r29
    336c:	cd b7       	in	r28, 0x3d	; 61
    336e:	de b7       	in	r29, 0x3e	; 62
    3370:	2c 97       	sbiw	r28, 0x0c	; 12
    3372:	0f b6       	in	r0, 0x3f	; 63
    3374:	f8 94       	cli
    3376:	de bf       	out	0x3e, r29	; 62
    3378:	0f be       	out	0x3f, r0	; 63
    337a:	cd bf       	out	0x3d, r28	; 61
    337c:	4f 83       	std	Y+7, r20	; 0x07
    337e:	58 87       	std	Y+8, r21	; 0x08
    3380:	69 87       	std	Y+9, r22	; 0x09
    3382:	7a 87       	std	Y+10, r23	; 0x0a
    3384:	8b 87       	std	Y+11, r24	; 0x0b
    3386:	9c 87       	std	Y+12, r25	; 0x0c
    if (process_tapping(&record)) {
    3388:	ce 01       	movw	r24, r28
    338a:	07 96       	adiw	r24, 0x07	; 7
    338c:	0e 94 c0 17 	call	0x2f80	; 0x2f80 <process_tapping>
    3390:	88 23       	and	r24, r24
    3392:	d1 f0       	breq	.+52     	; 0x33c8 <action_tapping_process+0x62>
    3394:	9f 81       	ldd	r25, Y+7	; 0x07
    3396:	88 85       	ldd	r24, Y+8	; 0x08

/* Rules for No Event:
 * 1) (time == 0) to handle (keyevent_t){} as empty event
 * 2) Matrix(255, 255) to make TICK event available
 */
static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 && event.key.col == 255); }
    3398:	2a 85       	ldd	r18, Y+10	; 0x0a
    339a:	3b 85       	ldd	r19, Y+11	; 0x0b
    339c:	23 2b       	or	r18, r19
    339e:	31 f0       	breq	.+12     	; 0x33ac <action_tapping_process+0x46>
    33a0:	8f 3f       	cpi	r24, 0xFF	; 255
    33a2:	31 f4       	brne	.+12     	; 0x33b0 <action_tapping_process+0x4a>
    33a4:	81 e0       	ldi	r24, 0x01	; 1
    33a6:	9f 3f       	cpi	r25, 0xFF	; 255
    33a8:	19 f4       	brne	.+6      	; 0x33b0 <action_tapping_process+0x4a>
    33aa:	03 c0       	rjmp	.+6      	; 0x33b2 <action_tapping_process+0x4c>
    33ac:	81 e0       	ldi	r24, 0x01	; 1
    33ae:	01 c0       	rjmp	.+2      	; 0x33b2 <action_tapping_process+0x4c>
    33b0:	80 e0       	ldi	r24, 0x00	; 0
        if (!IS_NOEVENT(record.event)) {
    33b2:	80 fd       	sbrc	r24, 0
    33b4:	47 c0       	rjmp	.+142    	; 0x3444 <action_tapping_process+0xde>
            debug("processed: "); debug_record(record); debug("\n");
    33b6:	4f 81       	ldd	r20, Y+7	; 0x07
    33b8:	58 85       	ldd	r21, Y+8	; 0x08
    33ba:	69 85       	ldd	r22, Y+9	; 0x09
    33bc:	7a 85       	ldd	r23, Y+10	; 0x0a
    33be:	8b 85       	ldd	r24, Y+11	; 0x0b
    33c0:	9c 85       	ldd	r25, Y+12	; 0x0c
    33c2:	0e 94 19 17 	call	0x2e32	; 0x2e32 <debug_record>
    33c6:	3e c0       	rjmp	.+124    	; 0x3444 <action_tapping_process+0xde>
    33c8:	86 e0       	ldi	r24, 0x06	; 6
    33ca:	fe 01       	movw	r30, r28
    33cc:	37 96       	adiw	r30, 0x07	; 7
    33ce:	de 01       	movw	r26, r28
    33d0:	11 96       	adiw	r26, 0x01	; 1
    33d2:	01 90       	ld	r0, Z+
    33d4:	0d 92       	st	X+, r0
    33d6:	8a 95       	dec	r24
    33d8:	e1 f7       	brne	.-8      	; 0x33d2 <action_tapping_process+0x6c>
    33da:	ff 81       	ldd	r31, Y+7	; 0x07
    33dc:	e8 85       	ldd	r30, Y+8	; 0x08
    33de:	6a 85       	ldd	r22, Y+10	; 0x0a
    33e0:	7b 85       	ldd	r23, Y+11	; 0x0b
    33e2:	61 15       	cp	r22, r1
    33e4:	71 05       	cpc	r23, r1
    33e6:	31 f0       	breq	.+12     	; 0x33f4 <action_tapping_process+0x8e>
    33e8:	ef 3f       	cpi	r30, 0xFF	; 255
    33ea:	31 f4       	brne	.+12     	; 0x33f8 <action_tapping_process+0x92>
    33ec:	81 e0       	ldi	r24, 0x01	; 1
    33ee:	ff 3f       	cpi	r31, 0xFF	; 255
    33f0:	19 f4       	brne	.+6      	; 0x33f8 <action_tapping_process+0x92>
    33f2:	03 c0       	rjmp	.+6      	; 0x33fa <action_tapping_process+0x94>
    33f4:	81 e0       	ldi	r24, 0x01	; 1
    33f6:	01 c0       	rjmp	.+2      	; 0x33fa <action_tapping_process+0x94>
    33f8:	80 e0       	ldi	r24, 0x00	; 0
/*
 * Waiting buffer
 */
bool waiting_buffer_enq(keyrecord_t record)
{
    if (IS_NOEVENT(record.event)) {
    33fa:	80 fd       	sbrc	r24, 0
    33fc:	23 c0       	rjmp	.+70     	; 0x3444 <action_tapping_process+0xde>
        return true;
    }

    if ((waiting_buffer_head + 1) % WAITING_BUFFER_SIZE == waiting_buffer_tail) {
    33fe:	20 91 80 02 	lds	r18, 0x0280	; 0x800280 <waiting_buffer_head>
    3402:	30 e0       	ldi	r19, 0x00	; 0
    3404:	c9 01       	movw	r24, r18
    3406:	01 96       	adiw	r24, 0x01	; 1
    3408:	87 70       	andi	r24, 0x07	; 7
    340a:	99 27       	eor	r25, r25
    340c:	40 91 7f 02 	lds	r20, 0x027F	; 0x80027f <waiting_buffer_tail>
    3410:	50 e0       	ldi	r21, 0x00	; 0
    3412:	84 17       	cp	r24, r20
    3414:	95 07       	cpc	r25, r21
    3416:	f1 f1       	breq	.+124    	; 0x3494 <action_tapping_process+0x12e>
        debug("waiting_buffer_enq: Over flow.\n");
        return false;
    }

    waiting_buffer[waiting_buffer_head] = record;
    3418:	f9 83       	std	Y+1, r31	; 0x01
    341a:	ea 83       	std	Y+2, r30	; 0x02
    341c:	7d 83       	std	Y+5, r23	; 0x05
    341e:	6c 83       	std	Y+4, r22	; 0x04
    3420:	96 e0       	ldi	r25, 0x06	; 6
    3422:	92 9f       	mul	r25, r18
    3424:	d0 01       	movw	r26, r0
    3426:	93 9f       	mul	r25, r19
    3428:	b0 0d       	add	r27, r0
    342a:	11 24       	eor	r1, r1
    342c:	af 57       	subi	r26, 0x7F	; 127
    342e:	bd 4f       	sbci	r27, 0xFD	; 253
    3430:	fe 01       	movw	r30, r28
    3432:	31 96       	adiw	r30, 0x01	; 1
    3434:	01 90       	ld	r0, Z+
    3436:	0d 92       	st	X+, r0
    3438:	9a 95       	dec	r25
    343a:	e1 f7       	brne	.-8      	; 0x3434 <action_tapping_process+0xce>
    waiting_buffer_head = (waiting_buffer_head + 1) % WAITING_BUFFER_SIZE;
    343c:	80 93 80 02 	sts	0x0280, r24	; 0x800280 <waiting_buffer_head>

    debug("waiting_buffer_enq: "); debug_waiting_buffer();
    3440:	0e 94 29 17 	call	0x2e52	; 0x2e52 <debug_waiting_buffer>
    // process waiting_buffer
    if (!IS_NOEVENT(record.event) && waiting_buffer_head != waiting_buffer_tail) {
        debug("---- action_exec: process waiting_buffer -----\n");
    }
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
        if (process_tapping(&waiting_buffer[waiting_buffer_tail])) {
    3444:	16 e0       	ldi	r17, 0x06	; 6

    // process waiting_buffer
    if (!IS_NOEVENT(record.event) && waiting_buffer_head != waiting_buffer_tail) {
        debug("---- action_exec: process waiting_buffer -----\n");
    }
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
    3446:	80 91 7f 02 	lds	r24, 0x027F	; 0x80027f <waiting_buffer_tail>
    344a:	90 91 80 02 	lds	r25, 0x0280	; 0x800280 <waiting_buffer_head>
    344e:	89 17       	cp	r24, r25
    3450:	71 f1       	breq	.+92     	; 0x34ae <action_tapping_process+0x148>
        if (process_tapping(&waiting_buffer[waiting_buffer_tail])) {
    3452:	18 9f       	mul	r17, r24
    3454:	c0 01       	movw	r24, r0
    3456:	11 24       	eor	r1, r1
    3458:	8f 57       	subi	r24, 0x7F	; 127
    345a:	9d 4f       	sbci	r25, 0xFD	; 253
    345c:	0e 94 c0 17 	call	0x2f80	; 0x2f80 <process_tapping>
    3460:	88 23       	and	r24, r24
    3462:	29 f1       	breq	.+74     	; 0x34ae <action_tapping_process+0x148>
            debug("processed: waiting_buffer["); debug_dec(waiting_buffer_tail); debug("] = ");
            debug_record(waiting_buffer[waiting_buffer_tail]); debug("\n\n");
    3464:	e0 91 7f 02 	lds	r30, 0x027F	; 0x80027f <waiting_buffer_tail>
    3468:	1e 9f       	mul	r17, r30
    346a:	f0 01       	movw	r30, r0
    346c:	11 24       	eor	r1, r1
    346e:	ef 57       	subi	r30, 0x7F	; 127
    3470:	fd 4f       	sbci	r31, 0xFD	; 253
    3472:	40 81       	ld	r20, Z
    3474:	51 81       	ldd	r21, Z+1	; 0x01
    3476:	62 81       	ldd	r22, Z+2	; 0x02
    3478:	73 81       	ldd	r23, Z+3	; 0x03
    347a:	84 81       	ldd	r24, Z+4	; 0x04
    347c:	95 81       	ldd	r25, Z+5	; 0x05
    347e:	0e 94 19 17 	call	0x2e32	; 0x2e32 <debug_record>

    // process waiting_buffer
    if (!IS_NOEVENT(record.event) && waiting_buffer_head != waiting_buffer_tail) {
        debug("---- action_exec: process waiting_buffer -----\n");
    }
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
    3482:	80 91 7f 02 	lds	r24, 0x027F	; 0x80027f <waiting_buffer_tail>
    3486:	90 e0       	ldi	r25, 0x00	; 0
    3488:	01 96       	adiw	r24, 0x01	; 1
    348a:	87 70       	andi	r24, 0x07	; 7
    348c:	99 27       	eor	r25, r25
    348e:	80 93 7f 02 	sts	0x027F, r24	; 0x80027f <waiting_buffer_tail>
    3492:	d9 cf       	rjmp	.-78     	; 0x3446 <action_tapping_process+0xe0>
        }
    } else {
        if (!waiting_buffer_enq(record)) {
            // clear all in case of overflow.
            debug("OVERFLOW: CLEAR ALL STATES\n");
            clear_keyboard();
    3494:	0e 94 a8 16 	call	0x2d50	; 0x2d50 <clear_keyboard>
    return true;
}

void waiting_buffer_clear(void)
{
    waiting_buffer_head = 0;
    3498:	10 92 80 02 	sts	0x0280, r1	; 0x800280 <waiting_buffer_head>
    waiting_buffer_tail = 0;
    349c:	10 92 7f 02 	sts	0x027F, r1	; 0x80027f <waiting_buffer_tail>
        if (!waiting_buffer_enq(record)) {
            // clear all in case of overflow.
            debug("OVERFLOW: CLEAR ALL STATES\n");
            clear_keyboard();
            waiting_buffer_clear();
            tapping_key = (keyrecord_t){};
    34a0:	e1 eb       	ldi	r30, 0xB1	; 177
    34a2:	f2 e0       	ldi	r31, 0x02	; 2
    34a4:	86 e0       	ldi	r24, 0x06	; 6
    34a6:	df 01       	movw	r26, r30
    34a8:	1d 92       	st	X+, r1
    34aa:	8a 95       	dec	r24
    34ac:	e9 f7       	brne	.-6      	; 0x34a8 <action_tapping_process+0x142>
        }
    }
    if (!IS_NOEVENT(record.event)) {
        debug("\n");
    }
}
    34ae:	2c 96       	adiw	r28, 0x0c	; 12
    34b0:	0f b6       	in	r0, 0x3f	; 63
    34b2:	f8 94       	cli
    34b4:	de bf       	out	0x3e, r29	; 62
    34b6:	0f be       	out	0x3f, r0	; 63
    34b8:	cd bf       	out	0x3d, r28	; 61
    34ba:	df 91       	pop	r29
    34bc:	cf 91       	pop	r28
    34be:	1f 91       	pop	r17
    34c0:	08 95       	ret

000034c2 <action_macro_play>:

#ifndef NO_ACTION_MACRO

#define MACRO_READ()  (macro = MACRO_GET(macro_p++))
void action_macro_play(const macro_t *macro_p)
{
    34c2:	df 92       	push	r13
    34c4:	ef 92       	push	r14
    34c6:	ff 92       	push	r15
    34c8:	0f 93       	push	r16
    34ca:	1f 93       	push	r17
    34cc:	cf 93       	push	r28
    34ce:	df 93       	push	r29
    34d0:	fc 01       	movw	r30, r24
    macro_t macro = END;
    uint8_t interval = 0;

    uint8_t mod_storage = 0;

    if (!macro_p) return;
    34d2:	89 2b       	or	r24, r25
    34d4:	09 f4       	brne	.+2      	; 0x34d8 <action_macro_play+0x16>
    34d6:	88 c0       	rjmp	.+272    	; 0x35e8 <action_macro_play+0x126>
    34d8:	e1 2c       	mov	r14, r1
    34da:	f1 2c       	mov	r15, r1
        switch (MACRO_READ()) {
            case KEY_DOWN:
                MACRO_READ();
                dprintf("KEY_DOWN(%02X)\n", macro);
                if (IS_MOD(macro)) {
                    add_weak_mods(MOD_BIT(macro));
    34dc:	dd 24       	eor	r13, r13
    34de:	d3 94       	inc	r13

    uint8_t mod_storage = 0;

    if (!macro_p) return;
    while (true) {
        switch (MACRO_READ()) {
    34e0:	ef 01       	movw	r28, r30
    34e2:	21 96       	adiw	r28, 0x01	; 1
    34e4:	84 91       	lpm	r24, Z
    34e6:	85 37       	cpi	r24, 0x75	; 117
    34e8:	09 f4       	brne	.+2      	; 0x34ec <action_macro_play+0x2a>
    34ea:	60 c0       	rjmp	.+192    	; 0x35ac <action_macro_play+0xea>
    34ec:	58 f4       	brcc	.+22     	; 0x3504 <action_macro_play+0x42>
    34ee:	84 37       	cpi	r24, 0x74	; 116
    34f0:	08 f0       	brcs	.+2      	; 0x34f4 <action_macro_play+0x32>
    34f2:	4e c0       	rjmp	.+156    	; 0x3590 <action_macro_play+0xce>
    34f4:	84 30       	cpi	r24, 0x04	; 4
    34f6:	08 f0       	brcs	.+2      	; 0x34fa <action_macro_play+0x38>
    34f8:	68 c0       	rjmp	.+208    	; 0x35ca <action_macro_play+0x108>
    34fa:	81 30       	cpi	r24, 0x01	; 1
    34fc:	d1 f0       	breq	.+52     	; 0x3532 <action_macro_play+0x70>
    34fe:	82 30       	cpi	r24, 0x02	; 2
    3500:	71 f1       	breq	.+92     	; 0x355e <action_macro_play+0x9c>
    3502:	72 c0       	rjmp	.+228    	; 0x35e8 <action_macro_play+0x126>
    3504:	88 37       	cpi	r24, 0x78	; 120
    3506:	09 f4       	brne	.+2      	; 0x350a <action_macro_play+0x48>
    3508:	5b c0       	rjmp	.+182    	; 0x35c0 <action_macro_play+0xfe>
    350a:	50 f4       	brcc	.+20     	; 0x3520 <action_macro_play+0x5e>
    350c:	86 37       	cpi	r24, 0x76	; 118
    350e:	09 f4       	brne	.+2      	; 0x3512 <action_macro_play+0x50>
    3510:	53 c0       	rjmp	.+166    	; 0x35b8 <action_macro_play+0xf6>
    3512:	87 37       	cpi	r24, 0x77	; 119
    3514:	09 f0       	breq	.+2      	; 0x3518 <action_macro_play+0x56>
    3516:	68 c0       	rjmp	.+208    	; 0x35e8 <action_macro_play+0x126>
                break;
            case MOD_STORE:
                mod_storage = get_mods();
                break;
            case MOD_RESTORE:
                set_mods(mod_storage);
    3518:	8e 2d       	mov	r24, r14
    351a:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <set_mods>
    351e:	52 c0       	rjmp	.+164    	; 0x35c4 <action_macro_play+0x102>

    uint8_t mod_storage = 0;

    if (!macro_p) return;
    while (true) {
        switch (MACRO_READ()) {
    3520:	9c e7       	ldi	r25, 0x7C	; 124
    3522:	98 0f       	add	r25, r24
    3524:	90 37       	cpi	r25, 0x70	; 112
    3526:	08 f0       	brcs	.+2      	; 0x352a <action_macro_play+0x68>
    3528:	5f c0       	rjmp	.+190    	; 0x35e8 <action_macro_play+0x126>
                dprintf("DOWN(%02X)\n", macro);
                register_code(macro);
                break;
            case 0x84 ... 0xF3:
                dprintf("UP(%02X)\n", macro);
                unregister_code(macro&0x7F);
    352a:	8f 77       	andi	r24, 0x7F	; 127
    352c:	0e 94 22 13 	call	0x2644	; 0x2644 <unregister_code>
                break;
    3530:	4e c0       	rjmp	.+156    	; 0x35ce <action_macro_play+0x10c>

    if (!macro_p) return;
    while (true) {
        switch (MACRO_READ()) {
            case KEY_DOWN:
                MACRO_READ();
    3532:	8f 01       	movw	r16, r30
    3534:	0e 5f       	subi	r16, 0xFE	; 254
    3536:	1f 4f       	sbci	r17, 0xFF	; 255
    3538:	fe 01       	movw	r30, r28
    353a:	84 91       	lpm	r24, Z
                dprintf("KEY_DOWN(%02X)\n", macro);
                if (IS_MOD(macro)) {
    353c:	90 e2       	ldi	r25, 0x20	; 32
    353e:	98 0f       	add	r25, r24
    3540:	98 30       	cpi	r25, 0x08	; 8
    3542:	50 f4       	brcc	.+20     	; 0x3558 <action_macro_play+0x96>
                    add_weak_mods(MOD_BIT(macro));
    3544:	87 70       	andi	r24, 0x07	; 7
    3546:	fd 2d       	mov	r31, r13
    3548:	01 c0       	rjmp	.+2      	; 0x354c <action_macro_play+0x8a>
    354a:	ff 0f       	add	r31, r31
    354c:	8a 95       	dec	r24
    354e:	ea f7       	brpl	.-6      	; 0x354a <action_macro_play+0x88>
    3550:	8f 2f       	mov	r24, r31
    3552:	0e 94 53 1d 	call	0x3aa6	; 0x3aa6 <add_weak_mods>
    3556:	15 c0       	rjmp	.+42     	; 0x3582 <action_macro_play+0xc0>
                    send_keyboard_report();
                } else {
                    register_code(macro);
    3558:	0e 94 34 12 	call	0x2468	; 0x2468 <register_code>
    355c:	14 c0       	rjmp	.+40     	; 0x3586 <action_macro_play+0xc4>
                }
                break;
            case KEY_UP:
                MACRO_READ();
    355e:	8f 01       	movw	r16, r30
    3560:	0e 5f       	subi	r16, 0xFE	; 254
    3562:	1f 4f       	sbci	r17, 0xFF	; 255
    3564:	fe 01       	movw	r30, r28
    3566:	84 91       	lpm	r24, Z
                dprintf("KEY_UP(%02X)\n", macro);
                if (IS_MOD(macro)) {
    3568:	90 e2       	ldi	r25, 0x20	; 32
    356a:	98 0f       	add	r25, r24
    356c:	98 30       	cpi	r25, 0x08	; 8
    356e:	68 f4       	brcc	.+26     	; 0x358a <action_macro_play+0xc8>
                    del_weak_mods(MOD_BIT(macro));
    3570:	87 70       	andi	r24, 0x07	; 7
    3572:	fd 2d       	mov	r31, r13
    3574:	01 c0       	rjmp	.+2      	; 0x3578 <action_macro_play+0xb6>
    3576:	ff 0f       	add	r31, r31
    3578:	8a 95       	dec	r24
    357a:	ea f7       	brpl	.-6      	; 0x3576 <action_macro_play+0xb4>
    357c:	8f 2f       	mov	r24, r31
    357e:	0e 94 59 1d 	call	0x3ab2	; 0x3ab2 <del_weak_mods>
                    send_keyboard_report();
    3582:	0e 94 7a 1d 	call	0x3af4	; 0x3af4 <send_keyboard_report>
                } else {
                    register_code(macro);
                }
                break;
            case KEY_UP:
                MACRO_READ();
    3586:	e8 01       	movw	r28, r16
    3588:	22 c0       	rjmp	.+68     	; 0x35ce <action_macro_play+0x10c>
                dprintf("KEY_UP(%02X)\n", macro);
                if (IS_MOD(macro)) {
                    del_weak_mods(MOD_BIT(macro));
                    send_keyboard_report();
                } else {
                    unregister_code(macro);
    358a:	0e 94 22 13 	call	0x2644	; 0x2644 <unregister_code>
    358e:	fb cf       	rjmp	.-10     	; 0x3586 <action_macro_play+0xc4>
                }
                break;
            case WAIT:
                MACRO_READ();
    3590:	cf 01       	movw	r24, r30
    3592:	02 96       	adiw	r24, 0x02	; 2
    3594:	fe 01       	movw	r30, r28
    3596:	c4 91       	lpm	r28, Z
                dprintf("WAIT(%u)\n", macro);
                { uint8_t ms = macro; while (ms--) wait_ms(1); }
    3598:	cc 23       	and	r28, r28
    359a:	61 f0       	breq	.+24     	; 0x35b4 <action_macro_play+0xf2>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    359c:	ef e9       	ldi	r30, 0x9F	; 159
    359e:	ff e0       	ldi	r31, 0x0F	; 15
    35a0:	31 97       	sbiw	r30, 0x01	; 1
    35a2:	f1 f7       	brne	.-4      	; 0x35a0 <action_macro_play+0xde>
    35a4:	00 c0       	rjmp	.+0      	; 0x35a6 <action_macro_play+0xe4>
    35a6:	00 00       	nop
    35a8:	c1 50       	subi	r28, 0x01	; 1
    35aa:	f6 cf       	rjmp	.-20     	; 0x3598 <action_macro_play+0xd6>
                break;
            case INTERVAL:
                interval = MACRO_READ();
    35ac:	cf 01       	movw	r24, r30
    35ae:	02 96       	adiw	r24, 0x02	; 2
    35b0:	fe 01       	movw	r30, r28
    35b2:	f4 90       	lpm	r15, Z
    35b4:	ec 01       	movw	r28, r24
                dprintf("INTERVAL(%u)\n", interval);
                break;
    35b6:	0b c0       	rjmp	.+22     	; 0x35ce <action_macro_play+0x10c>
            case MOD_STORE:
                mod_storage = get_mods();
    35b8:	0e 94 3d 1d 	call	0x3a7a	; 0x3a7a <get_mods>
    35bc:	e8 2e       	mov	r14, r24
                break;
    35be:	07 c0       	rjmp	.+14     	; 0x35ce <action_macro_play+0x10c>
            case MOD_RESTORE:
                set_mods(mod_storage);
                send_keyboard_report();
                break;
            case MOD_CLEAR:
                clear_mods();
    35c0:	0e 94 50 1d 	call	0x3aa0	; 0x3aa0 <clear_mods>
                send_keyboard_report();
    35c4:	0e 94 7a 1d 	call	0x3af4	; 0x3af4 <send_keyboard_report>
                break;
    35c8:	02 c0       	rjmp	.+4      	; 0x35ce <action_macro_play+0x10c>
            case 0x04 ... 0x73:
                dprintf("DOWN(%02X)\n", macro);
                register_code(macro);
    35ca:	0e 94 34 12 	call	0x2468	; 0x2468 <register_code>
            case END:
            default:
                return;
        }
        // interval
        { uint8_t ms = interval; while (ms--) wait_ms(1); }
    35ce:	8f 2d       	mov	r24, r15
    35d0:	88 23       	and	r24, r24
    35d2:	41 f0       	breq	.+16     	; 0x35e4 <action_macro_play+0x122>
    35d4:	ef e9       	ldi	r30, 0x9F	; 159
    35d6:	ff e0       	ldi	r31, 0x0F	; 15
    35d8:	31 97       	sbiw	r30, 0x01	; 1
    35da:	f1 f7       	brne	.-4      	; 0x35d8 <action_macro_play+0x116>
    35dc:	00 c0       	rjmp	.+0      	; 0x35de <action_macro_play+0x11c>
    35de:	00 00       	nop
    35e0:	81 50       	subi	r24, 0x01	; 1
    35e2:	f6 cf       	rjmp	.-20     	; 0x35d0 <action_macro_play+0x10e>
    35e4:	fe 01       	movw	r30, r28
    35e6:	7c cf       	rjmp	.-264    	; 0x34e0 <action_macro_play+0x1e>
    }
}
    35e8:	df 91       	pop	r29
    35ea:	cf 91       	pop	r28
    35ec:	1f 91       	pop	r17
    35ee:	0f 91       	pop	r16
    35f0:	ff 90       	pop	r15
    35f2:	ef 90       	pop	r14
    35f4:	df 90       	pop	r13
    35f6:	08 95       	ret

000035f8 <layer_state_set>:

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    35f8:	60 93 e1 02 	sts	0x02E1, r22	; 0x8002e1 <layer_state>
    35fc:	70 93 e2 02 	sts	0x02E2, r23	; 0x8002e2 <layer_state+0x1>
    3600:	80 93 e3 02 	sts	0x02E3, r24	; 0x8002e3 <layer_state+0x2>
    3604:	90 93 e4 02 	sts	0x02E4, r25	; 0x8002e4 <layer_state+0x3>
    hook_layer_change(layer_state);
    3608:	0c 94 c8 1d 	jmp	0x3b90	; 0x3b90 <hook_layer_change>

0000360c <default_layer_debug>:
    360c:	08 95       	ret

0000360e <default_layer_set>:

static void default_layer_state_set(uint32_t state)
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    360e:	60 93 e5 02 	sts	0x02E5, r22	; 0x8002e5 <default_layer_state>
    3612:	70 93 e6 02 	sts	0x02E6, r23	; 0x8002e6 <default_layer_state+0x1>
    3616:	80 93 e7 02 	sts	0x02E7, r24	; 0x8002e7 <default_layer_state+0x2>
    361a:	90 93 e8 02 	sts	0x02E8, r25	; 0x8002e8 <default_layer_state+0x3>
    hook_default_layer_change(default_layer_state);
    361e:	0c 94 c7 1d 	jmp	0x3b8e	; 0x3b8e <hook_default_layer_change>

00003622 <default_layer_or>:
    default_layer_state_set(state);
}

#ifndef NO_ACTION_LAYER
void default_layer_or(uint32_t state)
{
    3622:	0f 93       	push	r16
    3624:	1f 93       	push	r17
    default_layer_state_set(default_layer_state | state);
    3626:	00 91 e5 02 	lds	r16, 0x02E5	; 0x8002e5 <default_layer_state>
    362a:	10 91 e6 02 	lds	r17, 0x02E6	; 0x8002e6 <default_layer_state+0x1>
    362e:	20 91 e7 02 	lds	r18, 0x02E7	; 0x8002e7 <default_layer_state+0x2>
    3632:	30 91 e8 02 	lds	r19, 0x02E8	; 0x8002e8 <default_layer_state+0x3>
    3636:	60 2b       	or	r22, r16
    3638:	71 2b       	or	r23, r17
    363a:	82 2b       	or	r24, r18
    363c:	93 2b       	or	r25, r19

static void default_layer_state_set(uint32_t state)
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    363e:	60 93 e5 02 	sts	0x02E5, r22	; 0x8002e5 <default_layer_state>
    3642:	70 93 e6 02 	sts	0x02E6, r23	; 0x8002e6 <default_layer_state+0x1>
    3646:	80 93 e7 02 	sts	0x02E7, r24	; 0x8002e7 <default_layer_state+0x2>
    364a:	90 93 e8 02 	sts	0x02E8, r25	; 0x8002e8 <default_layer_state+0x3>

#ifndef NO_ACTION_LAYER
void default_layer_or(uint32_t state)
{
    default_layer_state_set(default_layer_state | state);
}
    364e:	1f 91       	pop	r17
    3650:	0f 91       	pop	r16
static void default_layer_state_set(uint32_t state)
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    hook_default_layer_change(default_layer_state);
    3652:	0c 94 c7 1d 	jmp	0x3b8e	; 0x3b8e <hook_default_layer_change>

00003656 <default_layer_and>:
void default_layer_or(uint32_t state)
{
    default_layer_state_set(default_layer_state | state);
}
void default_layer_and(uint32_t state)
{
    3656:	0f 93       	push	r16
    3658:	1f 93       	push	r17
    default_layer_state_set(default_layer_state & state);
    365a:	00 91 e5 02 	lds	r16, 0x02E5	; 0x8002e5 <default_layer_state>
    365e:	10 91 e6 02 	lds	r17, 0x02E6	; 0x8002e6 <default_layer_state+0x1>
    3662:	20 91 e7 02 	lds	r18, 0x02E7	; 0x8002e7 <default_layer_state+0x2>
    3666:	30 91 e8 02 	lds	r19, 0x02E8	; 0x8002e8 <default_layer_state+0x3>
    366a:	60 23       	and	r22, r16
    366c:	71 23       	and	r23, r17
    366e:	82 23       	and	r24, r18
    3670:	93 23       	and	r25, r19

static void default_layer_state_set(uint32_t state)
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    3672:	60 93 e5 02 	sts	0x02E5, r22	; 0x8002e5 <default_layer_state>
    3676:	70 93 e6 02 	sts	0x02E6, r23	; 0x8002e6 <default_layer_state+0x1>
    367a:	80 93 e7 02 	sts	0x02E7, r24	; 0x8002e7 <default_layer_state+0x2>
    367e:	90 93 e8 02 	sts	0x02E8, r25	; 0x8002e8 <default_layer_state+0x3>
    default_layer_state_set(default_layer_state | state);
}
void default_layer_and(uint32_t state)
{
    default_layer_state_set(default_layer_state & state);
}
    3682:	1f 91       	pop	r17
    3684:	0f 91       	pop	r16
static void default_layer_state_set(uint32_t state)
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    hook_default_layer_change(default_layer_state);
    3686:	0c 94 c7 1d 	jmp	0x3b8e	; 0x3b8e <hook_default_layer_change>

0000368a <default_layer_xor>:
void default_layer_and(uint32_t state)
{
    default_layer_state_set(default_layer_state & state);
}
void default_layer_xor(uint32_t state)
{
    368a:	0f 93       	push	r16
    368c:	1f 93       	push	r17
    default_layer_state_set(default_layer_state ^ state);
    368e:	00 91 e5 02 	lds	r16, 0x02E5	; 0x8002e5 <default_layer_state>
    3692:	10 91 e6 02 	lds	r17, 0x02E6	; 0x8002e6 <default_layer_state+0x1>
    3696:	20 91 e7 02 	lds	r18, 0x02E7	; 0x8002e7 <default_layer_state+0x2>
    369a:	30 91 e8 02 	lds	r19, 0x02E8	; 0x8002e8 <default_layer_state+0x3>
    369e:	60 27       	eor	r22, r16
    36a0:	71 27       	eor	r23, r17
    36a2:	82 27       	eor	r24, r18
    36a4:	93 27       	eor	r25, r19

static void default_layer_state_set(uint32_t state)
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    36a6:	60 93 e5 02 	sts	0x02E5, r22	; 0x8002e5 <default_layer_state>
    36aa:	70 93 e6 02 	sts	0x02E6, r23	; 0x8002e6 <default_layer_state+0x1>
    36ae:	80 93 e7 02 	sts	0x02E7, r24	; 0x8002e7 <default_layer_state+0x2>
    36b2:	90 93 e8 02 	sts	0x02E8, r25	; 0x8002e8 <default_layer_state+0x3>
    default_layer_state_set(default_layer_state & state);
}
void default_layer_xor(uint32_t state)
{
    default_layer_state_set(default_layer_state ^ state);
}
    36b6:	1f 91       	pop	r17
    36b8:	0f 91       	pop	r16
static void default_layer_state_set(uint32_t state)
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    hook_default_layer_change(default_layer_state);
    36ba:	0c 94 c7 1d 	jmp	0x3b8e	; 0x3b8e <hook_default_layer_change>

000036be <layer_clear>:
#endif
}

void layer_clear(void)
{
    layer_state_set(0);
    36be:	60 e0       	ldi	r22, 0x00	; 0
    36c0:	70 e0       	ldi	r23, 0x00	; 0
    36c2:	cb 01       	movw	r24, r22
    36c4:	0c 94 fc 1a 	jmp	0x35f8	; 0x35f8 <layer_state_set>

000036c8 <layer_move>:
}

void layer_move(uint8_t layer)
{
    36c8:	0f 93       	push	r16
    36ca:	1f 93       	push	r17
    layer_state_set(1UL<<layer);
    36cc:	41 e0       	ldi	r20, 0x01	; 1
    36ce:	50 e0       	ldi	r21, 0x00	; 0
    36d0:	60 e0       	ldi	r22, 0x00	; 0
    36d2:	70 e0       	ldi	r23, 0x00	; 0
    36d4:	8a 01       	movw	r16, r20
    36d6:	9b 01       	movw	r18, r22
    36d8:	04 c0       	rjmp	.+8      	; 0x36e2 <layer_move+0x1a>
    36da:	00 0f       	add	r16, r16
    36dc:	11 1f       	adc	r17, r17
    36de:	22 1f       	adc	r18, r18
    36e0:	33 1f       	adc	r19, r19
    36e2:	8a 95       	dec	r24
    36e4:	d2 f7       	brpl	.-12     	; 0x36da <layer_move+0x12>
    36e6:	c9 01       	movw	r24, r18
    36e8:	b8 01       	movw	r22, r16
}
    36ea:	1f 91       	pop	r17
    36ec:	0f 91       	pop	r16
    layer_state_set(0);
}

void layer_move(uint8_t layer)
{
    layer_state_set(1UL<<layer);
    36ee:	0c 94 fc 1a 	jmp	0x35f8	; 0x35f8 <layer_state_set>

000036f2 <layer_on>:
}

void layer_on(uint8_t layer)
{
    36f2:	0f 93       	push	r16
    36f4:	1f 93       	push	r17
    layer_state_set(layer_state | (1UL<<layer));
    36f6:	41 e0       	ldi	r20, 0x01	; 1
    36f8:	50 e0       	ldi	r21, 0x00	; 0
    36fa:	60 e0       	ldi	r22, 0x00	; 0
    36fc:	70 e0       	ldi	r23, 0x00	; 0
    36fe:	04 c0       	rjmp	.+8      	; 0x3708 <layer_on+0x16>
    3700:	44 0f       	add	r20, r20
    3702:	55 1f       	adc	r21, r21
    3704:	66 1f       	adc	r22, r22
    3706:	77 1f       	adc	r23, r23
    3708:	8a 95       	dec	r24
    370a:	d2 f7       	brpl	.-12     	; 0x3700 <layer_on+0xe>
    370c:	80 91 e1 02 	lds	r24, 0x02E1	; 0x8002e1 <layer_state>
    3710:	90 91 e2 02 	lds	r25, 0x02E2	; 0x8002e2 <layer_state+0x1>
    3714:	a0 91 e3 02 	lds	r26, 0x02E3	; 0x8002e3 <layer_state+0x2>
    3718:	b0 91 e4 02 	lds	r27, 0x02E4	; 0x8002e4 <layer_state+0x3>
    371c:	8a 01       	movw	r16, r20
    371e:	9b 01       	movw	r18, r22
    3720:	08 2b       	or	r16, r24
    3722:	19 2b       	or	r17, r25
    3724:	2a 2b       	or	r18, r26
    3726:	3b 2b       	or	r19, r27
    3728:	c9 01       	movw	r24, r18
    372a:	b8 01       	movw	r22, r16
}
    372c:	1f 91       	pop	r17
    372e:	0f 91       	pop	r16
    layer_state_set(1UL<<layer);
}

void layer_on(uint8_t layer)
{
    layer_state_set(layer_state | (1UL<<layer));
    3730:	0c 94 fc 1a 	jmp	0x35f8	; 0x35f8 <layer_state_set>

00003734 <layer_off>:
}

void layer_off(uint8_t layer)
{
    3734:	0f 93       	push	r16
    3736:	1f 93       	push	r17
    layer_state_set(layer_state & ~(1UL<<layer));
    3738:	41 e0       	ldi	r20, 0x01	; 1
    373a:	50 e0       	ldi	r21, 0x00	; 0
    373c:	60 e0       	ldi	r22, 0x00	; 0
    373e:	70 e0       	ldi	r23, 0x00	; 0
    3740:	04 c0       	rjmp	.+8      	; 0x374a <layer_off+0x16>
    3742:	44 0f       	add	r20, r20
    3744:	55 1f       	adc	r21, r21
    3746:	66 1f       	adc	r22, r22
    3748:	77 1f       	adc	r23, r23
    374a:	8a 95       	dec	r24
    374c:	d2 f7       	brpl	.-12     	; 0x3742 <layer_off+0xe>
    374e:	40 95       	com	r20
    3750:	50 95       	com	r21
    3752:	60 95       	com	r22
    3754:	70 95       	com	r23
    3756:	80 91 e1 02 	lds	r24, 0x02E1	; 0x8002e1 <layer_state>
    375a:	90 91 e2 02 	lds	r25, 0x02E2	; 0x8002e2 <layer_state+0x1>
    375e:	a0 91 e3 02 	lds	r26, 0x02E3	; 0x8002e3 <layer_state+0x2>
    3762:	b0 91 e4 02 	lds	r27, 0x02E4	; 0x8002e4 <layer_state+0x3>
    3766:	8a 01       	movw	r16, r20
    3768:	9b 01       	movw	r18, r22
    376a:	08 23       	and	r16, r24
    376c:	19 23       	and	r17, r25
    376e:	2a 23       	and	r18, r26
    3770:	3b 23       	and	r19, r27
    3772:	c9 01       	movw	r24, r18
    3774:	b8 01       	movw	r22, r16
}
    3776:	1f 91       	pop	r17
    3778:	0f 91       	pop	r16
    layer_state_set(layer_state | (1UL<<layer));
}

void layer_off(uint8_t layer)
{
    layer_state_set(layer_state & ~(1UL<<layer));
    377a:	0c 94 fc 1a 	jmp	0x35f8	; 0x35f8 <layer_state_set>

0000377e <layer_invert>:
}

void layer_invert(uint8_t layer)
{
    377e:	0f 93       	push	r16
    3780:	1f 93       	push	r17
    layer_state_set(layer_state ^ (1UL<<layer));
    3782:	41 e0       	ldi	r20, 0x01	; 1
    3784:	50 e0       	ldi	r21, 0x00	; 0
    3786:	60 e0       	ldi	r22, 0x00	; 0
    3788:	70 e0       	ldi	r23, 0x00	; 0
    378a:	04 c0       	rjmp	.+8      	; 0x3794 <layer_invert+0x16>
    378c:	44 0f       	add	r20, r20
    378e:	55 1f       	adc	r21, r21
    3790:	66 1f       	adc	r22, r22
    3792:	77 1f       	adc	r23, r23
    3794:	8a 95       	dec	r24
    3796:	d2 f7       	brpl	.-12     	; 0x378c <layer_invert+0xe>
    3798:	80 91 e1 02 	lds	r24, 0x02E1	; 0x8002e1 <layer_state>
    379c:	90 91 e2 02 	lds	r25, 0x02E2	; 0x8002e2 <layer_state+0x1>
    37a0:	a0 91 e3 02 	lds	r26, 0x02E3	; 0x8002e3 <layer_state+0x2>
    37a4:	b0 91 e4 02 	lds	r27, 0x02E4	; 0x8002e4 <layer_state+0x3>
    37a8:	8a 01       	movw	r16, r20
    37aa:	9b 01       	movw	r18, r22
    37ac:	08 27       	eor	r16, r24
    37ae:	19 27       	eor	r17, r25
    37b0:	2a 27       	eor	r18, r26
    37b2:	3b 27       	eor	r19, r27
    37b4:	c9 01       	movw	r24, r18
    37b6:	b8 01       	movw	r22, r16
}
    37b8:	1f 91       	pop	r17
    37ba:	0f 91       	pop	r16
    layer_state_set(layer_state & ~(1UL<<layer));
}

void layer_invert(uint8_t layer)
{
    layer_state_set(layer_state ^ (1UL<<layer));
    37bc:	0c 94 fc 1a 	jmp	0x35f8	; 0x35f8 <layer_state_set>

000037c0 <layer_or>:
}

void layer_or(uint32_t state)
{
    37c0:	0f 93       	push	r16
    37c2:	1f 93       	push	r17
    layer_state_set(layer_state | state);
    37c4:	00 91 e1 02 	lds	r16, 0x02E1	; 0x8002e1 <layer_state>
    37c8:	10 91 e2 02 	lds	r17, 0x02E2	; 0x8002e2 <layer_state+0x1>
    37cc:	20 91 e3 02 	lds	r18, 0x02E3	; 0x8002e3 <layer_state+0x2>
    37d0:	30 91 e4 02 	lds	r19, 0x02E4	; 0x8002e4 <layer_state+0x3>
    37d4:	60 2b       	or	r22, r16
    37d6:	71 2b       	or	r23, r17
    37d8:	82 2b       	or	r24, r18
    37da:	93 2b       	or	r25, r19
}
    37dc:	1f 91       	pop	r17
    37de:	0f 91       	pop	r16
    layer_state_set(layer_state ^ (1UL<<layer));
}

void layer_or(uint32_t state)
{
    layer_state_set(layer_state | state);
    37e0:	0c 94 fc 1a 	jmp	0x35f8	; 0x35f8 <layer_state_set>

000037e4 <layer_and>:
}
void layer_and(uint32_t state)
{
    37e4:	0f 93       	push	r16
    37e6:	1f 93       	push	r17
    layer_state_set(layer_state & state);
    37e8:	00 91 e1 02 	lds	r16, 0x02E1	; 0x8002e1 <layer_state>
    37ec:	10 91 e2 02 	lds	r17, 0x02E2	; 0x8002e2 <layer_state+0x1>
    37f0:	20 91 e3 02 	lds	r18, 0x02E3	; 0x8002e3 <layer_state+0x2>
    37f4:	30 91 e4 02 	lds	r19, 0x02E4	; 0x8002e4 <layer_state+0x3>
    37f8:	60 23       	and	r22, r16
    37fa:	71 23       	and	r23, r17
    37fc:	82 23       	and	r24, r18
    37fe:	93 23       	and	r25, r19
}
    3800:	1f 91       	pop	r17
    3802:	0f 91       	pop	r16
{
    layer_state_set(layer_state | state);
}
void layer_and(uint32_t state)
{
    layer_state_set(layer_state & state);
    3804:	0c 94 fc 1a 	jmp	0x35f8	; 0x35f8 <layer_state_set>

00003808 <layer_xor>:
}
void layer_xor(uint32_t state)
{
    3808:	0f 93       	push	r16
    380a:	1f 93       	push	r17
    layer_state_set(layer_state ^ state);
    380c:	00 91 e1 02 	lds	r16, 0x02E1	; 0x8002e1 <layer_state>
    3810:	10 91 e2 02 	lds	r17, 0x02E2	; 0x8002e2 <layer_state+0x1>
    3814:	20 91 e3 02 	lds	r18, 0x02E3	; 0x8002e3 <layer_state+0x2>
    3818:	30 91 e4 02 	lds	r19, 0x02E4	; 0x8002e4 <layer_state+0x3>
    381c:	60 27       	eor	r22, r16
    381e:	71 27       	eor	r23, r17
    3820:	82 27       	eor	r24, r18
    3822:	93 27       	eor	r25, r19
}
    3824:	1f 91       	pop	r17
    3826:	0f 91       	pop	r16
{
    layer_state_set(layer_state & state);
}
void layer_xor(uint32_t state)
{
    layer_state_set(layer_state ^ state);
    3828:	0c 94 fc 1a 	jmp	0x35f8	; 0x35f8 <layer_state_set>

0000382c <layer_debug>:
}

void layer_debug(void)
{
    382c:	08 95       	ret

0000382e <layer_switch_get_action>:
#ifndef NO_TRACK_KEY_PRESS
/* record layer on where key is pressed */
static uint8_t layer_pressed[MATRIX_ROWS][MATRIX_COLS] = {};
#endif
action_t layer_switch_get_action(keyevent_t event)
{
    382e:	8f 92       	push	r8
    3830:	9f 92       	push	r9
    3832:	af 92       	push	r10
    3834:	bf 92       	push	r11
    3836:	df 92       	push	r13
    3838:	ef 92       	push	r14
    383a:	ff 92       	push	r15
    383c:	0f 93       	push	r16
    383e:	1f 93       	push	r17
    3840:	cf 93       	push	r28
    3842:	df 93       	push	r29
    3844:	00 d0       	rcall	.+0      	; 0x3846 <layer_switch_get_action+0x18>
    3846:	00 d0       	rcall	.+0      	; 0x3848 <layer_switch_get_action+0x1a>
    3848:	1f 92       	push	r1
    384a:	cd b7       	in	r28, 0x3d	; 61
    384c:	de b7       	in	r29, 0x3e	; 62
    384e:	6b 83       	std	Y+3, r22	; 0x03
    3850:	7c 83       	std	Y+4, r23	; 0x04
    3852:	8d 83       	std	Y+5, r24	; 0x05
    3854:	8a 01       	movw	r16, r20
    3856:	8c 81       	ldd	r24, Y+4	; 0x04
    3858:	9d 81       	ldd	r25, Y+5	; 0x05
    385a:	89 2b       	or	r24, r25
    385c:	31 f0       	breq	.+12     	; 0x386a <layer_switch_get_action+0x3c>
    385e:	1f 3f       	cpi	r17, 0xFF	; 255
    3860:	31 f4       	brne	.+12     	; 0x386e <layer_switch_get_action+0x40>
    3862:	81 e0       	ldi	r24, 0x01	; 1
    3864:	4f 3f       	cpi	r20, 0xFF	; 255
    3866:	19 f4       	brne	.+6      	; 0x386e <layer_switch_get_action+0x40>
    3868:	03 c0       	rjmp	.+6      	; 0x3870 <layer_switch_get_action+0x42>
    386a:	81 e0       	ldi	r24, 0x01	; 1
    386c:	01 c0       	rjmp	.+2      	; 0x3870 <layer_switch_get_action+0x42>
    386e:	80 e0       	ldi	r24, 0x00	; 0
    if (IS_NOEVENT(event)) return (action_t)ACTION_NO;
    3870:	80 ff       	sbrs	r24, 0
    3872:	03 c0       	rjmp	.+6      	; 0x387a <layer_switch_get_action+0x4c>
    3874:	80 e0       	ldi	r24, 0x00	; 0
    3876:	90 e0       	ldi	r25, 0x00	; 0
    3878:	4d c0       	rjmp	.+154    	; 0x3914 <layer_switch_get_action+0xe6>

    uint8_t layer = 0;
#ifndef NO_TRACK_KEY_PRESS
    if (event.pressed) {
    387a:	8b 81       	ldd	r24, Y+3	; 0x03
    387c:	88 23       	and	r24, r24
    387e:	d1 f1       	breq	.+116    	; 0x38f4 <layer_switch_get_action+0xc6>
/* return layer effective for key at this time */
static uint8_t current_layer_for_key(keypos_t key)
{
#ifndef NO_ACTION_LAYER
    action_t action = ACTION_TRANSPARENT;
    uint32_t layers = layer_state | default_layer_state;
    3880:	80 90 e1 02 	lds	r8, 0x02E1	; 0x8002e1 <layer_state>
    3884:	90 90 e2 02 	lds	r9, 0x02E2	; 0x8002e2 <layer_state+0x1>
    3888:	a0 90 e3 02 	lds	r10, 0x02E3	; 0x8002e3 <layer_state+0x2>
    388c:	b0 90 e4 02 	lds	r11, 0x02E4	; 0x8002e4 <layer_state+0x3>
    3890:	80 91 e5 02 	lds	r24, 0x02E5	; 0x8002e5 <default_layer_state>
    3894:	90 91 e6 02 	lds	r25, 0x02E6	; 0x8002e6 <default_layer_state+0x1>
    3898:	a0 91 e7 02 	lds	r26, 0x02E7	; 0x8002e7 <default_layer_state+0x2>
    389c:	b0 91 e8 02 	lds	r27, 0x02E8	; 0x8002e8 <default_layer_state+0x3>
    38a0:	88 2a       	or	r8, r24
    38a2:	99 2a       	or	r9, r25
    38a4:	aa 2a       	or	r10, r26
    38a6:	bb 2a       	or	r11, r27
    38a8:	8f e1       	ldi	r24, 0x1F	; 31
    38aa:	e8 2e       	mov	r14, r24
    38ac:	f1 2c       	mov	r15, r1
    /* check top layer first */
    for (int8_t i = 31; i >= 0; i--) {
        if (layers & (1UL<<i)) {
    38ae:	d5 01       	movw	r26, r10
    38b0:	c4 01       	movw	r24, r8
    38b2:	0e 2c       	mov	r0, r14
    38b4:	04 c0       	rjmp	.+8      	; 0x38be <layer_switch_get_action+0x90>
    38b6:	b6 95       	lsr	r27
    38b8:	a7 95       	ror	r26
    38ba:	97 95       	ror	r25
    38bc:	87 95       	ror	r24
    38be:	0a 94       	dec	r0
    38c0:	d2 f7       	brpl	.-12     	; 0x38b6 <layer_switch_get_action+0x88>
    38c2:	80 fd       	sbrc	r24, 0
    38c4:	06 c0       	rjmp	.+12     	; 0x38d2 <layer_switch_get_action+0xa4>
    38c6:	81 e0       	ldi	r24, 0x01	; 1
    38c8:	e8 1a       	sub	r14, r24
    38ca:	f1 08       	sbc	r15, r1
    38cc:	80 f7       	brcc	.-32     	; 0x38ae <layer_switch_get_action+0x80>
                return i;
            }
        }
    }
    /* fall back to layer 0 */
    return 0;
    38ce:	d1 2c       	mov	r13, r1
    38d0:	07 c0       	rjmp	.+14     	; 0x38e0 <layer_switch_get_action+0xb2>
    action_t action = ACTION_TRANSPARENT;
    uint32_t layers = layer_state | default_layer_state;
    /* check top layer first */
    for (int8_t i = 31; i >= 0; i--) {
        if (layers & (1UL<<i)) {
            action = action_for_key(i, key);
    38d2:	de 2c       	mov	r13, r14
    38d4:	b8 01       	movw	r22, r16
    38d6:	8e 2d       	mov	r24, r14
    38d8:	0e 94 78 1f 	call	0x3ef0	; 0x3ef0 <action_for_key>
            if (action.code != (action_t)ACTION_TRANSPARENT.code) {
    38dc:	01 97       	sbiw	r24, 0x01	; 1
    38de:	99 f3       	breq	.-26     	; 0x38c6 <layer_switch_get_action+0x98>

    uint8_t layer = 0;
#ifndef NO_TRACK_KEY_PRESS
    if (event.pressed) {
        layer = current_layer_for_key(event.key);
        layer_pressed[event.key.row][event.key.col] = layer;
    38e0:	87 e0       	ldi	r24, 0x07	; 7
    38e2:	18 9f       	mul	r17, r24
    38e4:	f0 01       	movw	r30, r0
    38e6:	11 24       	eor	r1, r1
    38e8:	e9 54       	subi	r30, 0x49	; 73
    38ea:	fd 4f       	sbci	r31, 0xFD	; 253
    38ec:	e0 0f       	add	r30, r16
    38ee:	f1 1d       	adc	r31, r1
    38f0:	d0 82       	st	Z, r13
    38f2:	09 c0       	rjmp	.+18     	; 0x3906 <layer_switch_get_action+0xd8>
    } else {
        layer = layer_pressed[event.key.row][event.key.col];
    38f4:	87 e0       	ldi	r24, 0x07	; 7
    38f6:	18 9f       	mul	r17, r24
    38f8:	f0 01       	movw	r30, r0
    38fa:	11 24       	eor	r1, r1
    38fc:	e9 54       	subi	r30, 0x49	; 73
    38fe:	fd 4f       	sbci	r31, 0xFD	; 253
    3900:	e0 0f       	add	r30, r16
    3902:	f1 1d       	adc	r31, r1
    3904:	d0 80       	ld	r13, Z
    }
#else
    layer = current_layer_for_key(event.key);
#endif
    return action_for_key(layer, event.key);
    3906:	09 83       	std	Y+1, r16	; 0x01
    3908:	1a 83       	std	Y+2, r17	; 0x02
    390a:	69 81       	ldd	r22, Y+1	; 0x01
    390c:	7a 81       	ldd	r23, Y+2	; 0x02
    390e:	8d 2d       	mov	r24, r13
    3910:	0e 94 78 1f 	call	0x3ef0	; 0x3ef0 <action_for_key>
}
    3914:	0f 90       	pop	r0
    3916:	0f 90       	pop	r0
    3918:	0f 90       	pop	r0
    391a:	0f 90       	pop	r0
    391c:	0f 90       	pop	r0
    391e:	df 91       	pop	r29
    3920:	cf 91       	pop	r28
    3922:	1f 91       	pop	r17
    3924:	0f 91       	pop	r16
    3926:	ff 90       	pop	r15
    3928:	ef 90       	pop	r14
    392a:	df 90       	pop	r13
    392c:	bf 90       	pop	r11
    392e:	af 90       	pop	r10
    3930:	9f 90       	pop	r9
    3932:	8f 90       	pop	r8
    3934:	08 95       	ret

00003936 <add_key>:

/* weak modifier */
uint8_t get_weak_mods(void) { return weak_mods; }
void add_weak_mods(uint8_t mods) { weak_mods |= mods; }
void del_weak_mods(uint8_t mods) { weak_mods &= ~mods; }
void set_weak_mods(uint8_t mods) { weak_mods = mods; }
    3936:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <keyboard_protocol>
    393a:	99 23       	and	r25, r25
    393c:	79 f1       	breq	.+94     	; 0x399c <add_key+0x66>
    393e:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <keyboard_nkro>
    3942:	99 23       	and	r25, r25
    3944:	59 f1       	breq	.+86     	; 0x399c <add_key+0x66>
    3946:	98 2f       	mov	r25, r24
    3948:	96 95       	lsr	r25
    394a:	96 95       	lsr	r25
    394c:	96 95       	lsr	r25
    394e:	9f 31       	cpi	r25, 0x1F	; 31
    3950:	a1 f0       	breq	.+40     	; 0x397a <add_key+0x44>
    3952:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <keyboard_report>
    3956:	f0 91 13 01 	lds	r31, 0x0113	; 0x800113 <keyboard_report+0x1>
    395a:	e9 0f       	add	r30, r25
    395c:	f1 1d       	adc	r31, r1
    395e:	87 70       	andi	r24, 0x07	; 7
    3960:	21 e0       	ldi	r18, 0x01	; 1
    3962:	30 e0       	ldi	r19, 0x00	; 0
    3964:	a9 01       	movw	r20, r18
    3966:	02 c0       	rjmp	.+4      	; 0x396c <add_key+0x36>
    3968:	44 0f       	add	r20, r20
    396a:	55 1f       	adc	r21, r21
    396c:	8a 95       	dec	r24
    396e:	e2 f7       	brpl	.-8      	; 0x3968 <add_key+0x32>
    3970:	ca 01       	movw	r24, r20
    3972:	91 81       	ldd	r25, Z+1	; 0x01
    3974:	89 2b       	or	r24, r25
    3976:	81 83       	std	Z+1, r24	; 0x01
    3978:	08 95       	ret
    397a:	90 91 0c 03 	lds	r25, 0x030C	; 0x80030c <debug_config>
    397e:	90 ff       	sbrs	r25, 0
    3980:	29 c0       	rjmp	.+82     	; 0x39d4 <add_key+0x9e>
    3982:	1f 92       	push	r1
    3984:	8f 93       	push	r24
    3986:	80 e8       	ldi	r24, 0x80	; 128
    3988:	94 e0       	ldi	r25, 0x04	; 4
    398a:	9f 93       	push	r25
    398c:	8f 93       	push	r24
    398e:	0e 94 12 07 	call	0xe24	; 0xe24 <__xprintf>
    3992:	0f 90       	pop	r0
    3994:	0f 90       	pop	r0
    3996:	0f 90       	pop	r0
    3998:	0f 90       	pop	r0
    399a:	08 95       	ret
    399c:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <keyboard_report>
    39a0:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <keyboard_report+0x1>
    39a4:	f9 01       	movw	r30, r18
    39a6:	32 96       	adiw	r30, 0x02	; 2
    39a8:	9f ef       	ldi	r25, 0xFF	; 255
    39aa:	40 e0       	ldi	r20, 0x00	; 0
    39ac:	51 91       	ld	r21, Z+
    39ae:	85 17       	cp	r24, r21
    39b0:	89 f0       	breq	.+34     	; 0x39d4 <add_key+0x9e>
    39b2:	9f 3f       	cpi	r25, 0xFF	; 255
    39b4:	19 f4       	brne	.+6      	; 0x39bc <add_key+0x86>
    39b6:	51 11       	cpse	r21, r1
    39b8:	01 c0       	rjmp	.+2      	; 0x39bc <add_key+0x86>
    39ba:	94 2f       	mov	r25, r20
    39bc:	4f 5f       	subi	r20, 0xFF	; 255
    39be:	4e 31       	cpi	r20, 0x1E	; 30
    39c0:	a9 f7       	brne	.-22     	; 0x39ac <add_key+0x76>
    39c2:	9f 3f       	cpi	r25, 0xFF	; 255
    39c4:	39 f0       	breq	.+14     	; 0x39d4 <add_key+0x9e>
    39c6:	f9 01       	movw	r30, r18
    39c8:	e9 0f       	add	r30, r25
    39ca:	f1 1d       	adc	r31, r1
    39cc:	97 fd       	sbrc	r25, 7
    39ce:	fa 95       	dec	r31
    39d0:	82 83       	std	Z+2, r24	; 0x02
    39d2:	08 95       	ret
    39d4:	08 95       	ret

000039d6 <del_key>:
    39d6:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <keyboard_protocol>
    39da:	99 23       	and	r25, r25
    39dc:	81 f1       	breq	.+96     	; 0x3a3e <del_key+0x68>
    39de:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <keyboard_nkro>
    39e2:	99 23       	and	r25, r25
    39e4:	61 f1       	breq	.+88     	; 0x3a3e <del_key+0x68>
    39e6:	98 2f       	mov	r25, r24
    39e8:	96 95       	lsr	r25
    39ea:	96 95       	lsr	r25
    39ec:	96 95       	lsr	r25
    39ee:	9f 31       	cpi	r25, 0x1F	; 31
    39f0:	a9 f0       	breq	.+42     	; 0x3a1c <del_key+0x46>
    39f2:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <keyboard_report>
    39f6:	f0 91 13 01 	lds	r31, 0x0113	; 0x800113 <keyboard_report+0x1>
    39fa:	e9 0f       	add	r30, r25
    39fc:	f1 1d       	adc	r31, r1
    39fe:	87 70       	andi	r24, 0x07	; 7
    3a00:	21 e0       	ldi	r18, 0x01	; 1
    3a02:	30 e0       	ldi	r19, 0x00	; 0
    3a04:	a9 01       	movw	r20, r18
    3a06:	02 c0       	rjmp	.+4      	; 0x3a0c <del_key+0x36>
    3a08:	44 0f       	add	r20, r20
    3a0a:	55 1f       	adc	r21, r21
    3a0c:	8a 95       	dec	r24
    3a0e:	e2 f7       	brpl	.-8      	; 0x3a08 <del_key+0x32>
    3a10:	ca 01       	movw	r24, r20
    3a12:	80 95       	com	r24
    3a14:	91 81       	ldd	r25, Z+1	; 0x01
    3a16:	89 23       	and	r24, r25
    3a18:	81 83       	std	Z+1, r24	; 0x01
    3a1a:	08 95       	ret
    3a1c:	90 91 0c 03 	lds	r25, 0x030C	; 0x80030c <debug_config>
    3a20:	90 ff       	sbrs	r25, 0
    3a22:	1c c0       	rjmp	.+56     	; 0x3a5c <del_key+0x86>
    3a24:	1f 92       	push	r1
    3a26:	8f 93       	push	r24
    3a28:	82 e6       	ldi	r24, 0x62	; 98
    3a2a:	94 e0       	ldi	r25, 0x04	; 4
    3a2c:	9f 93       	push	r25
    3a2e:	8f 93       	push	r24
    3a30:	0e 94 12 07 	call	0xe24	; 0xe24 <__xprintf>
    3a34:	0f 90       	pop	r0
    3a36:	0f 90       	pop	r0
    3a38:	0f 90       	pop	r0
    3a3a:	0f 90       	pop	r0
    3a3c:	08 95       	ret
    3a3e:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <keyboard_report>
    3a42:	f0 91 13 01 	lds	r31, 0x0113	; 0x800113 <keyboard_report+0x1>
    3a46:	9f 01       	movw	r18, r30
    3a48:	22 5e       	subi	r18, 0xE2	; 226
    3a4a:	3f 4f       	sbci	r19, 0xFF	; 255
    3a4c:	92 81       	ldd	r25, Z+2	; 0x02
    3a4e:	89 13       	cpse	r24, r25
    3a50:	01 c0       	rjmp	.+2      	; 0x3a54 <del_key+0x7e>
    3a52:	12 82       	std	Z+2, r1	; 0x02
    3a54:	31 96       	adiw	r30, 0x01	; 1
    3a56:	e2 17       	cp	r30, r18
    3a58:	f3 07       	cpc	r31, r19
    3a5a:	c1 f7       	brne	.-16     	; 0x3a4c <del_key+0x76>
    3a5c:	08 95       	ret

00003a5e <clear_keys>:
    3a5e:	81 e0       	ldi	r24, 0x01	; 1
    3a60:	90 e0       	ldi	r25, 0x00	; 0
    3a62:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <keyboard_report>
    3a66:	f0 91 13 01 	lds	r31, 0x0113	; 0x800113 <keyboard_report+0x1>
    3a6a:	e8 0f       	add	r30, r24
    3a6c:	f9 1f       	adc	r31, r25
    3a6e:	10 82       	st	Z, r1
    3a70:	01 96       	adiw	r24, 0x01	; 1
    3a72:	80 32       	cpi	r24, 0x20	; 32
    3a74:	91 05       	cpc	r25, r1
    3a76:	a9 f7       	brne	.-22     	; 0x3a62 <clear_keys+0x4>
    3a78:	08 95       	ret

00003a7a <get_mods>:
    3a7a:	80 91 0b 03 	lds	r24, 0x030B	; 0x80030b <real_mods>
    3a7e:	08 95       	ret

00003a80 <add_mods>:
    3a80:	90 91 0b 03 	lds	r25, 0x030B	; 0x80030b <real_mods>
    3a84:	89 2b       	or	r24, r25
    3a86:	80 93 0b 03 	sts	0x030B, r24	; 0x80030b <real_mods>
    3a8a:	08 95       	ret

00003a8c <del_mods>:
    3a8c:	80 95       	com	r24
    3a8e:	90 91 0b 03 	lds	r25, 0x030B	; 0x80030b <real_mods>
    3a92:	89 23       	and	r24, r25
    3a94:	80 93 0b 03 	sts	0x030B, r24	; 0x80030b <real_mods>
    3a98:	08 95       	ret

00003a9a <set_mods>:
    3a9a:	80 93 0b 03 	sts	0x030B, r24	; 0x80030b <real_mods>
    3a9e:	08 95       	ret

00003aa0 <clear_mods>:
    3aa0:	10 92 0b 03 	sts	0x030B, r1	; 0x80030b <real_mods>
    3aa4:	08 95       	ret

00003aa6 <add_weak_mods>:
    3aa6:	90 91 0a 03 	lds	r25, 0x030A	; 0x80030a <weak_mods>
    3aaa:	89 2b       	or	r24, r25
    3aac:	80 93 0a 03 	sts	0x030A, r24	; 0x80030a <weak_mods>
    3ab0:	08 95       	ret

00003ab2 <del_weak_mods>:
    3ab2:	80 95       	com	r24
    3ab4:	90 91 0a 03 	lds	r25, 0x030A	; 0x80030a <weak_mods>
    3ab8:	89 23       	and	r24, r25
    3aba:	80 93 0a 03 	sts	0x030A, r24	; 0x80030a <weak_mods>
    3abe:	08 95       	ret

00003ac0 <clear_weak_mods>:
void clear_weak_mods(void) { weak_mods = 0; }
    3ac0:	10 92 0a 03 	sts	0x030A, r1	; 0x80030a <weak_mods>
    3ac4:	08 95       	ret

00003ac6 <set_oneshot_mods>:

/* Oneshot modifier */
#ifndef NO_ACTION_ONESHOT
void set_oneshot_mods(uint8_t mods)
{
    oneshot_mods = mods;
    3ac6:	80 93 e9 02 	sts	0x02E9, r24	; 0x8002e9 <oneshot_mods>
    3aca:	08 95       	ret

00003acc <clear_oneshot_mods>:
    oneshot_time = timer_read();
#endif
}
void clear_oneshot_mods(void)
{
    oneshot_mods = 0;
    3acc:	10 92 e9 02 	sts	0x02E9, r1	; 0x8002e9 <oneshot_mods>
    3ad0:	08 95       	ret

00003ad2 <has_anykey>:
 */
uint8_t has_anykey(void)
{
    uint8_t cnt = 0;
    for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
        if (keyboard_report->raw[i])
    3ad2:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <keyboard_report>
    3ad6:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <keyboard_report+0x1>
    3ada:	fc 01       	movw	r30, r24
    3adc:	31 96       	adiw	r30, 0x01	; 1
    3ade:	9c 01       	movw	r18, r24
    3ae0:	20 5e       	subi	r18, 0xE0	; 224
    3ae2:	3f 4f       	sbci	r19, 0xFF	; 255
/*
 * inspect keyboard state
 */
uint8_t has_anykey(void)
{
    uint8_t cnt = 0;
    3ae4:	80 e0       	ldi	r24, 0x00	; 0
    for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
        if (keyboard_report->raw[i])
    3ae6:	91 91       	ld	r25, Z+
    3ae8:	91 11       	cpse	r25, r1
            cnt++;
    3aea:	8f 5f       	subi	r24, 0xFF	; 255
 * inspect keyboard state
 */
uint8_t has_anykey(void)
{
    uint8_t cnt = 0;
    for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
    3aec:	e2 17       	cp	r30, r18
    3aee:	f3 07       	cpc	r31, r19
    3af0:	d1 f7       	brne	.-12     	; 0x3ae6 <has_anykey+0x14>
        if (keyboard_report->raw[i])
            cnt++;
    }
    return cnt;
}
    3af2:	08 95       	ret

00003af4 <send_keyboard_report>:
#endif
#endif


void send_keyboard_report(void) {
    keyboard_report->mods  = real_mods;
    3af4:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <keyboard_report>
    3af8:	f0 91 13 01 	lds	r31, 0x0113	; 0x800113 <keyboard_report+0x1>
    3afc:	80 91 0b 03 	lds	r24, 0x030B	; 0x80030b <real_mods>
    3b00:	80 83       	st	Z, r24
    keyboard_report->mods |= weak_mods;
    3b02:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <keyboard_report>
    3b06:	f0 91 13 01 	lds	r31, 0x0113	; 0x800113 <keyboard_report+0x1>
    3b0a:	90 81       	ld	r25, Z
    3b0c:	80 91 0a 03 	lds	r24, 0x030A	; 0x80030a <weak_mods>
    3b10:	89 2b       	or	r24, r25
    3b12:	80 83       	st	Z, r24
#ifndef NO_ACTION_ONESHOT
    if (oneshot_mods) {
    3b14:	80 91 e9 02 	lds	r24, 0x02E9	; 0x8002e9 <oneshot_mods>
    3b18:	88 23       	and	r24, r24
    3b1a:	61 f0       	breq	.+24     	; 0x3b34 <send_keyboard_report+0x40>
        if (TIMER_DIFF_16(timer_read(), oneshot_time) >= ONESHOT_TIMEOUT) {
            dprintf("Oneshot: timeout\n");
            clear_oneshot_mods();
        }
#endif
        keyboard_report->mods |= oneshot_mods;
    3b1c:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <keyboard_report>
    3b20:	f0 91 13 01 	lds	r31, 0x0113	; 0x800113 <keyboard_report+0x1>
    3b24:	90 81       	ld	r25, Z
    3b26:	89 2b       	or	r24, r25
    3b28:	80 83       	st	Z, r24
        if (has_anykey()) {
    3b2a:	0e 94 69 1d 	call	0x3ad2	; 0x3ad2 <has_anykey>
    3b2e:	81 11       	cpse	r24, r1
    oneshot_time = timer_read();
#endif
}
void clear_oneshot_mods(void)
{
    oneshot_mods = 0;
    3b30:	10 92 e9 02 	sts	0x02E9, r1	; 0x8002e9 <oneshot_mods>
        if (has_anykey()) {
            clear_oneshot_mods();
        }
    }
#endif
    host_keyboard_send(keyboard_report);
    3b34:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <keyboard_report>
    3b38:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <keyboard_report+0x1>
    3b3c:	0c 94 5b 10 	jmp	0x20b6	; 0x20b6 <host_keyboard_send>

00003b40 <print_set_sendchar>:
#define sendchar(c)    xputc(c)


void print_set_sendchar(int8_t (*sendchar_func)(uint8_t))
{
    xdev_out(sendchar_func);
    3b40:	90 93 3f 01 	sts	0x013F, r25	; 0x80013f <__data_end+0x1>
    3b44:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <__data_end>
    3b48:	08 95       	ret

00003b4a <bitrev>:



uint8_t bitrev(uint8_t bits)
{
    bits = (bits & 0x0f)<<4 | (bits & 0xf0)>>4;
    3b4a:	82 95       	swap	r24
    bits = (bits & 0b00110011)<<2 | (bits & 0b11001100)>>2;
    3b4c:	98 2f       	mov	r25, r24
    3b4e:	93 73       	andi	r25, 0x33	; 51
    3b50:	44 e0       	ldi	r20, 0x04	; 4
    3b52:	94 9f       	mul	r25, r20
    3b54:	90 01       	movw	r18, r0
    3b56:	11 24       	eor	r1, r1
    3b58:	8c 7c       	andi	r24, 0xCC	; 204
    3b5a:	86 95       	lsr	r24
    3b5c:	86 95       	lsr	r24
    3b5e:	28 2b       	or	r18, r24
    bits = (bits & 0b01010101)<<1 | (bits & 0b10101010)>>1;
    3b60:	82 2f       	mov	r24, r18
    3b62:	85 75       	andi	r24, 0x55	; 85
    3b64:	88 0f       	add	r24, r24
    3b66:	2a 7a       	andi	r18, 0xAA	; 170
    3b68:	26 95       	lsr	r18
    return bits;
}
    3b6a:	82 2b       	or	r24, r18
    3b6c:	08 95       	ret

00003b6e <hook_keyboard_loop>:
    3b6e:	08 95       	ret

00003b70 <hook_matrix_change>:

__attribute__((weak))
void hook_keyboard_loop(void) {}

__attribute__((weak))
void hook_matrix_change(keyevent_t event) {
    3b70:	cf 93       	push	r28
    3b72:	df 93       	push	r29
    3b74:	00 d0       	rcall	.+0      	; 0x3b76 <hook_matrix_change+0x6>
    3b76:	00 d0       	rcall	.+0      	; 0x3b78 <hook_matrix_change+0x8>
    3b78:	1f 92       	push	r1
    3b7a:	cd b7       	in	r28, 0x3d	; 61
    3b7c:	de b7       	in	r29, 0x3e	; 62
    (void)event;
}
    3b7e:	0f 90       	pop	r0
    3b80:	0f 90       	pop	r0
    3b82:	0f 90       	pop	r0
    3b84:	0f 90       	pop	r0
    3b86:	0f 90       	pop	r0
    3b88:	df 91       	pop	r29
    3b8a:	cf 91       	pop	r28
    3b8c:	08 95       	ret

00003b8e <hook_default_layer_change>:
    3b8e:	08 95       	ret

00003b90 <hook_layer_change>:
void hook_default_layer_change(uint32_t default_layer_state) {
    (void)default_layer_state;
}

__attribute__((weak))
void hook_layer_change(uint32_t layer_state) {
    3b90:	08 95       	ret

00003b92 <hook_keyboard_leds_change>:
    (void)layer_state;
}

__attribute__((weak))
void hook_keyboard_leds_change(uint8_t led_status) {
    keyboard_set_leds(led_status);
    3b92:	0c 94 b4 11 	jmp	0x2368	; 0x2368 <keyboard_set_leds>

00003b96 <hook_bootmagic>:
}

__attribute__((weak))
void hook_bootmagic(void) {}
    3b96:	08 95       	ret

00003b98 <suspend_power_down>:
 */
static uint8_t wdt_timeout = 0;
static void power_down(uint8_t wdto)
{
#ifdef PROTOCOL_LUFA
    if (USB_DeviceState == DEVICE_STATE_Configured) return;
    3b98:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <USB_DeviceState>
    3b9c:	84 30       	cpi	r24, 0x04	; 4
    3b9e:	21 f1       	breq	.+72     	; 0x3be8 <suspend_power_down+0x50>
#endif
    wdt_timeout = wdto;
    3ba0:	10 92 0d 03 	sts	0x030D, r1	; 0x80030d <wdt_timeout>

    // Watchdog Interrupt Mode
    wdt_intr_enable(wdto);
    3ba4:	20 e4       	ldi	r18, 0x40	; 64
    3ba6:	88 e1       	ldi	r24, 0x18	; 24
    3ba8:	90 e0       	ldi	r25, 0x00	; 0
    3baa:	0f b6       	in	r0, 0x3f	; 63
    3bac:	f8 94       	cli
    3bae:	a8 95       	wdr
    3bb0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
    3bb4:	0f be       	out	0x3f, r0	; 63
    3bb6:	20 93 60 00 	sts	0x0060, r18	; 0x800060 <__DATA_REGION_ORIGIN__>
    // See PicoPower application note
    // - I/O port input with pullup
    // - prescale clock
    // - BOD disable
    // - Power Reduction Register PRR
    set_sleep_mode(SLEEP_MODE_PWR_DOWN);
    3bba:	83 b7       	in	r24, 0x33	; 51
    3bbc:	81 7f       	andi	r24, 0xF1	; 241
    3bbe:	84 60       	ori	r24, 0x04	; 4
    3bc0:	83 bf       	out	0x33, r24	; 51
    sleep_enable();
    3bc2:	83 b7       	in	r24, 0x33	; 51
    3bc4:	81 60       	ori	r24, 0x01	; 1
    3bc6:	83 bf       	out	0x33, r24	; 51
    sei();
    3bc8:	78 94       	sei
    sleep_cpu();
    3bca:	88 95       	sleep
    sleep_disable();
    3bcc:	83 b7       	in	r24, 0x33	; 51
    3bce:	8e 7f       	andi	r24, 0xFE	; 254
    3bd0:	83 bf       	out	0x33, r24	; 51
    3bd2:	0f b6       	in	r0, 0x3f	; 63
    3bd4:	f8 94       	cli
    3bd6:	a8 95       	wdr
    3bd8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    3bdc:	88 61       	ori	r24, 0x18	; 24
    3bde:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
    3be2:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
    3be6:	0f be       	out	0x3f, r0	; 63
    3be8:	08 95       	ret

00003bea <suspend_wakeup_condition>:
    power_down(WDTO_15MS);
#endif
}

bool suspend_wakeup_condition(void)
{
    3bea:	cf 93       	push	r28
    matrix_power_up();
    3bec:	0e 94 ec 11 	call	0x23d8	; 0x23d8 <matrix_power_up>
    matrix_scan();
    3bf0:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <matrix_scan>
    matrix_power_down();
    3bf4:	0e 94 ed 11 	call	0x23da	; 0x23da <matrix_power_down>
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    3bf8:	c0 e0       	ldi	r28, 0x00	; 0
        if (matrix_get_row(r)) return true;
    3bfa:	8c 2f       	mov	r24, r28
    3bfc:	0e 94 18 08 	call	0x1030	; 0x1030 <matrix_get_row>
    3c00:	81 11       	cpse	r24, r1
    3c02:	04 c0       	rjmp	.+8      	; 0x3c0c <suspend_wakeup_condition+0x22>
bool suspend_wakeup_condition(void)
{
    matrix_power_up();
    matrix_scan();
    matrix_power_down();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    3c04:	cf 5f       	subi	r28, 0xFF	; 255
    3c06:	c6 30       	cpi	r28, 0x06	; 6
    3c08:	c1 f7       	brne	.-16     	; 0x3bfa <suspend_wakeup_condition+0x10>
    3c0a:	01 c0       	rjmp	.+2      	; 0x3c0e <suspend_wakeup_condition+0x24>
        if (matrix_get_row(r)) return true;
    3c0c:	81 e0       	ldi	r24, 0x01	; 1
    }
    return false;
}
    3c0e:	cf 91       	pop	r28
    3c10:	08 95       	ret

00003c12 <suspend_wakeup_init>:

// run immediately after wakeup
void suspend_wakeup_init(void)
{
    // clear keyboard state
    matrix_clear();
    3c12:	0e 94 b6 11 	call	0x236c	; 0x236c <matrix_clear>
    clear_keyboard();
    3c16:	0c 94 a8 16 	jmp	0x2d50	; 0x2d50 <clear_keyboard>

00003c1a <__vector_12>:
}

#ifndef NO_SUSPEND_POWER_DOWN
/* watchdog timeout */
ISR(WDT_vect)
{
    3c1a:	1f 92       	push	r1
    3c1c:	0f 92       	push	r0
    3c1e:	0f b6       	in	r0, 0x3f	; 63
    3c20:	0f 92       	push	r0
    3c22:	11 24       	eor	r1, r1
    3c24:	8f 93       	push	r24
    3c26:	9f 93       	push	r25
    3c28:	af 93       	push	r26
    3c2a:	bf 93       	push	r27
    // compensate timer for sleep
    switch (wdt_timeout) {
    3c2c:	80 91 0d 03 	lds	r24, 0x030D	; 0x80030d <wdt_timeout>
    3c30:	81 11       	cpse	r24, r1
    3c32:	13 c0       	rjmp	.+38     	; 0x3c5a <__vector_12+0x40>
        case WDTO_15MS:
            timer_count += 15 + 2;  // WDTO_15MS + 2(from observation)
    3c34:	80 91 0e 03 	lds	r24, 0x030E	; 0x80030e <timer_count>
    3c38:	90 91 0f 03 	lds	r25, 0x030F	; 0x80030f <timer_count+0x1>
    3c3c:	a0 91 10 03 	lds	r26, 0x0310	; 0x800310 <timer_count+0x2>
    3c40:	b0 91 11 03 	lds	r27, 0x0311	; 0x800311 <timer_count+0x3>
    3c44:	41 96       	adiw	r24, 0x11	; 17
    3c46:	a1 1d       	adc	r26, r1
    3c48:	b1 1d       	adc	r27, r1
    3c4a:	80 93 0e 03 	sts	0x030E, r24	; 0x80030e <timer_count>
    3c4e:	90 93 0f 03 	sts	0x030F, r25	; 0x80030f <timer_count+0x1>
    3c52:	a0 93 10 03 	sts	0x0310, r26	; 0x800310 <timer_count+0x2>
    3c56:	b0 93 11 03 	sts	0x0311, r27	; 0x800311 <timer_count+0x3>
            break;
        default:
            ;
    }
}
    3c5a:	bf 91       	pop	r27
    3c5c:	af 91       	pop	r26
    3c5e:	9f 91       	pop	r25
    3c60:	8f 91       	pop	r24
    3c62:	0f 90       	pop	r0
    3c64:	0f be       	out	0x3f, r0	; 63
    3c66:	0f 90       	pop	r0
    3c68:	1f 90       	pop	r1
    3c6a:	18 95       	reti

00003c6c <timer_init>:
    cli();
    t = timer_count;
    SREG = sreg;

    return TIMER_DIFF_32(t, last);
}
    3c6c:	82 e0       	ldi	r24, 0x02	; 2
    3c6e:	84 bd       	out	0x24, r24	; 36
    3c70:	93 e0       	ldi	r25, 0x03	; 3
    3c72:	95 bd       	out	0x25, r25	; 37
    3c74:	9a ef       	ldi	r25, 0xFA	; 250
    3c76:	97 bd       	out	0x27, r25	; 39
    3c78:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
    3c7c:	08 95       	ret

00003c7e <timer_read>:
    3c7e:	2f b7       	in	r18, 0x3f	; 63
    3c80:	f8 94       	cli
    3c82:	80 91 0e 03 	lds	r24, 0x030E	; 0x80030e <timer_count>
    3c86:	90 91 0f 03 	lds	r25, 0x030F	; 0x80030f <timer_count+0x1>
    3c8a:	a0 91 10 03 	lds	r26, 0x0310	; 0x800310 <timer_count+0x2>
    3c8e:	b0 91 11 03 	lds	r27, 0x0311	; 0x800311 <timer_count+0x3>
    3c92:	2f bf       	out	0x3f, r18	; 63
    3c94:	08 95       	ret

00003c96 <timer_read32>:
    3c96:	2f b7       	in	r18, 0x3f	; 63
    3c98:	f8 94       	cli
    3c9a:	60 91 0e 03 	lds	r22, 0x030E	; 0x80030e <timer_count>
    3c9e:	70 91 0f 03 	lds	r23, 0x030F	; 0x80030f <timer_count+0x1>
    3ca2:	80 91 10 03 	lds	r24, 0x0310	; 0x800310 <timer_count+0x2>
    3ca6:	90 91 11 03 	lds	r25, 0x0311	; 0x800311 <timer_count+0x3>
    3caa:	2f bf       	out	0x3f, r18	; 63
    3cac:	08 95       	ret

00003cae <timer_elapsed>:
    3cae:	cf 92       	push	r12
    3cb0:	df 92       	push	r13
    3cb2:	ef 92       	push	r14
    3cb4:	ff 92       	push	r15
    3cb6:	0f 93       	push	r16
    3cb8:	1f 93       	push	r17
    3cba:	2f b7       	in	r18, 0x3f	; 63
    3cbc:	f8 94       	cli
    3cbe:	40 91 0e 03 	lds	r20, 0x030E	; 0x80030e <timer_count>
    3cc2:	50 91 0f 03 	lds	r21, 0x030F	; 0x80030f <timer_count+0x1>
    3cc6:	60 91 10 03 	lds	r22, 0x0310	; 0x800310 <timer_count+0x2>
    3cca:	70 91 11 03 	lds	r23, 0x0311	; 0x800311 <timer_count+0x3>
    3cce:	2f bf       	out	0x3f, r18	; 63
    3cd0:	6a 01       	movw	r12, r20
    3cd2:	7b 01       	movw	r14, r22
    3cd4:	ee 24       	eor	r14, r14
    3cd6:	ff 24       	eor	r15, r15
    3cd8:	8c 01       	movw	r16, r24
    3cda:	20 e0       	ldi	r18, 0x00	; 0
    3cdc:	30 e0       	ldi	r19, 0x00	; 0
    3cde:	c0 16       	cp	r12, r16
    3ce0:	d1 06       	cpc	r13, r17
    3ce2:	e2 06       	cpc	r14, r18
    3ce4:	f3 06       	cpc	r15, r19
    3ce6:	10 f4       	brcc	.+4      	; 0x3cec <timer_elapsed+0x3e>
    3ce8:	41 50       	subi	r20, 0x01	; 1
    3cea:	51 09       	sbc	r21, r1
    3cec:	9a 01       	movw	r18, r20
    3cee:	28 1b       	sub	r18, r24
    3cf0:	39 0b       	sbc	r19, r25
    3cf2:	c9 01       	movw	r24, r18
    3cf4:	1f 91       	pop	r17
    3cf6:	0f 91       	pop	r16
    3cf8:	ff 90       	pop	r15
    3cfa:	ef 90       	pop	r14
    3cfc:	df 90       	pop	r13
    3cfe:	cf 90       	pop	r12
    3d00:	08 95       	ret

00003d02 <__vector_21>:

// excecuted once per 1ms.(excess for just timer count?)
ISR(TIMER0_COMPA_vect)
{
    3d02:	1f 92       	push	r1
    3d04:	0f 92       	push	r0
    3d06:	0f b6       	in	r0, 0x3f	; 63
    3d08:	0f 92       	push	r0
    3d0a:	11 24       	eor	r1, r1
    3d0c:	8f 93       	push	r24
    3d0e:	9f 93       	push	r25
    3d10:	af 93       	push	r26
    3d12:	bf 93       	push	r27
    timer_count++;
    3d14:	80 91 0e 03 	lds	r24, 0x030E	; 0x80030e <timer_count>
    3d18:	90 91 0f 03 	lds	r25, 0x030F	; 0x80030f <timer_count+0x1>
    3d1c:	a0 91 10 03 	lds	r26, 0x0310	; 0x800310 <timer_count+0x2>
    3d20:	b0 91 11 03 	lds	r27, 0x0311	; 0x800311 <timer_count+0x3>
    3d24:	01 96       	adiw	r24, 0x01	; 1
    3d26:	a1 1d       	adc	r26, r1
    3d28:	b1 1d       	adc	r27, r1
    3d2a:	80 93 0e 03 	sts	0x030E, r24	; 0x80030e <timer_count>
    3d2e:	90 93 0f 03 	sts	0x030F, r25	; 0x80030f <timer_count+0x1>
    3d32:	a0 93 10 03 	sts	0x0310, r26	; 0x800310 <timer_count+0x2>
    3d36:	b0 93 11 03 	sts	0x0311, r27	; 0x800311 <timer_count+0x3>
}
    3d3a:	bf 91       	pop	r27
    3d3c:	af 91       	pop	r26
    3d3e:	9f 91       	pop	r25
    3d40:	8f 91       	pop	r24
    3d42:	0f 90       	pop	r0
    3d44:	0f be       	out	0x3f, r0	; 63
    3d46:	0f 90       	pop	r0
    3d48:	1f 90       	pop	r1
    3d4a:	18 95       	reti

00003d4c <bootloader_jump>:
uint32_t reset_key  __attribute__ ((section (".noinit")));

/* initialize MCU status by watchdog reset */
void bootloader_jump(void) {
#ifdef PROTOCOL_LUFA
    USB_Disable();
    3d4c:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <USB_Disable>
    cli();
    3d50:	f8 94       	cli
    3d52:	2f ef       	ldi	r18, 0xFF	; 255
    3d54:	87 ea       	ldi	r24, 0xA7	; 167
    3d56:	91 e6       	ldi	r25, 0x61	; 97
    3d58:	21 50       	subi	r18, 0x01	; 1
    3d5a:	80 40       	sbci	r24, 0x00	; 0
    3d5c:	90 40       	sbci	r25, 0x00	; 0
    3d5e:	e1 f7       	brne	.-8      	; 0x3d58 <bootloader_jump+0xc>
    3d60:	00 c0       	rjmp	.+0      	; 0x3d62 <bootloader_jump+0x16>
    3d62:	00 00       	nop
    UCSR1B = 0;
    _delay_ms(5);
#endif

    // watchdog reset
    reset_key = BOOTLOADER_RESET_KEY;
    3d64:	87 e0       	ldi	r24, 0x07	; 7
    3d66:	90 eb       	ldi	r25, 0xB0	; 176
    3d68:	dc 01       	movw	r26, r24
    3d6a:	80 93 2b 03 	sts	0x032B, r24	; 0x80032b <__bss_end>
    3d6e:	90 93 2c 03 	sts	0x032C, r25	; 0x80032c <__bss_end+0x1>
    3d72:	a0 93 2d 03 	sts	0x032D, r26	; 0x80032d <__bss_end+0x2>
    3d76:	b0 93 2e 03 	sts	0x032E, r27	; 0x80032e <__bss_end+0x3>
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
    3d7a:	9c e0       	ldi	r25, 0x0C	; 12
    3d7c:	88 e1       	ldi	r24, 0x18	; 24
    3d7e:	0f b6       	in	r0, 0x3f	; 63
    3d80:	f8 94       	cli
    3d82:	a8 95       	wdr
    3d84:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
    3d88:	0f be       	out	0x3f, r0	; 63
    3d8a:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__DATA_REGION_ORIGIN__>
    3d8e:	ff cf       	rjmp	.-2      	; 0x3d8e <bootloader_jump+0x42>

00003d90 <keycode_to_action>:
}

/* Function */
__attribute__ ((weak))
void action_function(keyrecord_t *record, uint8_t id, uint8_t opt)
{
    3d90:	8d 3b       	cpi	r24, 0xBD	; 189
    3d92:	60 f4       	brcc	.+24     	; 0x3dac <keycode_to_action+0x1c>
    3d94:	88 3a       	cpi	r24, 0xA8	; 168
    3d96:	90 f5       	brcc	.+100    	; 0x3dfc <keycode_to_action+0x6c>
    3d98:	85 3a       	cpi	r24, 0xA5	; 165
    3d9a:	28 f5       	brcc	.+74     	; 0x3de6 <keycode_to_action+0x56>
    3d9c:	84 30       	cpi	r24, 0x04	; 4
    3d9e:	08 f5       	brcc	.+66     	; 0x3de2 <keycode_to_action+0x52>
    3da0:	81 30       	cpi	r24, 0x01	; 1
    3da2:	09 f0       	breq	.+2      	; 0x3da6 <keycode_to_action+0x16>
    3da4:	86 c0       	rjmp	.+268    	; 0x3eb2 <keycode_to_action+0x122>
    3da6:	81 e0       	ldi	r24, 0x01	; 1
    3da8:	90 e0       	ldi	r25, 0x00	; 0
    3daa:	08 95       	ret
    3dac:	88 3e       	cpi	r24, 0xE8	; 232
    3dae:	98 f4       	brcc	.+38     	; 0x3dd6 <keycode_to_action+0x46>
    3db0:	80 3e       	cpi	r24, 0xE0	; 224
    3db2:	b8 f4       	brcc	.+46     	; 0x3de2 <keycode_to_action+0x52>
    3db4:	8f 3b       	cpi	r24, 0xBF	; 191
    3db6:	09 f0       	breq	.+2      	; 0x3dba <keycode_to_action+0x2a>
    3db8:	7c c0       	rjmp	.+248    	; 0x3eb2 <keycode_to_action+0x122>
    3dba:	0e 94 a8 16 	call	0x2d50	; 0x2d50 <clear_keyboard>
    3dbe:	2f ef       	ldi	r18, 0xFF	; 255
    3dc0:	80 e7       	ldi	r24, 0x70	; 112
    3dc2:	92 e0       	ldi	r25, 0x02	; 2
    3dc4:	21 50       	subi	r18, 0x01	; 1
    3dc6:	80 40       	sbci	r24, 0x00	; 0
    3dc8:	90 40       	sbci	r25, 0x00	; 0
    3dca:	e1 f7       	brne	.-8      	; 0x3dc4 <keycode_to_action+0x34>
    3dcc:	00 c0       	rjmp	.+0      	; 0x3dce <keycode_to_action+0x3e>
    3dce:	00 00       	nop
    3dd0:	0e 94 a6 1e 	call	0x3d4c	; 0x3d4c <bootloader_jump>
    3dd4:	6e c0       	rjmp	.+220    	; 0x3eb2 <keycode_to_action+0x122>
    3dd6:	80 3f       	cpi	r24, 0xF0	; 240
    3dd8:	08 f4       	brcc	.+2      	; 0x3ddc <keycode_to_action+0x4c>
    3dda:	6b c0       	rjmp	.+214    	; 0x3eb2 <keycode_to_action+0x122>
    3ddc:	90 e0       	ldi	r25, 0x00	; 0
    3dde:	90 65       	ori	r25, 0x50	; 80
    3de0:	08 95       	ret
    3de2:	90 e0       	ldi	r25, 0x00	; 0
    3de4:	08 95       	ret
    3de6:	85 3a       	cpi	r24, 0xA5	; 165
    3de8:	21 f0       	breq	.+8      	; 0x3df2 <keycode_to_action+0x62>
    3dea:	86 3a       	cpi	r24, 0xA6	; 166
    3dec:	21 f0       	breq	.+8      	; 0x3df6 <keycode_to_action+0x66>
    3dee:	33 e8       	ldi	r19, 0x83	; 131
    3df0:	03 c0       	rjmp	.+6      	; 0x3df8 <keycode_to_action+0x68>
    3df2:	31 e8       	ldi	r19, 0x81	; 129
    3df4:	01 c0       	rjmp	.+2      	; 0x3df8 <keycode_to_action+0x68>
    3df6:	32 e8       	ldi	r19, 0x82	; 130
    3df8:	20 e4       	ldi	r18, 0x40	; 64
    3dfa:	58 c0       	rjmp	.+176    	; 0x3eac <keycode_to_action+0x11c>
    3dfc:	88 3a       	cpi	r24, 0xA8	; 168
    3dfe:	51 f1       	breq	.+84     	; 0x3e54 <keycode_to_action+0xc4>
    3e00:	89 3a       	cpi	r24, 0xA9	; 169
    3e02:	59 f1       	breq	.+86     	; 0x3e5a <keycode_to_action+0xca>
    3e04:	8a 3a       	cpi	r24, 0xAA	; 170
    3e06:	59 f1       	breq	.+86     	; 0x3e5e <keycode_to_action+0xce>
    3e08:	8b 3a       	cpi	r24, 0xAB	; 171
    3e0a:	59 f1       	breq	.+86     	; 0x3e62 <keycode_to_action+0xd2>
    3e0c:	8c 3a       	cpi	r24, 0xAC	; 172
    3e0e:	59 f1       	breq	.+86     	; 0x3e66 <keycode_to_action+0xd6>
    3e10:	8d 3a       	cpi	r24, 0xAD	; 173
    3e12:	59 f1       	breq	.+86     	; 0x3e6a <keycode_to_action+0xda>
    3e14:	8e 3a       	cpi	r24, 0xAE	; 174
    3e16:	59 f1       	breq	.+86     	; 0x3e6e <keycode_to_action+0xde>
    3e18:	8f 3a       	cpi	r24, 0xAF	; 175
    3e1a:	59 f1       	breq	.+86     	; 0x3e72 <keycode_to_action+0xe2>
    3e1c:	81 3b       	cpi	r24, 0xB1	; 177
    3e1e:	59 f1       	breq	.+86     	; 0x3e76 <keycode_to_action+0xe6>
    3e20:	80 3b       	cpi	r24, 0xB0	; 176
    3e22:	59 f1       	breq	.+86     	; 0x3e7a <keycode_to_action+0xea>
    3e24:	82 3b       	cpi	r24, 0xB2	; 178
    3e26:	59 f1       	breq	.+86     	; 0x3e7e <keycode_to_action+0xee>
    3e28:	83 3b       	cpi	r24, 0xB3	; 179
    3e2a:	59 f1       	breq	.+86     	; 0x3e82 <keycode_to_action+0xf2>
    3e2c:	84 3b       	cpi	r24, 0xB4	; 180
    3e2e:	59 f1       	breq	.+86     	; 0x3e86 <keycode_to_action+0xf6>
    3e30:	85 3b       	cpi	r24, 0xB5	; 181
    3e32:	59 f1       	breq	.+86     	; 0x3e8a <keycode_to_action+0xfa>
    3e34:	86 3b       	cpi	r24, 0xB6	; 182
    3e36:	61 f1       	breq	.+88     	; 0x3e90 <keycode_to_action+0x100>
    3e38:	87 3b       	cpi	r24, 0xB7	; 183
    3e3a:	61 f1       	breq	.+88     	; 0x3e94 <keycode_to_action+0x104>
    3e3c:	88 3b       	cpi	r24, 0xB8	; 184
    3e3e:	61 f1       	breq	.+88     	; 0x3e98 <keycode_to_action+0x108>
    3e40:	89 3b       	cpi	r24, 0xB9	; 185
    3e42:	61 f1       	breq	.+88     	; 0x3e9c <keycode_to_action+0x10c>
    3e44:	8a 3b       	cpi	r24, 0xBA	; 186
    3e46:	61 f1       	breq	.+88     	; 0x3ea0 <keycode_to_action+0x110>
    3e48:	8b 3b       	cpi	r24, 0xBB	; 187
    3e4a:	61 f1       	breq	.+88     	; 0x3ea4 <keycode_to_action+0x114>
    3e4c:	8c 3b       	cpi	r24, 0xBC	; 188
    3e4e:	61 f1       	breq	.+88     	; 0x3ea8 <keycode_to_action+0x118>
    3e50:	30 e0       	ldi	r19, 0x00	; 0
    3e52:	01 c0       	rjmp	.+2      	; 0x3e56 <keycode_to_action+0xc6>
    3e54:	32 ee       	ldi	r19, 0xE2	; 226
    3e56:	24 e4       	ldi	r18, 0x44	; 68
    3e58:	29 c0       	rjmp	.+82     	; 0x3eac <keycode_to_action+0x11c>
    3e5a:	39 ee       	ldi	r19, 0xE9	; 233
    3e5c:	fc cf       	rjmp	.-8      	; 0x3e56 <keycode_to_action+0xc6>
    3e5e:	3a ee       	ldi	r19, 0xEA	; 234
    3e60:	fa cf       	rjmp	.-12     	; 0x3e56 <keycode_to_action+0xc6>
    3e62:	35 eb       	ldi	r19, 0xB5	; 181
    3e64:	f8 cf       	rjmp	.-16     	; 0x3e56 <keycode_to_action+0xc6>
    3e66:	36 eb       	ldi	r19, 0xB6	; 182
    3e68:	f6 cf       	rjmp	.-20     	; 0x3e56 <keycode_to_action+0xc6>
    3e6a:	33 eb       	ldi	r19, 0xB3	; 179
    3e6c:	f4 cf       	rjmp	.-24     	; 0x3e56 <keycode_to_action+0xc6>
    3e6e:	34 eb       	ldi	r19, 0xB4	; 180
    3e70:	f2 cf       	rjmp	.-28     	; 0x3e56 <keycode_to_action+0xc6>
    3e72:	37 eb       	ldi	r19, 0xB7	; 183
    3e74:	f0 cf       	rjmp	.-32     	; 0x3e56 <keycode_to_action+0xc6>
    3e76:	3c ec       	ldi	r19, 0xCC	; 204
    3e78:	ee cf       	rjmp	.-36     	; 0x3e56 <keycode_to_action+0xc6>
    3e7a:	3d ec       	ldi	r19, 0xCD	; 205
    3e7c:	ec cf       	rjmp	.-40     	; 0x3e56 <keycode_to_action+0xc6>
    3e7e:	33 e8       	ldi	r19, 0x83	; 131
    3e80:	05 c0       	rjmp	.+10     	; 0x3e8c <keycode_to_action+0xfc>
    3e82:	3a e8       	ldi	r19, 0x8A	; 138
    3e84:	03 c0       	rjmp	.+6      	; 0x3e8c <keycode_to_action+0xfc>
    3e86:	32 e9       	ldi	r19, 0x92	; 146
    3e88:	01 c0       	rjmp	.+2      	; 0x3e8c <keycode_to_action+0xfc>
    3e8a:	34 e9       	ldi	r19, 0x94	; 148
    3e8c:	25 e4       	ldi	r18, 0x45	; 69
    3e8e:	0e c0       	rjmp	.+28     	; 0x3eac <keycode_to_action+0x11c>
    3e90:	31 e2       	ldi	r19, 0x21	; 33
    3e92:	0b c0       	rjmp	.+22     	; 0x3eaa <keycode_to_action+0x11a>
    3e94:	33 e2       	ldi	r19, 0x23	; 35
    3e96:	09 c0       	rjmp	.+18     	; 0x3eaa <keycode_to_action+0x11a>
    3e98:	34 e2       	ldi	r19, 0x24	; 36
    3e9a:	07 c0       	rjmp	.+14     	; 0x3eaa <keycode_to_action+0x11a>
    3e9c:	35 e2       	ldi	r19, 0x25	; 37
    3e9e:	05 c0       	rjmp	.+10     	; 0x3eaa <keycode_to_action+0x11a>
    3ea0:	36 e2       	ldi	r19, 0x26	; 38
    3ea2:	03 c0       	rjmp	.+6      	; 0x3eaa <keycode_to_action+0x11a>
    3ea4:	37 e2       	ldi	r19, 0x27	; 39
    3ea6:	01 c0       	rjmp	.+2      	; 0x3eaa <keycode_to_action+0x11a>
    3ea8:	3a e2       	ldi	r19, 0x2A	; 42
    3eaa:	26 e4       	ldi	r18, 0x46	; 70
    3eac:	83 2f       	mov	r24, r19
    3eae:	92 2f       	mov	r25, r18
    3eb0:	08 95       	ret
    3eb2:	80 e0       	ldi	r24, 0x00	; 0
    3eb4:	90 e0       	ldi	r25, 0x00	; 0
    3eb6:	08 95       	ret

00003eb8 <action_get_macro>:
    3eb8:	80 e0       	ldi	r24, 0x00	; 0
    3eba:	90 e0       	ldi	r25, 0x00	; 0
    3ebc:	08 95       	ret

00003ebe <keymap_key_to_keycode>:

__attribute__ ((weak))
uint8_t keymap_key_to_keycode(uint8_t layer, keypos_t key)
{
#if defined(__AVR__)
    return pgm_read_byte(&keymaps[(layer)][(key.row)][(key.col)]);
    3ebe:	2a e2       	ldi	r18, 0x2A	; 42
    3ec0:	82 9f       	mul	r24, r18
    3ec2:	c0 01       	movw	r24, r0
    3ec4:	11 24       	eor	r1, r1
    3ec6:	fc 01       	movw	r30, r24
    3ec8:	27 e0       	ldi	r18, 0x07	; 7
    3eca:	72 9f       	mul	r23, r18
    3ecc:	e0 0d       	add	r30, r0
    3ece:	f1 1d       	adc	r31, r1
    3ed0:	11 24       	eor	r1, r1
    3ed2:	e6 0f       	add	r30, r22
    3ed4:	f1 1d       	adc	r31, r1
    3ed6:	ea 5e       	subi	r30, 0xEA	; 234
    3ed8:	fe 4f       	sbci	r31, 0xFE	; 254
    3eda:	84 91       	lpm	r24, Z
#else
    return keymaps[(layer)][(key.row)][(key.col)];
#endif
}
    3edc:	08 95       	ret

00003ede <keymap_fn_to_action>:

__attribute__ ((weak))
action_t keymap_fn_to_action(uint8_t keycode)
{
#if defined(__AVR__)
    return (action_t)pgm_read_word(&fn_actions[FN_INDEX(keycode)]);
    3ede:	e8 2f       	mov	r30, r24
    3ee0:	f0 e0       	ldi	r31, 0x00	; 0
    3ee2:	ee 0f       	add	r30, r30
    3ee4:	ff 1f       	adc	r31, r31
    3ee6:	e0 5a       	subi	r30, 0xA0	; 160
    3ee8:	f0 40       	sbci	r31, 0x00	; 0
    3eea:	85 91       	lpm	r24, Z+
    3eec:	94 91       	lpm	r25, Z
#else
    return fn_actions[FN_INDEX(keycode)];
#endif
}
    3eee:	08 95       	ret

00003ef0 <action_for_key>:

/* converts key to action */
__attribute__ ((weak))
action_t action_for_key(uint8_t layer, keypos_t key)
{
    uint8_t keycode = keymap_key_to_keycode(layer, key);
    3ef0:	0e 94 5f 1f 	call	0x3ebe	; 0x3ebe <keymap_key_to_keycode>
    switch (keycode) {
    3ef4:	80 3e       	cpi	r24, 0xE0	; 224
    3ef6:	a8 f4       	brcc	.+42     	; 0x3f22 <action_for_key+0x32>
    3ef8:	80 3c       	cpi	r24, 0xC0	; 192
    3efa:	00 f5       	brcc	.+64     	; 0x3f3c <action_for_key+0x4c>
    3efc:	81 33       	cpi	r24, 0x31	; 49
    3efe:	09 f4       	brne	.+2      	; 0x3f02 <action_for_key+0x12>
    3f00:	5c c0       	rjmp	.+184    	; 0x3fba <action_for_key+0xca>
    3f02:	38 f4       	brcc	.+14     	; 0x3f12 <action_for_key+0x22>
    3f04:	89 32       	cpi	r24, 0x29	; 41
    3f06:	09 f4       	brne	.+2      	; 0x3f0a <action_for_key+0x1a>
    3f08:	52 c0       	rjmp	.+164    	; 0x3fae <action_for_key+0xbe>
    3f0a:	8a 32       	cpi	r24, 0x2A	; 42
    3f0c:	09 f4       	brne	.+2      	; 0x3f10 <action_for_key+0x20>
    3f0e:	5b c0       	rjmp	.+182    	; 0x3fc6 <action_for_key+0xd6>
    3f10:	5f c0       	rjmp	.+190    	; 0x3fd0 <action_for_key+0xe0>
    3f12:	89 33       	cpi	r24, 0x39	; 57
    3f14:	b1 f0       	breq	.+44     	; 0x3f42 <action_for_key+0x52>
    3f16:	82 38       	cpi	r24, 0x82	; 130
    3f18:	a1 f0       	breq	.+40     	; 0x3f42 <action_for_key+0x52>
    3f1a:	85 33       	cpi	r24, 0x35	; 53
    3f1c:	09 f4       	brne	.+2      	; 0x3f20 <action_for_key+0x30>
    3f1e:	41 c0       	rjmp	.+130    	; 0x3fa2 <action_for_key+0xb2>
    3f20:	57 c0       	rjmp	.+174    	; 0x3fd0 <action_for_key+0xe0>
    3f22:	83 3e       	cpi	r24, 0xE3	; 227
    3f24:	41 f1       	breq	.+80     	; 0x3f76 <action_for_key+0x86>
    3f26:	28 f4       	brcc	.+10     	; 0x3f32 <action_for_key+0x42>
    3f28:	80 3e       	cpi	r24, 0xE0	; 224
    3f2a:	99 f0       	breq	.+38     	; 0x3f52 <action_for_key+0x62>
    3f2c:	82 3e       	cpi	r24, 0xE2	; 226
    3f2e:	b9 f0       	breq	.+46     	; 0x3f5e <action_for_key+0x6e>
    3f30:	4f c0       	rjmp	.+158    	; 0x3fd0 <action_for_key+0xe0>
    3f32:	86 3e       	cpi	r24, 0xE6	; 230
    3f34:	31 f1       	breq	.+76     	; 0x3f82 <action_for_key+0x92>
    3f36:	87 3e       	cpi	r24, 0xE7	; 231
    3f38:	71 f1       	breq	.+92     	; 0x3f96 <action_for_key+0xa6>
    3f3a:	4a c0       	rjmp	.+148    	; 0x3fd0 <action_for_key+0xe0>
        case KC_FN0 ... KC_FN31:
            return keymap_fn_to_action(keycode);
    3f3c:	0e 94 6f 1f 	call	0x3ede	; 0x3ede <keymap_fn_to_action>
    3f40:	08 95       	ret
#ifdef BOOTMAGIC_ENABLE
        case KC_CAPSLOCK:
        case KC_LOCKING_CAPS:
            if (keymap_config.swap_control_capslock || keymap_config.capslock_to_control) {
    3f42:	90 91 2a 03 	lds	r25, 0x032A	; 0x80032a <keymap_config>
    3f46:	90 fd       	sbrc	r25, 0
    3f48:	02 c0       	rjmp	.+4      	; 0x3f4e <action_for_key+0x5e>
    3f4a:	91 ff       	sbrs	r25, 1
    3f4c:	41 c0       	rjmp	.+130    	; 0x3fd0 <action_for_key+0xe0>
                return keycode_to_action(KC_LCTL);
    3f4e:	80 ee       	ldi	r24, 0xE0	; 224
    3f50:	3f c0       	rjmp	.+126    	; 0x3fd0 <action_for_key+0xe0>
            }
            return keycode_to_action(keycode);
        case KC_LCTL:
            if (keymap_config.swap_control_capslock) {
    3f52:	80 91 2a 03 	lds	r24, 0x032A	; 0x80032a <keymap_config>
    3f56:	80 ff       	sbrs	r24, 0
    3f58:	fa cf       	rjmp	.-12     	; 0x3f4e <action_for_key+0x5e>
                return keycode_to_action(KC_CAPSLOCK);
    3f5a:	89 e3       	ldi	r24, 0x39	; 57
    3f5c:	39 c0       	rjmp	.+114    	; 0x3fd0 <action_for_key+0xe0>
            }
            return keycode_to_action(KC_LCTL);
        case KC_LALT:
            if (keymap_config.swap_lalt_lgui) {
    3f5e:	80 91 2a 03 	lds	r24, 0x032A	; 0x80032a <keymap_config>
    3f62:	82 ff       	sbrs	r24, 2
    3f64:	0c c0       	rjmp	.+24     	; 0x3f7e <action_for_key+0x8e>
                if (keymap_config.no_gui) {
    3f66:	80 91 2a 03 	lds	r24, 0x032A	; 0x80032a <keymap_config>
    3f6a:	84 ff       	sbrs	r24, 4
    3f6c:	02 c0       	rjmp	.+4      	; 0x3f72 <action_for_key+0x82>
                    return keycode_to_action(KC_NO);
    3f6e:	80 e0       	ldi	r24, 0x00	; 0
    3f70:	2f c0       	rjmp	.+94     	; 0x3fd0 <action_for_key+0xe0>
                }
                return keycode_to_action(KC_LGUI);
    3f72:	83 ee       	ldi	r24, 0xE3	; 227
    3f74:	2d c0       	rjmp	.+90     	; 0x3fd0 <action_for_key+0xe0>
            }
            return keycode_to_action(KC_LALT);
        case KC_LGUI:
            if (keymap_config.swap_lalt_lgui) {
    3f76:	80 91 2a 03 	lds	r24, 0x032A	; 0x80032a <keymap_config>
    3f7a:	82 ff       	sbrs	r24, 2
    3f7c:	f4 cf       	rjmp	.-24     	; 0x3f66 <action_for_key+0x76>
                if (keymap_config.no_gui) {
                    return keycode_to_action(KC_NO);
                }
                return keycode_to_action(KC_LGUI);
            }
            return keycode_to_action(KC_LALT);
    3f7e:	82 ee       	ldi	r24, 0xE2	; 226
    3f80:	27 c0       	rjmp	.+78     	; 0x3fd0 <action_for_key+0xe0>
            if (keymap_config.no_gui) {
                return keycode_to_action(KC_NO);
            }
            return keycode_to_action(KC_LGUI);
        case KC_RALT:
            if (keymap_config.swap_ralt_rgui) {
    3f82:	80 91 2a 03 	lds	r24, 0x032A	; 0x80032a <keymap_config>
    3f86:	83 ff       	sbrs	r24, 3
    3f88:	0a c0       	rjmp	.+20     	; 0x3f9e <action_for_key+0xae>
                if (keymap_config.no_gui) {
    3f8a:	80 91 2a 03 	lds	r24, 0x032A	; 0x80032a <keymap_config>
    3f8e:	84 fd       	sbrc	r24, 4
    3f90:	ee cf       	rjmp	.-36     	; 0x3f6e <action_for_key+0x7e>
                    return keycode_to_action(KC_NO);
                }
                return keycode_to_action(KC_RGUI);
    3f92:	87 ee       	ldi	r24, 0xE7	; 231
    3f94:	1d c0       	rjmp	.+58     	; 0x3fd0 <action_for_key+0xe0>
            }
            return keycode_to_action(KC_RALT);
        case KC_RGUI:
            if (keymap_config.swap_ralt_rgui) {
    3f96:	80 91 2a 03 	lds	r24, 0x032A	; 0x80032a <keymap_config>
    3f9a:	83 ff       	sbrs	r24, 3
    3f9c:	f6 cf       	rjmp	.-20     	; 0x3f8a <action_for_key+0x9a>
                if (keymap_config.no_gui) {
                    return keycode_to_action(KC_NO);
                }
                return keycode_to_action(KC_RGUI);
            }
            return keycode_to_action(KC_RALT);
    3f9e:	86 ee       	ldi	r24, 0xE6	; 230
    3fa0:	17 c0       	rjmp	.+46     	; 0x3fd0 <action_for_key+0xe0>
            if (keymap_config.no_gui) {
                return keycode_to_action(KC_NO);
            }
            return keycode_to_action(KC_RGUI);
        case KC_GRAVE:
            if (keymap_config.swap_grave_esc) {
    3fa2:	80 91 2a 03 	lds	r24, 0x032A	; 0x80032a <keymap_config>
    3fa6:	85 ff       	sbrs	r24, 5
    3fa8:	06 c0       	rjmp	.+12     	; 0x3fb6 <action_for_key+0xc6>
                return keycode_to_action(KC_ESC);
    3faa:	89 e2       	ldi	r24, 0x29	; 41
    3fac:	11 c0       	rjmp	.+34     	; 0x3fd0 <action_for_key+0xe0>
            }
            return keycode_to_action(KC_GRAVE);
        case KC_ESC:
            if (keymap_config.swap_grave_esc) {
    3fae:	80 91 2a 03 	lds	r24, 0x032A	; 0x80032a <keymap_config>
    3fb2:	85 ff       	sbrs	r24, 5
    3fb4:	fa cf       	rjmp	.-12     	; 0x3faa <action_for_key+0xba>
            return keycode_to_action(KC_RGUI);
        case KC_GRAVE:
            if (keymap_config.swap_grave_esc) {
                return keycode_to_action(KC_ESC);
            }
            return keycode_to_action(KC_GRAVE);
    3fb6:	85 e3       	ldi	r24, 0x35	; 53
    3fb8:	0b c0       	rjmp	.+22     	; 0x3fd0 <action_for_key+0xe0>
            if (keymap_config.swap_grave_esc) {
                return keycode_to_action(KC_GRAVE);
            }
            return keycode_to_action(KC_ESC);
        case KC_BSLASH:
            if (keymap_config.swap_backslash_backspace) {
    3fba:	80 91 2a 03 	lds	r24, 0x032A	; 0x80032a <keymap_config>
    3fbe:	86 ff       	sbrs	r24, 6
    3fc0:	06 c0       	rjmp	.+12     	; 0x3fce <action_for_key+0xde>
                return keycode_to_action(KC_BSPACE);
    3fc2:	8a e2       	ldi	r24, 0x2A	; 42
    3fc4:	05 c0       	rjmp	.+10     	; 0x3fd0 <action_for_key+0xe0>
            }
            return keycode_to_action(KC_BSLASH);
        case KC_BSPACE:
            if (keymap_config.swap_backslash_backspace) {
    3fc6:	80 91 2a 03 	lds	r24, 0x032A	; 0x80032a <keymap_config>
    3fca:	86 ff       	sbrs	r24, 6
    3fcc:	fa cf       	rjmp	.-12     	; 0x3fc2 <action_for_key+0xd2>
            return keycode_to_action(KC_ESC);
        case KC_BSLASH:
            if (keymap_config.swap_backslash_backspace) {
                return keycode_to_action(KC_BSPACE);
            }
            return keycode_to_action(KC_BSLASH);
    3fce:	81 e3       	ldi	r24, 0x31	; 49
                return keycode_to_action(KC_BSLASH);
            }
            return keycode_to_action(KC_BSPACE);
#endif
        default:
            return keycode_to_action(keycode);
    3fd0:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <keycode_to_action>
    }
}
    3fd4:	08 95       	ret

00003fd6 <scan_key>:
        default_layer_set((uint32_t)default_layer);
    }
}

static bool scan_key(uint16_t code)
{
    3fd6:	cf 92       	push	r12
    3fd8:	df 92       	push	r13
    3fda:	ef 92       	push	r14
    3fdc:	ff 92       	push	r15
    3fde:	0f 93       	push	r16
    3fe0:	1f 93       	push	r17
    3fe2:	cf 93       	push	r28
    3fe4:	6c 01       	movw	r12, r24
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    3fe6:	c0 e0       	ldi	r28, 0x00	; 0
        matrix_row_t matrix_row = matrix_get_row(r);
    3fe8:	8c 2f       	mov	r24, r28
    3fea:	0e 94 18 08 	call	0x1030	; 0x1030 <matrix_get_row>
    3fee:	00 e0       	ldi	r16, 0x00	; 0
    3ff0:	10 e0       	ldi	r17, 0x00	; 0
        for (uint8_t c = 0; c < MATRIX_COLS; c++) {
            if (matrix_row & ((matrix_row_t)1<<c)) {
    3ff2:	e8 2e       	mov	r14, r24
    3ff4:	f1 2c       	mov	r15, r1
    3ff6:	c7 01       	movw	r24, r14
    3ff8:	00 2e       	mov	r0, r16
    3ffa:	02 c0       	rjmp	.+4      	; 0x4000 <scan_key+0x2a>
    3ffc:	95 95       	asr	r25
    3ffe:	87 95       	ror	r24
    4000:	0a 94       	dec	r0
    4002:	e2 f7       	brpl	.-8      	; 0x3ffc <scan_key+0x26>
    4004:	80 ff       	sbrs	r24, 0
    4006:	15 c0       	rjmp	.+42     	; 0x4032 <scan_key+0x5c>
                // read key from Layer 0
                action_t action = action_for_key(0, (keypos_t){ .row = r, .col = c });
    4008:	60 2f       	mov	r22, r16
    400a:	7c 2f       	mov	r23, r28
    400c:	80 e0       	ldi	r24, 0x00	; 0
    400e:	0e 94 78 1f 	call	0x3ef0	; 0x3ef0 <action_for_key>
                if (action.code == code ||
    4012:	8c 15       	cp	r24, r12
    4014:	9d 05       	cpc	r25, r13
    4016:	59 f0       	breq	.+22     	; 0x402e <scan_key+0x58>
    4018:	29 2f       	mov	r18, r25
    401a:	20 7e       	andi	r18, 0xE0	; 224
    401c:	39 2f       	mov	r19, r25
    401e:	30 7c       	andi	r19, 0xC0	; 192
    4020:	11 f0       	breq	.+4      	; 0x4026 <scan_key+0x50>
                    ((action.kind.id == ACT_LMODS ||
                      action.kind.id == ACT_RMODS ||
                      action.kind.id == ACT_LMODS_TAP ||
                      action.kind.id == ACT_RMODS_TAP ||
    4022:	20 3a       	cpi	r18, 0xA0	; 160
    4024:	31 f4       	brne	.+12     	; 0x4032 <scan_key+0x5c>
                      action.kind.id == ACT_LAYER_TAP ||
                      action.kind.id == ACT_LAYER_TAP_EXT) &&
    4026:	90 e0       	ldi	r25, 0x00	; 0
    4028:	c8 16       	cp	r12, r24
    402a:	d9 06       	cpc	r13, r25
    402c:	11 f4       	brne	.+4      	; 0x4032 <scan_key+0x5c>
                     action.key.code == code)) {
                    return true;
    402e:	81 e0       	ldi	r24, 0x01	; 1
    4030:	09 c0       	rjmp	.+18     	; 0x4044 <scan_key+0x6e>
    4032:	0f 5f       	subi	r16, 0xFF	; 255
    4034:	1f 4f       	sbci	r17, 0xFF	; 255

static bool scan_key(uint16_t code)
{
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
        matrix_row_t matrix_row = matrix_get_row(r);
        for (uint8_t c = 0; c < MATRIX_COLS; c++) {
    4036:	07 30       	cpi	r16, 0x07	; 7
    4038:	11 05       	cpc	r17, r1
    403a:	e9 f6       	brne	.-70     	; 0x3ff6 <scan_key+0x20>
    }
}

static bool scan_key(uint16_t code)
{
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    403c:	cf 5f       	subi	r28, 0xFF	; 255
    403e:	c6 30       	cpi	r28, 0x06	; 6
    4040:	99 f6       	brne	.-90     	; 0x3fe8 <scan_key+0x12>
                    return true;
                }
            }
        }
    }
    return false;
    4042:	80 e0       	ldi	r24, 0x00	; 0
}
    4044:	cf 91       	pop	r28
    4046:	1f 91       	pop	r17
    4048:	0f 91       	pop	r16
    404a:	ff 90       	pop	r15
    404c:	ef 90       	pop	r14
    404e:	df 90       	pop	r13
    4050:	cf 90       	pop	r12
    4052:	08 95       	ret

00004054 <bootmagic_scan_key>:

bool bootmagic_scan_key(uint16_t code)
{
    4054:	cf 93       	push	r28
    4056:	df 93       	push	r29
    4058:	ec 01       	movw	r28, r24
    if (!scan_key(BOOTMAGIC_KEY_SALT)) return false;
    405a:	8c e2       	ldi	r24, 0x2C	; 44
    405c:	90 e0       	ldi	r25, 0x00	; 0
    405e:	0e 94 eb 1f 	call	0x3fd6	; 0x3fd6 <scan_key>
    4062:	88 23       	and	r24, r24
    4064:	29 f0       	breq	.+10     	; 0x4070 <bootmagic_scan_key+0x1c>

    return scan_key(code);
    4066:	ce 01       	movw	r24, r28
}
    4068:	df 91       	pop	r29
    406a:	cf 91       	pop	r28

bool bootmagic_scan_key(uint16_t code)
{
    if (!scan_key(BOOTMAGIC_KEY_SALT)) return false;

    return scan_key(code);
    406c:	0c 94 eb 1f 	jmp	0x3fd6	; 0x3fd6 <scan_key>
}
    4070:	80 e0       	ldi	r24, 0x00	; 0
    4072:	df 91       	pop	r29
    4074:	cf 91       	pop	r28
    4076:	08 95       	ret

00004078 <bootmagic>:
#include "hook.h"

keymap_config_t keymap_config;

void bootmagic(void)
{
    4078:	cf 93       	push	r28
    /* check signature */
    if (!eeconfig_is_enabled()) {
    407a:	0e 94 a4 21 	call	0x4348	; 0x4348 <eeconfig_is_enabled>
    407e:	81 11       	cpse	r24, r1
    4080:	02 c0       	rjmp	.+4      	; 0x4086 <bootmagic+0xe>
        eeconfig_init();
    4082:	0e 94 8a 21 	call	0x4314	; 0x4314 <eeconfig_init>
    }

    /* do scans in case of bounce */
    print("bootmagic scan: ... ");
    4086:	85 ea       	ldi	r24, 0xA5	; 165
    4088:	94 e0       	ldi	r25, 0x04	; 4
    408a:	0e 94 79 06 	call	0xcf2	; 0xcf2 <xputs>
    uint8_t scan = 100;
    while (scan--) { matrix_scan(); wait_ms(10); }
    408e:	c5 e6       	ldi	r28, 0x65	; 101
    4090:	c1 50       	subi	r28, 0x01	; 1
    4092:	49 f0       	breq	.+18     	; 0x40a6 <bootmagic+0x2e>
    4094:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <matrix_scan>
    4098:	8f e3       	ldi	r24, 0x3F	; 63
    409a:	9c e9       	ldi	r25, 0x9C	; 156
    409c:	01 97       	sbiw	r24, 0x01	; 1
    409e:	f1 f7       	brne	.-4      	; 0x409c <bootmagic+0x24>
    40a0:	00 c0       	rjmp	.+0      	; 0x40a2 <bootmagic+0x2a>
    40a2:	00 00       	nop
    40a4:	f5 cf       	rjmp	.-22     	; 0x4090 <bootmagic+0x18>
    print("done.\n");
    40a6:	8e e9       	ldi	r24, 0x9E	; 158
    40a8:	94 e0       	ldi	r25, 0x04	; 4
    40aa:	0e 94 79 06 	call	0xcf2	; 0xcf2 <xputs>

    /* bootmagic skip */
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SKIP)) {
    40ae:	89 e2       	ldi	r24, 0x29	; 41
    40b0:	90 e0       	ldi	r25, 0x00	; 0
    40b2:	0e 94 2a 20 	call	0x4054	; 0x4054 <bootmagic_scan_key>
    40b6:	81 11       	cpse	r24, r1
    40b8:	2b c1       	rjmp	.+598    	; 0x4310 <bootmagic+0x298>
        return;
    }

    /* eeconfig clear */
    if (bootmagic_scan_key(BOOTMAGIC_KEY_EEPROM_CLEAR)) {
    40ba:	8a e2       	ldi	r24, 0x2A	; 42
    40bc:	90 e0       	ldi	r25, 0x00	; 0
    40be:	0e 94 2a 20 	call	0x4054	; 0x4054 <bootmagic_scan_key>
    40c2:	81 11       	cpse	r24, r1
        eeconfig_init();
    40c4:	0e 94 8a 21 	call	0x4314	; 0x4314 <eeconfig_init>
    }

    /* bootloader */
    if (bootmagic_scan_key(BOOTMAGIC_KEY_BOOTLOADER)) {
    40c8:	85 e0       	ldi	r24, 0x05	; 5
    40ca:	90 e0       	ldi	r25, 0x00	; 0
    40cc:	0e 94 2a 20 	call	0x4054	; 0x4054 <bootmagic_scan_key>
    40d0:	81 11       	cpse	r24, r1
        bootloader_jump();
    40d2:	0e 94 a6 1e 	call	0x3d4c	; 0x3d4c <bootloader_jump>
    }

    /* user-defined checks */
    hook_bootmagic();
    40d6:	0e 94 cb 1d 	call	0x3b96	; 0x3b96 <hook_bootmagic>

    /* debug enable */
    debug_config.raw = eeconfig_read_debug();
    40da:	0e 94 af 21 	call	0x435e	; 0x435e <eeconfig_read_debug>
    40de:	80 93 0c 03 	sts	0x030C, r24	; 0x80030c <debug_config>
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_ENABLE)) {
    40e2:	87 e0       	ldi	r24, 0x07	; 7
    40e4:	90 e0       	ldi	r25, 0x00	; 0
    40e6:	0e 94 2a 20 	call	0x4054	; 0x4054 <bootmagic_scan_key>
    40ea:	88 23       	and	r24, r24
    40ec:	c1 f1       	breq	.+112    	; 0x415e <bootmagic+0xe6>
        if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_MATRIX)) {
    40ee:	8b e1       	ldi	r24, 0x1B	; 27
    40f0:	90 e0       	ldi	r25, 0x00	; 0
    40f2:	0e 94 2a 20 	call	0x4054	; 0x4054 <bootmagic_scan_key>
    40f6:	88 23       	and	r24, r24
    40f8:	51 f0       	breq	.+20     	; 0x410e <bootmagic+0x96>
            debug_config.matrix = !debug_config.matrix;
    40fa:	80 91 0c 03 	lds	r24, 0x030C	; 0x80030c <debug_config>
    40fe:	81 fb       	bst	r24, 1
    4100:	22 27       	eor	r18, r18
    4102:	20 f9       	bld	r18, 0
    4104:	91 e0       	ldi	r25, 0x01	; 1
    4106:	92 27       	eor	r25, r18
    4108:	90 fb       	bst	r25, 0
    410a:	81 f9       	bld	r24, 1
    410c:	0f c0       	rjmp	.+30     	; 0x412c <bootmagic+0xb4>
        } else if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_KEYBOARD)) {
    410e:	8e e0       	ldi	r24, 0x0E	; 14
    4110:	90 e0       	ldi	r25, 0x00	; 0
    4112:	0e 94 2a 20 	call	0x4054	; 0x4054 <bootmagic_scan_key>
    4116:	88 23       	and	r24, r24
    4118:	61 f0       	breq	.+24     	; 0x4132 <bootmagic+0xba>
            debug_config.keyboard = !debug_config.keyboard;
    411a:	80 91 0c 03 	lds	r24, 0x030C	; 0x80030c <debug_config>
    411e:	82 fb       	bst	r24, 2
    4120:	22 27       	eor	r18, r18
    4122:	20 f9       	bld	r18, 0
    4124:	91 e0       	ldi	r25, 0x01	; 1
    4126:	92 27       	eor	r25, r18
    4128:	90 fb       	bst	r25, 0
    412a:	82 f9       	bld	r24, 2
    412c:	80 93 0c 03 	sts	0x030C, r24	; 0x80030c <debug_config>
    4130:	16 c0       	rjmp	.+44     	; 0x415e <bootmagic+0xe6>
        } else if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_MOUSE)) {
    4132:	80 e1       	ldi	r24, 0x10	; 16
    4134:	90 e0       	ldi	r25, 0x00	; 0
    4136:	0e 94 2a 20 	call	0x4054	; 0x4054 <bootmagic_scan_key>
    413a:	90 91 0c 03 	lds	r25, 0x030C	; 0x80030c <debug_config>
    413e:	88 23       	and	r24, r24
    4140:	41 f0       	breq	.+16     	; 0x4152 <bootmagic+0xda>
            debug_config.mouse = !debug_config.mouse;
    4142:	93 fb       	bst	r25, 3
    4144:	22 27       	eor	r18, r18
    4146:	20 f9       	bld	r18, 0
    4148:	81 e0       	ldi	r24, 0x01	; 1
    414a:	82 27       	eor	r24, r18
    414c:	80 fb       	bst	r24, 0
    414e:	93 f9       	bld	r25, 3
    4150:	04 c0       	rjmp	.+8      	; 0x415a <bootmagic+0xe2>
        } else {
            debug_config.enable = !debug_config.enable;
    4152:	89 2f       	mov	r24, r25
    4154:	80 95       	com	r24
    4156:	80 fb       	bst	r24, 0
    4158:	90 f9       	bld	r25, 0
    415a:	90 93 0c 03 	sts	0x030C, r25	; 0x80030c <debug_config>
        }
    }
    eeconfig_write_debug(debug_config.raw);
    415e:	80 91 0c 03 	lds	r24, 0x030C	; 0x80030c <debug_config>
    4162:	0e 94 b3 21 	call	0x4366	; 0x4366 <eeconfig_write_debug>

    /* keymap config */
    keymap_config.raw = eeconfig_read_keymap();
    4166:	0e 94 c1 21 	call	0x4382	; 0x4382 <eeconfig_read_keymap>
    416a:	80 93 2a 03 	sts	0x032A, r24	; 0x80032a <keymap_config>
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_CONTROL_CAPSLOCK)) {
    416e:	80 ee       	ldi	r24, 0xE0	; 224
    4170:	90 e0       	ldi	r25, 0x00	; 0
    4172:	0e 94 2a 20 	call	0x4054	; 0x4054 <bootmagic_scan_key>
    4176:	88 23       	and	r24, r24
    4178:	41 f0       	breq	.+16     	; 0x418a <bootmagic+0x112>
        keymap_config.swap_control_capslock = !keymap_config.swap_control_capslock;
    417a:	80 91 2a 03 	lds	r24, 0x032A	; 0x80032a <keymap_config>
    417e:	98 2f       	mov	r25, r24
    4180:	90 95       	com	r25
    4182:	90 fb       	bst	r25, 0
    4184:	80 f9       	bld	r24, 0
    4186:	80 93 2a 03 	sts	0x032A, r24	; 0x80032a <keymap_config>
    }
    if (bootmagic_scan_key(BOOTMAGIC_KEY_CAPSLOCK_TO_CONTROL)) {
    418a:	89 e3       	ldi	r24, 0x39	; 57
    418c:	90 e0       	ldi	r25, 0x00	; 0
    418e:	0e 94 2a 20 	call	0x4054	; 0x4054 <bootmagic_scan_key>
    4192:	88 23       	and	r24, r24
    4194:	59 f0       	breq	.+22     	; 0x41ac <bootmagic+0x134>
        keymap_config.capslock_to_control = !keymap_config.capslock_to_control;
    4196:	80 91 2a 03 	lds	r24, 0x032A	; 0x80032a <keymap_config>
    419a:	81 fb       	bst	r24, 1
    419c:	22 27       	eor	r18, r18
    419e:	20 f9       	bld	r18, 0
    41a0:	91 e0       	ldi	r25, 0x01	; 1
    41a2:	92 27       	eor	r25, r18
    41a4:	90 fb       	bst	r25, 0
    41a6:	81 f9       	bld	r24, 1
    41a8:	80 93 2a 03 	sts	0x032A, r24	; 0x80032a <keymap_config>
    }
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_LALT_LGUI)) {
    41ac:	82 ee       	ldi	r24, 0xE2	; 226
    41ae:	90 e0       	ldi	r25, 0x00	; 0
    41b0:	0e 94 2a 20 	call	0x4054	; 0x4054 <bootmagic_scan_key>
    41b4:	88 23       	and	r24, r24
    41b6:	59 f0       	breq	.+22     	; 0x41ce <bootmagic+0x156>
        keymap_config.swap_lalt_lgui = !keymap_config.swap_lalt_lgui;
    41b8:	80 91 2a 03 	lds	r24, 0x032A	; 0x80032a <keymap_config>
    41bc:	82 fb       	bst	r24, 2
    41be:	22 27       	eor	r18, r18
    41c0:	20 f9       	bld	r18, 0
    41c2:	91 e0       	ldi	r25, 0x01	; 1
    41c4:	92 27       	eor	r25, r18
    41c6:	90 fb       	bst	r25, 0
    41c8:	82 f9       	bld	r24, 2
    41ca:	80 93 2a 03 	sts	0x032A, r24	; 0x80032a <keymap_config>
    }
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_RALT_RGUI)) {
    41ce:	86 ee       	ldi	r24, 0xE6	; 230
    41d0:	90 e0       	ldi	r25, 0x00	; 0
    41d2:	0e 94 2a 20 	call	0x4054	; 0x4054 <bootmagic_scan_key>
    41d6:	88 23       	and	r24, r24
    41d8:	59 f0       	breq	.+22     	; 0x41f0 <bootmagic+0x178>
        keymap_config.swap_ralt_rgui = !keymap_config.swap_ralt_rgui;
    41da:	80 91 2a 03 	lds	r24, 0x032A	; 0x80032a <keymap_config>
    41de:	83 fb       	bst	r24, 3
    41e0:	22 27       	eor	r18, r18
    41e2:	20 f9       	bld	r18, 0
    41e4:	91 e0       	ldi	r25, 0x01	; 1
    41e6:	92 27       	eor	r25, r18
    41e8:	90 fb       	bst	r25, 0
    41ea:	83 f9       	bld	r24, 3
    41ec:	80 93 2a 03 	sts	0x032A, r24	; 0x80032a <keymap_config>
    }
    if (bootmagic_scan_key(BOOTMAGIC_KEY_NO_GUI)) {
    41f0:	83 ee       	ldi	r24, 0xE3	; 227
    41f2:	90 e0       	ldi	r25, 0x00	; 0
    41f4:	0e 94 2a 20 	call	0x4054	; 0x4054 <bootmagic_scan_key>
    41f8:	88 23       	and	r24, r24
    41fa:	59 f0       	breq	.+22     	; 0x4212 <bootmagic+0x19a>
        keymap_config.no_gui = !keymap_config.no_gui;
    41fc:	80 91 2a 03 	lds	r24, 0x032A	; 0x80032a <keymap_config>
    4200:	84 fb       	bst	r24, 4
    4202:	22 27       	eor	r18, r18
    4204:	20 f9       	bld	r18, 0
    4206:	91 e0       	ldi	r25, 0x01	; 1
    4208:	92 27       	eor	r25, r18
    420a:	90 fb       	bst	r25, 0
    420c:	84 f9       	bld	r24, 4
    420e:	80 93 2a 03 	sts	0x032A, r24	; 0x80032a <keymap_config>
    }
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_GRAVE_ESC)) {
    4212:	85 e3       	ldi	r24, 0x35	; 53
    4214:	90 e0       	ldi	r25, 0x00	; 0
    4216:	0e 94 2a 20 	call	0x4054	; 0x4054 <bootmagic_scan_key>
    421a:	88 23       	and	r24, r24
    421c:	59 f0       	breq	.+22     	; 0x4234 <bootmagic+0x1bc>
        keymap_config.swap_grave_esc = !keymap_config.swap_grave_esc;
    421e:	80 91 2a 03 	lds	r24, 0x032A	; 0x80032a <keymap_config>
    4222:	85 fb       	bst	r24, 5
    4224:	22 27       	eor	r18, r18
    4226:	20 f9       	bld	r18, 0
    4228:	91 e0       	ldi	r25, 0x01	; 1
    422a:	92 27       	eor	r25, r18
    422c:	90 fb       	bst	r25, 0
    422e:	85 f9       	bld	r24, 5
    4230:	80 93 2a 03 	sts	0x032A, r24	; 0x80032a <keymap_config>
    }
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_BACKSLASH_BACKSPACE)) {
    4234:	81 e3       	ldi	r24, 0x31	; 49
    4236:	90 e0       	ldi	r25, 0x00	; 0
    4238:	0e 94 2a 20 	call	0x4054	; 0x4054 <bootmagic_scan_key>
    423c:	88 23       	and	r24, r24
    423e:	59 f0       	breq	.+22     	; 0x4256 <bootmagic+0x1de>
        keymap_config.swap_backslash_backspace = !keymap_config.swap_backslash_backspace;
    4240:	80 91 2a 03 	lds	r24, 0x032A	; 0x80032a <keymap_config>
    4244:	86 fb       	bst	r24, 6
    4246:	22 27       	eor	r18, r18
    4248:	20 f9       	bld	r18, 0
    424a:	91 e0       	ldi	r25, 0x01	; 1
    424c:	92 27       	eor	r25, r18
    424e:	90 fb       	bst	r25, 0
    4250:	86 f9       	bld	r24, 6
    4252:	80 93 2a 03 	sts	0x032A, r24	; 0x80032a <keymap_config>
    }
    if (bootmagic_scan_key(BOOTMAGIC_HOST_NKRO)) {
    4256:	81 e1       	ldi	r24, 0x11	; 17
    4258:	90 e0       	ldi	r25, 0x00	; 0
    425a:	0e 94 2a 20 	call	0x4054	; 0x4054 <bootmagic_scan_key>
    425e:	88 23       	and	r24, r24
    4260:	59 f0       	breq	.+22     	; 0x4278 <bootmagic+0x200>
        keymap_config.nkro = !keymap_config.nkro;
    4262:	80 91 2a 03 	lds	r24, 0x032A	; 0x80032a <keymap_config>
    4266:	87 fb       	bst	r24, 7
    4268:	22 27       	eor	r18, r18
    426a:	20 f9       	bld	r18, 0
    426c:	91 e0       	ldi	r25, 0x01	; 1
    426e:	92 27       	eor	r25, r18
    4270:	90 fb       	bst	r25, 0
    4272:	87 f9       	bld	r24, 7
    4274:	80 93 2a 03 	sts	0x032A, r24	; 0x80032a <keymap_config>
    }
    eeconfig_write_keymap(keymap_config.raw);
    4278:	80 91 2a 03 	lds	r24, 0x032A	; 0x80032a <keymap_config>
    427c:	0e 94 c5 21 	call	0x438a	; 0x438a <eeconfig_write_keymap>

#ifdef NKRO_ENABLE
    keyboard_nkro = keymap_config.nkro;
    4280:	80 91 2a 03 	lds	r24, 0x032A	; 0x80032a <keymap_config>
    4284:	87 fb       	bst	r24, 7
    4286:	88 27       	eor	r24, r24
    4288:	80 f9       	bld	r24, 0
    428a:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <keyboard_nkro>
#endif

    /* default layer */
    uint8_t default_layer = 0;
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_0)) { default_layer |= (1<<0); }
    428e:	87 e2       	ldi	r24, 0x27	; 39
    4290:	90 e0       	ldi	r25, 0x00	; 0
    4292:	0e 94 2a 20 	call	0x4054	; 0x4054 <bootmagic_scan_key>
    4296:	c8 2f       	mov	r28, r24
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_1)) { default_layer |= (1<<1); }
    4298:	8e e1       	ldi	r24, 0x1E	; 30
    429a:	90 e0       	ldi	r25, 0x00	; 0
    429c:	0e 94 2a 20 	call	0x4054	; 0x4054 <bootmagic_scan_key>
    42a0:	81 11       	cpse	r24, r1
    42a2:	c2 60       	ori	r28, 0x02	; 2
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_2)) { default_layer |= (1<<2); }
    42a4:	8f e1       	ldi	r24, 0x1F	; 31
    42a6:	90 e0       	ldi	r25, 0x00	; 0
    42a8:	0e 94 2a 20 	call	0x4054	; 0x4054 <bootmagic_scan_key>
    42ac:	81 11       	cpse	r24, r1
    42ae:	c4 60       	ori	r28, 0x04	; 4
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_3)) { default_layer |= (1<<3); }
    42b0:	80 e2       	ldi	r24, 0x20	; 32
    42b2:	90 e0       	ldi	r25, 0x00	; 0
    42b4:	0e 94 2a 20 	call	0x4054	; 0x4054 <bootmagic_scan_key>
    42b8:	81 11       	cpse	r24, r1
    42ba:	c8 60       	ori	r28, 0x08	; 8
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_4)) { default_layer |= (1<<4); }
    42bc:	81 e2       	ldi	r24, 0x21	; 33
    42be:	90 e0       	ldi	r25, 0x00	; 0
    42c0:	0e 94 2a 20 	call	0x4054	; 0x4054 <bootmagic_scan_key>
    42c4:	81 11       	cpse	r24, r1
    42c6:	c0 61       	ori	r28, 0x10	; 16
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_5)) { default_layer |= (1<<5); }
    42c8:	82 e2       	ldi	r24, 0x22	; 34
    42ca:	90 e0       	ldi	r25, 0x00	; 0
    42cc:	0e 94 2a 20 	call	0x4054	; 0x4054 <bootmagic_scan_key>
    42d0:	81 11       	cpse	r24, r1
    42d2:	c0 62       	ori	r28, 0x20	; 32
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_6)) { default_layer |= (1<<6); }
    42d4:	83 e2       	ldi	r24, 0x23	; 35
    42d6:	90 e0       	ldi	r25, 0x00	; 0
    42d8:	0e 94 2a 20 	call	0x4054	; 0x4054 <bootmagic_scan_key>
    42dc:	81 11       	cpse	r24, r1
    42de:	c0 64       	ori	r28, 0x40	; 64
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_7)) { default_layer |= (1<<7); }
    42e0:	84 e2       	ldi	r24, 0x24	; 36
    42e2:	90 e0       	ldi	r25, 0x00	; 0
    42e4:	0e 94 2a 20 	call	0x4054	; 0x4054 <bootmagic_scan_key>
    42e8:	88 23       	and	r24, r24
    42ea:	11 f0       	breq	.+4      	; 0x42f0 <bootmagic+0x278>
    42ec:	c0 68       	ori	r28, 0x80	; 128
    42ee:	02 c0       	rjmp	.+4      	; 0x42f4 <bootmagic+0x27c>
    if (default_layer) {
    42f0:	cc 23       	and	r28, r28
    42f2:	29 f0       	breq	.+10     	; 0x42fe <bootmagic+0x286>
        eeconfig_write_default_layer(default_layer);
    42f4:	8c 2f       	mov	r24, r28
    42f6:	0e 94 bc 21 	call	0x4378	; 0x4378 <eeconfig_write_default_layer>
        default_layer_set((uint32_t)default_layer);
    42fa:	6c 2f       	mov	r22, r28
    42fc:	03 c0       	rjmp	.+6      	; 0x4304 <bootmagic+0x28c>
    } else {
        default_layer = eeconfig_read_default_layer();
    42fe:	0e 94 b8 21 	call	0x4370	; 0x4370 <eeconfig_read_default_layer>
        default_layer_set((uint32_t)default_layer);
    4302:	68 2f       	mov	r22, r24
    4304:	70 e0       	ldi	r23, 0x00	; 0
    4306:	80 e0       	ldi	r24, 0x00	; 0
    4308:	90 e0       	ldi	r25, 0x00	; 0
    }
}
    430a:	cf 91       	pop	r28
    if (default_layer) {
        eeconfig_write_default_layer(default_layer);
        default_layer_set((uint32_t)default_layer);
    } else {
        default_layer = eeconfig_read_default_layer();
        default_layer_set((uint32_t)default_layer);
    430c:	0c 94 07 1b 	jmp	0x360e	; 0x360e <default_layer_set>
    }
}
    4310:	cf 91       	pop	r28
    4312:	08 95       	ret

00004314 <eeconfig_init>:
    eeprom_write_word(EECONFIG_MAGIC, EECONFIG_MAGIC_NUMBER);
}

void eeconfig_disable(void)
{
    eeprom_write_word(EECONFIG_MAGIC, 0xFFFF);
    4314:	6d ee       	ldi	r22, 0xED	; 237
    4316:	7e ef       	ldi	r23, 0xFE	; 254
    4318:	80 e0       	ldi	r24, 0x00	; 0
    431a:	90 e0       	ldi	r25, 0x00	; 0
    431c:	0e 94 16 2b 	call	0x562c	; 0x562c <eeprom_write_word>
    4320:	60 e0       	ldi	r22, 0x00	; 0
    4322:	82 e0       	ldi	r24, 0x02	; 2
    4324:	90 e0       	ldi	r25, 0x00	; 0
    4326:	0e 94 08 2b 	call	0x5610	; 0x5610 <eeprom_write_byte>
    432a:	60 e0       	ldi	r22, 0x00	; 0
    432c:	83 e0       	ldi	r24, 0x03	; 3
    432e:	90 e0       	ldi	r25, 0x00	; 0
    4330:	0e 94 08 2b 	call	0x5610	; 0x5610 <eeprom_write_byte>
    4334:	60 e0       	ldi	r22, 0x00	; 0
    4336:	84 e0       	ldi	r24, 0x04	; 4
    4338:	90 e0       	ldi	r25, 0x00	; 0
    433a:	0e 94 08 2b 	call	0x5610	; 0x5610 <eeprom_write_byte>
    433e:	60 e0       	ldi	r22, 0x00	; 0
    4340:	85 e0       	ldi	r24, 0x05	; 5
    4342:	90 e0       	ldi	r25, 0x00	; 0
    4344:	0c 94 08 2b 	jmp	0x5610	; 0x5610 <eeprom_write_byte>

00004348 <eeconfig_is_enabled>:
}

bool eeconfig_is_enabled(void)
{
    return (eeprom_read_word(EECONFIG_MAGIC) == EECONFIG_MAGIC_NUMBER);
    4348:	80 e0       	ldi	r24, 0x00	; 0
    434a:	90 e0       	ldi	r25, 0x00	; 0
    434c:	0e 94 02 2b 	call	0x5604	; 0x5604 <eeprom_read_word>
    4350:	21 e0       	ldi	r18, 0x01	; 1
    4352:	8d 3e       	cpi	r24, 0xED	; 237
    4354:	9e 4f       	sbci	r25, 0xFE	; 254
    4356:	09 f0       	breq	.+2      	; 0x435a <eeconfig_is_enabled+0x12>
    4358:	20 e0       	ldi	r18, 0x00	; 0
}
    435a:	82 2f       	mov	r24, r18
    435c:	08 95       	ret

0000435e <eeconfig_read_debug>:

uint8_t eeconfig_read_debug(void)      { return eeprom_read_byte(EECONFIG_DEBUG); }
    435e:	82 e0       	ldi	r24, 0x02	; 2
    4360:	90 e0       	ldi	r25, 0x00	; 0
    4362:	0c 94 fa 2a 	jmp	0x55f4	; 0x55f4 <eeprom_read_byte>

00004366 <eeconfig_write_debug>:
void eeconfig_write_debug(uint8_t val) { eeprom_write_byte(EECONFIG_DEBUG, val); }
    4366:	68 2f       	mov	r22, r24
    4368:	82 e0       	ldi	r24, 0x02	; 2
    436a:	90 e0       	ldi	r25, 0x00	; 0
    436c:	0c 94 08 2b 	jmp	0x5610	; 0x5610 <eeprom_write_byte>

00004370 <eeconfig_read_default_layer>:

uint8_t eeconfig_read_default_layer(void)      { return eeprom_read_byte(EECONFIG_DEFAULT_LAYER); }
    4370:	83 e0       	ldi	r24, 0x03	; 3
    4372:	90 e0       	ldi	r25, 0x00	; 0
    4374:	0c 94 fa 2a 	jmp	0x55f4	; 0x55f4 <eeprom_read_byte>

00004378 <eeconfig_write_default_layer>:
void eeconfig_write_default_layer(uint8_t val) { eeprom_write_byte(EECONFIG_DEFAULT_LAYER, val); }
    4378:	68 2f       	mov	r22, r24
    437a:	83 e0       	ldi	r24, 0x03	; 3
    437c:	90 e0       	ldi	r25, 0x00	; 0
    437e:	0c 94 08 2b 	jmp	0x5610	; 0x5610 <eeprom_write_byte>

00004382 <eeconfig_read_keymap>:

uint8_t eeconfig_read_keymap(void)      { return eeprom_read_byte(EECONFIG_KEYMAP); }
    4382:	84 e0       	ldi	r24, 0x04	; 4
    4384:	90 e0       	ldi	r25, 0x00	; 0
    4386:	0c 94 fa 2a 	jmp	0x55f4	; 0x55f4 <eeprom_read_byte>

0000438a <eeconfig_write_keymap>:
void eeconfig_write_keymap(uint8_t val) { eeprom_write_byte(EECONFIG_KEYMAP, val); }
    438a:	68 2f       	mov	r22, r24
    438c:	84 e0       	ldi	r24, 0x04	; 4
    438e:	90 e0       	ldi	r25, 0x00	; 0
    4390:	0c 94 08 2b 	jmp	0x5610	; 0x5610 <eeprom_write_byte>

00004394 <move_unit>:


static uint8_t move_unit(void)
{
    uint16_t unit;
    if (mousekey_accel & (1<<0)) {
    4394:	80 91 14 03 	lds	r24, 0x0314	; 0x800314 <mousekey_accel>
    4398:	80 ff       	sbrs	r24, 0
    439a:	0b c0       	rjmp	.+22     	; 0x43b2 <move_unit+0x1e>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed)/4;
    439c:	60 91 17 01 	lds	r22, 0x0117	; 0x800117 <mk_max_speed>
    43a0:	85 e0       	ldi	r24, 0x05	; 5
    43a2:	68 9f       	mul	r22, r24
    43a4:	b0 01       	movw	r22, r0
    43a6:	11 24       	eor	r1, r1
    43a8:	75 95       	asr	r23
    43aa:	67 95       	ror	r22
    43ac:	75 95       	asr	r23
    43ae:	67 95       	ror	r22
    43b0:	2b c0       	rjmp	.+86     	; 0x4408 <move_unit+0x74>
    } else if (mousekey_accel & (1<<1)) {
    43b2:	81 ff       	sbrs	r24, 1
    43b4:	09 c0       	rjmp	.+18     	; 0x43c8 <move_unit+0x34>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed)/2;
    43b6:	60 91 17 01 	lds	r22, 0x0117	; 0x800117 <mk_max_speed>
    43ba:	85 e0       	ldi	r24, 0x05	; 5
    43bc:	68 9f       	mul	r22, r24
    43be:	b0 01       	movw	r22, r0
    43c0:	11 24       	eor	r1, r1
    43c2:	75 95       	asr	r23
    43c4:	67 95       	ror	r22
    43c6:	20 c0       	rjmp	.+64     	; 0x4408 <move_unit+0x74>
    } else if (mousekey_accel & (1<<2)) {
    43c8:	82 ff       	sbrs	r24, 2
    43ca:	07 c0       	rjmp	.+14     	; 0x43da <move_unit+0x46>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed);
    43cc:	60 91 17 01 	lds	r22, 0x0117	; 0x800117 <mk_max_speed>
    43d0:	85 e0       	ldi	r24, 0x05	; 5
    43d2:	68 9f       	mul	r22, r24
    43d4:	b0 01       	movw	r22, r0
    43d6:	11 24       	eor	r1, r1
    43d8:	17 c0       	rjmp	.+46     	; 0x4408 <move_unit+0x74>
    } else if (mousekey_repeat == 0) {
    43da:	90 91 15 03 	lds	r25, 0x0315	; 0x800315 <mousekey_repeat>
    43de:	99 23       	and	r25, r25
    43e0:	d1 f0       	breq	.+52     	; 0x4416 <move_unit+0x82>
        unit = MOUSEKEY_MOVE_DELTA;
    } else if (mousekey_repeat >= mk_time_to_max) {
    43e2:	60 91 16 01 	lds	r22, 0x0116	; 0x800116 <mk_time_to_max>
    43e6:	96 17       	cp	r25, r22
    43e8:	88 f7       	brcc	.-30     	; 0x43cc <move_unit+0x38>
        unit = MOUSEKEY_MOVE_DELTA * mk_max_speed;
    } else {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed * mousekey_repeat) / mk_time_to_max;
    43ea:	20 91 17 01 	lds	r18, 0x0117	; 0x800117 <mk_max_speed>
    43ee:	85 e0       	ldi	r24, 0x05	; 5
    43f0:	28 9f       	mul	r18, r24
    43f2:	90 01       	movw	r18, r0
    43f4:	11 24       	eor	r1, r1
    43f6:	92 9f       	mul	r25, r18
    43f8:	a0 01       	movw	r20, r0
    43fa:	93 9f       	mul	r25, r19
    43fc:	50 0d       	add	r21, r0
    43fe:	11 24       	eor	r1, r1
    4400:	70 e0       	ldi	r23, 0x00	; 0
    4402:	ca 01       	movw	r24, r20
    4404:	0e 94 cc 2a 	call	0x5598	; 0x5598 <__divmodhi4>
    }
    return (unit > MOUSEKEY_MOVE_MAX ? MOUSEKEY_MOVE_MAX : (unit == 0 ? 1 : unit));
    4408:	60 38       	cpi	r22, 0x80	; 128
    440a:	71 05       	cpc	r23, r1
    440c:	40 f4       	brcc	.+16     	; 0x441e <move_unit+0x8a>
    440e:	61 15       	cp	r22, r1
    4410:	71 05       	cpc	r23, r1
    4412:	19 f4       	brne	.+6      	; 0x441a <move_unit+0x86>
    4414:	06 c0       	rjmp	.+12     	; 0x4422 <move_unit+0x8e>
    } else if (mousekey_accel & (1<<1)) {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed)/2;
    } else if (mousekey_accel & (1<<2)) {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed);
    } else if (mousekey_repeat == 0) {
        unit = MOUSEKEY_MOVE_DELTA;
    4416:	65 e0       	ldi	r22, 0x05	; 5
    4418:	70 e0       	ldi	r23, 0x00	; 0
    } else if (mousekey_repeat >= mk_time_to_max) {
        unit = MOUSEKEY_MOVE_DELTA * mk_max_speed;
    } else {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed * mousekey_repeat) / mk_time_to_max;
    }
    return (unit > MOUSEKEY_MOVE_MAX ? MOUSEKEY_MOVE_MAX : (unit == 0 ? 1 : unit));
    441a:	86 2f       	mov	r24, r22
    441c:	08 95       	ret
    441e:	8f e7       	ldi	r24, 0x7F	; 127
    4420:	08 95       	ret
    4422:	81 e0       	ldi	r24, 0x01	; 1
}
    4424:	08 95       	ret

00004426 <wheel_unit>:

static uint8_t wheel_unit(void)
{
    uint16_t unit;
    if (mousekey_accel & (1<<0)) {
    4426:	80 91 14 03 	lds	r24, 0x0314	; 0x800314 <mousekey_accel>
    442a:	80 ff       	sbrs	r24, 0
    442c:	08 c0       	rjmp	.+16     	; 0x443e <wheel_unit+0x18>
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed)/4;
    442e:	60 91 15 01 	lds	r22, 0x0115	; 0x800115 <mk_wheel_max_speed>
    4432:	70 e0       	ldi	r23, 0x00	; 0
    4434:	75 95       	asr	r23
    4436:	67 95       	ror	r22
    4438:	75 95       	asr	r23
    443a:	67 95       	ror	r22
    443c:	21 c0       	rjmp	.+66     	; 0x4480 <wheel_unit+0x5a>
    } else if (mousekey_accel & (1<<1)) {
    443e:	81 ff       	sbrs	r24, 1
    4440:	06 c0       	rjmp	.+12     	; 0x444e <wheel_unit+0x28>
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed)/2;
    4442:	60 91 15 01 	lds	r22, 0x0115	; 0x800115 <mk_wheel_max_speed>
    4446:	70 e0       	ldi	r23, 0x00	; 0
    4448:	75 95       	asr	r23
    444a:	67 95       	ror	r22
    444c:	19 c0       	rjmp	.+50     	; 0x4480 <wheel_unit+0x5a>
    } else if (mousekey_accel & (1<<2)) {
    444e:	82 ff       	sbrs	r24, 2
    4450:	04 c0       	rjmp	.+8      	; 0x445a <wheel_unit+0x34>
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed);
    4452:	60 91 15 01 	lds	r22, 0x0115	; 0x800115 <mk_wheel_max_speed>
    4456:	70 e0       	ldi	r23, 0x00	; 0
    4458:	10 c0       	rjmp	.+32     	; 0x447a <wheel_unit+0x54>
    } else if (mousekey_repeat == 0) {
    445a:	90 91 15 03 	lds	r25, 0x0315	; 0x800315 <mousekey_repeat>
    445e:	99 23       	and	r25, r25
    4460:	99 f0       	breq	.+38     	; 0x4488 <wheel_unit+0x62>
        unit = MOUSEKEY_WHEEL_DELTA;
    } else if (mousekey_repeat >= mk_wheel_time_to_max) {
    4462:	60 91 14 01 	lds	r22, 0x0114	; 0x800114 <mk_wheel_time_to_max>
    4466:	96 17       	cp	r25, r22
    4468:	a0 f7       	brcc	.-24     	; 0x4452 <wheel_unit+0x2c>
        unit = MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed;
    } else {
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed * mousekey_repeat) / mk_wheel_time_to_max;
    446a:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <mk_wheel_max_speed>
    446e:	89 9f       	mul	r24, r25
    4470:	c0 01       	movw	r24, r0
    4472:	11 24       	eor	r1, r1
    4474:	70 e0       	ldi	r23, 0x00	; 0
    4476:	0e 94 cc 2a 	call	0x5598	; 0x5598 <__divmodhi4>
    }
    return (unit > MOUSEKEY_WHEEL_MAX ? MOUSEKEY_WHEEL_MAX : (unit == 0 ? 1 : unit));
    447a:	60 38       	cpi	r22, 0x80	; 128
    447c:	71 05       	cpc	r23, r1
    447e:	40 f4       	brcc	.+16     	; 0x4490 <wheel_unit+0x6a>
    4480:	61 15       	cp	r22, r1
    4482:	71 05       	cpc	r23, r1
    4484:	19 f4       	brne	.+6      	; 0x448c <wheel_unit+0x66>
    4486:	06 c0       	rjmp	.+12     	; 0x4494 <wheel_unit+0x6e>
    } else if (mousekey_accel & (1<<1)) {
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed)/2;
    } else if (mousekey_accel & (1<<2)) {
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed);
    } else if (mousekey_repeat == 0) {
        unit = MOUSEKEY_WHEEL_DELTA;
    4488:	61 e0       	ldi	r22, 0x01	; 1
    448a:	70 e0       	ldi	r23, 0x00	; 0
    } else if (mousekey_repeat >= mk_wheel_time_to_max) {
        unit = MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed;
    } else {
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed * mousekey_repeat) / mk_wheel_time_to_max;
    }
    return (unit > MOUSEKEY_WHEEL_MAX ? MOUSEKEY_WHEEL_MAX : (unit == 0 ? 1 : unit));
    448c:	86 2f       	mov	r24, r22
    448e:	08 95       	ret
    4490:	8f e7       	ldi	r24, 0x7F	; 127
    4492:	08 95       	ret
    4494:	81 e0       	ldi	r24, 0x01	; 1
}
    4496:	08 95       	ret

00004498 <mousekey_on>:
    mousekey_send();
}

void mousekey_on(uint8_t code)
{
    if      (code == KC_MS_UP)       mouse_report.y = move_unit() * -1;
    4498:	80 3f       	cpi	r24, 0xF0	; 240
    449a:	21 f4       	brne	.+8      	; 0x44a4 <mousekey_on+0xc>
    449c:	0e 94 ca 21 	call	0x4394	; 0x4394 <move_unit>
    44a0:	81 95       	neg	r24
    44a2:	04 c0       	rjmp	.+8      	; 0x44ac <mousekey_on+0x14>
    else if (code == KC_MS_DOWN)     mouse_report.y = move_unit();
    44a4:	81 3f       	cpi	r24, 0xF1	; 241
    44a6:	29 f4       	brne	.+10     	; 0x44b2 <mousekey_on+0x1a>
    44a8:	0e 94 ca 21 	call	0x4394	; 0x4394 <move_unit>
    44ac:	80 93 18 03 	sts	0x0318, r24	; 0x800318 <mouse_report+0x2>
    44b0:	08 95       	ret
    else if (code == KC_MS_LEFT)     mouse_report.x = move_unit() * -1;
    44b2:	82 3f       	cpi	r24, 0xF2	; 242
    44b4:	21 f4       	brne	.+8      	; 0x44be <mousekey_on+0x26>
    44b6:	0e 94 ca 21 	call	0x4394	; 0x4394 <move_unit>
    44ba:	81 95       	neg	r24
    44bc:	04 c0       	rjmp	.+8      	; 0x44c6 <mousekey_on+0x2e>
    else if (code == KC_MS_RIGHT)    mouse_report.x = move_unit();
    44be:	83 3f       	cpi	r24, 0xF3	; 243
    44c0:	29 f4       	brne	.+10     	; 0x44cc <mousekey_on+0x34>
    44c2:	0e 94 ca 21 	call	0x4394	; 0x4394 <move_unit>
    44c6:	80 93 17 03 	sts	0x0317, r24	; 0x800317 <mouse_report+0x1>
    44ca:	08 95       	ret
    else if (code == KC_MS_WH_UP)    mouse_report.v = wheel_unit();
    44cc:	89 3f       	cpi	r24, 0xF9	; 249
    44ce:	19 f4       	brne	.+6      	; 0x44d6 <mousekey_on+0x3e>
    44d0:	0e 94 13 22 	call	0x4426	; 0x4426 <wheel_unit>
    44d4:	05 c0       	rjmp	.+10     	; 0x44e0 <mousekey_on+0x48>
    else if (code == KC_MS_WH_DOWN)  mouse_report.v = wheel_unit() * -1;
    44d6:	8a 3f       	cpi	r24, 0xFA	; 250
    44d8:	31 f4       	brne	.+12     	; 0x44e6 <mousekey_on+0x4e>
    44da:	0e 94 13 22 	call	0x4426	; 0x4426 <wheel_unit>
    44de:	81 95       	neg	r24
    44e0:	80 93 19 03 	sts	0x0319, r24	; 0x800319 <mouse_report+0x3>
    44e4:	08 95       	ret
    else if (code == KC_MS_WH_LEFT)  mouse_report.h = wheel_unit() * -1;
    44e6:	8b 3f       	cpi	r24, 0xFB	; 251
    44e8:	21 f4       	brne	.+8      	; 0x44f2 <mousekey_on+0x5a>
    44ea:	0e 94 13 22 	call	0x4426	; 0x4426 <wheel_unit>
    44ee:	81 95       	neg	r24
    44f0:	04 c0       	rjmp	.+8      	; 0x44fa <mousekey_on+0x62>
    else if (code == KC_MS_WH_RIGHT) mouse_report.h = wheel_unit();
    44f2:	8c 3f       	cpi	r24, 0xFC	; 252
    44f4:	29 f4       	brne	.+10     	; 0x4500 <mousekey_on+0x68>
    44f6:	0e 94 13 22 	call	0x4426	; 0x4426 <wheel_unit>
    44fa:	80 93 1a 03 	sts	0x031A, r24	; 0x80031a <mouse_report+0x4>
    44fe:	08 95       	ret
    else if (code == KC_MS_BTN1)     mouse_report.buttons |= MOUSE_BTN1;
    4500:	84 3f       	cpi	r24, 0xF4	; 244
    4502:	21 f4       	brne	.+8      	; 0x450c <mousekey_on+0x74>
    4504:	80 91 16 03 	lds	r24, 0x0316	; 0x800316 <mouse_report>
    4508:	81 60       	ori	r24, 0x01	; 1
    450a:	17 c0       	rjmp	.+46     	; 0x453a <mousekey_on+0xa2>
    else if (code == KC_MS_BTN2)     mouse_report.buttons |= MOUSE_BTN2;
    450c:	85 3f       	cpi	r24, 0xF5	; 245
    450e:	21 f4       	brne	.+8      	; 0x4518 <mousekey_on+0x80>
    4510:	80 91 16 03 	lds	r24, 0x0316	; 0x800316 <mouse_report>
    4514:	82 60       	ori	r24, 0x02	; 2
    4516:	11 c0       	rjmp	.+34     	; 0x453a <mousekey_on+0xa2>
    else if (code == KC_MS_BTN3)     mouse_report.buttons |= MOUSE_BTN3;
    4518:	86 3f       	cpi	r24, 0xF6	; 246
    451a:	21 f4       	brne	.+8      	; 0x4524 <mousekey_on+0x8c>
    451c:	80 91 16 03 	lds	r24, 0x0316	; 0x800316 <mouse_report>
    4520:	84 60       	ori	r24, 0x04	; 4
    4522:	0b c0       	rjmp	.+22     	; 0x453a <mousekey_on+0xa2>
    else if (code == KC_MS_BTN4)     mouse_report.buttons |= MOUSE_BTN4;
    4524:	87 3f       	cpi	r24, 0xF7	; 247
    4526:	21 f4       	brne	.+8      	; 0x4530 <mousekey_on+0x98>
    4528:	80 91 16 03 	lds	r24, 0x0316	; 0x800316 <mouse_report>
    452c:	88 60       	ori	r24, 0x08	; 8
    452e:	05 c0       	rjmp	.+10     	; 0x453a <mousekey_on+0xa2>
    else if (code == KC_MS_BTN5)     mouse_report.buttons |= MOUSE_BTN5;
    4530:	88 3f       	cpi	r24, 0xF8	; 248
    4532:	31 f4       	brne	.+12     	; 0x4540 <mousekey_on+0xa8>
    4534:	80 91 16 03 	lds	r24, 0x0316	; 0x800316 <mouse_report>
    4538:	80 61       	ori	r24, 0x10	; 16
    453a:	80 93 16 03 	sts	0x0316, r24	; 0x800316 <mouse_report>
    453e:	08 95       	ret
    else if (code == KC_MS_ACCEL0)   mousekey_accel |= (1<<0);
    4540:	8d 3f       	cpi	r24, 0xFD	; 253
    4542:	21 f4       	brne	.+8      	; 0x454c <mousekey_on+0xb4>
    4544:	80 91 14 03 	lds	r24, 0x0314	; 0x800314 <mousekey_accel>
    4548:	81 60       	ori	r24, 0x01	; 1
    454a:	0b c0       	rjmp	.+22     	; 0x4562 <mousekey_on+0xca>
    else if (code == KC_MS_ACCEL1)   mousekey_accel |= (1<<1);
    454c:	8e 3f       	cpi	r24, 0xFE	; 254
    454e:	21 f4       	brne	.+8      	; 0x4558 <mousekey_on+0xc0>
    4550:	80 91 14 03 	lds	r24, 0x0314	; 0x800314 <mousekey_accel>
    4554:	82 60       	ori	r24, 0x02	; 2
    4556:	05 c0       	rjmp	.+10     	; 0x4562 <mousekey_on+0xca>
    else if (code == KC_MS_ACCEL2)   mousekey_accel |= (1<<2);
    4558:	8f 3f       	cpi	r24, 0xFF	; 255
    455a:	29 f4       	brne	.+10     	; 0x4566 <mousekey_on+0xce>
    455c:	80 91 14 03 	lds	r24, 0x0314	; 0x800314 <mousekey_accel>
    4560:	84 60       	ori	r24, 0x04	; 4
    4562:	80 93 14 03 	sts	0x0314, r24	; 0x800314 <mousekey_accel>
    4566:	08 95       	ret

00004568 <mousekey_off>:
}

void mousekey_off(uint8_t code)
{
    if      (code == KC_MS_UP       && mouse_report.y < 0) mouse_report.y = 0;
    4568:	80 3f       	cpi	r24, 0xF0	; 240
    456a:	39 f4       	brne	.+14     	; 0x457a <mousekey_off+0x12>
    456c:	80 91 18 03 	lds	r24, 0x0318	; 0x800318 <mouse_report+0x2>
    4570:	87 ff       	sbrs	r24, 7
    4572:	6c c0       	rjmp	.+216    	; 0x464c <mousekey_off+0xe4>
    4574:	10 92 18 03 	sts	0x0318, r1	; 0x800318 <mouse_report+0x2>
    4578:	69 c0       	rjmp	.+210    	; 0x464c <mousekey_off+0xe4>
    else if (code == KC_MS_DOWN     && mouse_report.y > 0) mouse_report.y = 0;
    457a:	81 3f       	cpi	r24, 0xF1	; 241
    457c:	29 f4       	brne	.+10     	; 0x4588 <mousekey_off+0x20>
    457e:	80 91 18 03 	lds	r24, 0x0318	; 0x800318 <mouse_report+0x2>
    4582:	18 16       	cp	r1, r24
    4584:	bc f3       	brlt	.-18     	; 0x4574 <mousekey_off+0xc>
    4586:	62 c0       	rjmp	.+196    	; 0x464c <mousekey_off+0xe4>
    4588:	90 91 17 03 	lds	r25, 0x0317	; 0x800317 <mouse_report+0x1>
    else if (code == KC_MS_LEFT     && mouse_report.x < 0) mouse_report.x = 0;
    458c:	82 3f       	cpi	r24, 0xF2	; 242
    458e:	29 f4       	brne	.+10     	; 0x459a <mousekey_off+0x32>
    4590:	97 ff       	sbrs	r25, 7
    4592:	5c c0       	rjmp	.+184    	; 0x464c <mousekey_off+0xe4>
    4594:	10 92 17 03 	sts	0x0317, r1	; 0x800317 <mouse_report+0x1>
    4598:	59 c0       	rjmp	.+178    	; 0x464c <mousekey_off+0xe4>
    else if (code == KC_MS_RIGHT    && mouse_report.x > 0) mouse_report.x = 0;
    459a:	83 3f       	cpi	r24, 0xF3	; 243
    459c:	19 f4       	brne	.+6      	; 0x45a4 <mousekey_off+0x3c>
    459e:	19 16       	cp	r1, r25
    45a0:	cc f3       	brlt	.-14     	; 0x4594 <mousekey_off+0x2c>
    45a2:	54 c0       	rjmp	.+168    	; 0x464c <mousekey_off+0xe4>
    else if (code == KC_MS_WH_UP    && mouse_report.v > 0) mouse_report.v = 0;
    45a4:	89 3f       	cpi	r24, 0xF9	; 249
    45a6:	41 f4       	brne	.+16     	; 0x45b8 <mousekey_off+0x50>
    45a8:	80 91 19 03 	lds	r24, 0x0319	; 0x800319 <mouse_report+0x3>
    45ac:	18 16       	cp	r1, r24
    45ae:	0c f0       	brlt	.+2      	; 0x45b2 <mousekey_off+0x4a>
    45b0:	4d c0       	rjmp	.+154    	; 0x464c <mousekey_off+0xe4>
    45b2:	10 92 19 03 	sts	0x0319, r1	; 0x800319 <mouse_report+0x3>
    45b6:	4a c0       	rjmp	.+148    	; 0x464c <mousekey_off+0xe4>
    else if (code == KC_MS_WH_DOWN  && mouse_report.v < 0) mouse_report.v = 0;
    45b8:	8a 3f       	cpi	r24, 0xFA	; 250
    45ba:	29 f4       	brne	.+10     	; 0x45c6 <mousekey_off+0x5e>
    45bc:	80 91 19 03 	lds	r24, 0x0319	; 0x800319 <mouse_report+0x3>
    45c0:	87 ff       	sbrs	r24, 7
    45c2:	44 c0       	rjmp	.+136    	; 0x464c <mousekey_off+0xe4>
    45c4:	f6 cf       	rjmp	.-20     	; 0x45b2 <mousekey_off+0x4a>
    else if (code == KC_MS_WH_LEFT  && mouse_report.h < 0) mouse_report.h = 0;
    45c6:	8b 3f       	cpi	r24, 0xFB	; 251
    45c8:	39 f4       	brne	.+14     	; 0x45d8 <mousekey_off+0x70>
    45ca:	80 91 1a 03 	lds	r24, 0x031A	; 0x80031a <mouse_report+0x4>
    45ce:	87 ff       	sbrs	r24, 7
    45d0:	3d c0       	rjmp	.+122    	; 0x464c <mousekey_off+0xe4>
    45d2:	10 92 1a 03 	sts	0x031A, r1	; 0x80031a <mouse_report+0x4>
    45d6:	3a c0       	rjmp	.+116    	; 0x464c <mousekey_off+0xe4>
    else if (code == KC_MS_WH_RIGHT && mouse_report.h > 0) mouse_report.h = 0;
    45d8:	8c 3f       	cpi	r24, 0xFC	; 252
    45da:	29 f4       	brne	.+10     	; 0x45e6 <mousekey_off+0x7e>
    45dc:	80 91 1a 03 	lds	r24, 0x031A	; 0x80031a <mouse_report+0x4>
    45e0:	18 16       	cp	r1, r24
    45e2:	bc f3       	brlt	.-18     	; 0x45d2 <mousekey_off+0x6a>
    45e4:	33 c0       	rjmp	.+102    	; 0x464c <mousekey_off+0xe4>
    else if (code == KC_MS_BTN1) mouse_report.buttons &= ~MOUSE_BTN1;
    45e6:	84 3f       	cpi	r24, 0xF4	; 244
    45e8:	21 f4       	brne	.+8      	; 0x45f2 <mousekey_off+0x8a>
    45ea:	80 91 16 03 	lds	r24, 0x0316	; 0x800316 <mouse_report>
    45ee:	8e 7f       	andi	r24, 0xFE	; 254
    45f0:	17 c0       	rjmp	.+46     	; 0x4620 <mousekey_off+0xb8>
    else if (code == KC_MS_BTN2) mouse_report.buttons &= ~MOUSE_BTN2;
    45f2:	85 3f       	cpi	r24, 0xF5	; 245
    45f4:	21 f4       	brne	.+8      	; 0x45fe <mousekey_off+0x96>
    45f6:	80 91 16 03 	lds	r24, 0x0316	; 0x800316 <mouse_report>
    45fa:	8d 7f       	andi	r24, 0xFD	; 253
    45fc:	11 c0       	rjmp	.+34     	; 0x4620 <mousekey_off+0xb8>
    else if (code == KC_MS_BTN3) mouse_report.buttons &= ~MOUSE_BTN3;
    45fe:	86 3f       	cpi	r24, 0xF6	; 246
    4600:	21 f4       	brne	.+8      	; 0x460a <mousekey_off+0xa2>
    4602:	80 91 16 03 	lds	r24, 0x0316	; 0x800316 <mouse_report>
    4606:	8b 7f       	andi	r24, 0xFB	; 251
    4608:	0b c0       	rjmp	.+22     	; 0x4620 <mousekey_off+0xb8>
    else if (code == KC_MS_BTN4) mouse_report.buttons &= ~MOUSE_BTN4;
    460a:	87 3f       	cpi	r24, 0xF7	; 247
    460c:	21 f4       	brne	.+8      	; 0x4616 <mousekey_off+0xae>
    460e:	80 91 16 03 	lds	r24, 0x0316	; 0x800316 <mouse_report>
    4612:	87 7f       	andi	r24, 0xF7	; 247
    4614:	05 c0       	rjmp	.+10     	; 0x4620 <mousekey_off+0xb8>
    else if (code == KC_MS_BTN5) mouse_report.buttons &= ~MOUSE_BTN5;
    4616:	88 3f       	cpi	r24, 0xF8	; 248
    4618:	31 f4       	brne	.+12     	; 0x4626 <mousekey_off+0xbe>
    461a:	80 91 16 03 	lds	r24, 0x0316	; 0x800316 <mouse_report>
    461e:	8f 7e       	andi	r24, 0xEF	; 239
    4620:	80 93 16 03 	sts	0x0316, r24	; 0x800316 <mouse_report>
    4624:	13 c0       	rjmp	.+38     	; 0x464c <mousekey_off+0xe4>
    else if (code == KC_MS_ACCEL0) mousekey_accel &= ~(1<<0);
    4626:	8d 3f       	cpi	r24, 0xFD	; 253
    4628:	21 f4       	brne	.+8      	; 0x4632 <mousekey_off+0xca>
    462a:	80 91 14 03 	lds	r24, 0x0314	; 0x800314 <mousekey_accel>
    462e:	8e 7f       	andi	r24, 0xFE	; 254
    4630:	0b c0       	rjmp	.+22     	; 0x4648 <mousekey_off+0xe0>
    else if (code == KC_MS_ACCEL1) mousekey_accel &= ~(1<<1);
    4632:	8e 3f       	cpi	r24, 0xFE	; 254
    4634:	21 f4       	brne	.+8      	; 0x463e <mousekey_off+0xd6>
    4636:	80 91 14 03 	lds	r24, 0x0314	; 0x800314 <mousekey_accel>
    463a:	8d 7f       	andi	r24, 0xFD	; 253
    463c:	05 c0       	rjmp	.+10     	; 0x4648 <mousekey_off+0xe0>
    else if (code == KC_MS_ACCEL2) mousekey_accel &= ~(1<<2);
    463e:	8f 3f       	cpi	r24, 0xFF	; 255
    4640:	29 f4       	brne	.+10     	; 0x464c <mousekey_off+0xe4>
    4642:	80 91 14 03 	lds	r24, 0x0314	; 0x800314 <mousekey_accel>
    4646:	8b 7f       	andi	r24, 0xFB	; 251
    4648:	80 93 14 03 	sts	0x0314, r24	; 0x800314 <mousekey_accel>

    if (mouse_report.x == 0 && mouse_report.y == 0 && mouse_report.v == 0 && mouse_report.h == 0)
    464c:	80 91 17 03 	lds	r24, 0x0317	; 0x800317 <mouse_report+0x1>
    4650:	81 11       	cpse	r24, r1
    4652:	0e c0       	rjmp	.+28     	; 0x4670 <mousekey_off+0x108>
    4654:	80 91 18 03 	lds	r24, 0x0318	; 0x800318 <mouse_report+0x2>
    4658:	81 11       	cpse	r24, r1
    465a:	0a c0       	rjmp	.+20     	; 0x4670 <mousekey_off+0x108>
    465c:	80 91 19 03 	lds	r24, 0x0319	; 0x800319 <mouse_report+0x3>
    4660:	81 11       	cpse	r24, r1
    4662:	06 c0       	rjmp	.+12     	; 0x4670 <mousekey_off+0x108>
    4664:	80 91 1a 03 	lds	r24, 0x031A	; 0x80031a <mouse_report+0x4>
    4668:	81 11       	cpse	r24, r1
    466a:	02 c0       	rjmp	.+4      	; 0x4670 <mousekey_off+0x108>
        mousekey_repeat = 0;
    466c:	10 92 15 03 	sts	0x0315, r1	; 0x800315 <mousekey_repeat>
    4670:	08 95       	ret

00004672 <mousekey_send>:
    mousekey_accel = 0;
}

static void mousekey_debug(void)
{
    if (!debug_mouse) return;
    4672:	80 91 0c 03 	lds	r24, 0x030C	; 0x80030c <debug_config>
    4676:	83 ff       	sbrs	r24, 3
    4678:	7e c0       	rjmp	.+252    	; 0x4776 <mousekey_send+0x104>
    print("mousekey [btn|x y v h](rep/acl): [");
    467a:	81 ee       	ldi	r24, 0xE1	; 225
    467c:	94 e0       	ldi	r25, 0x04	; 4
    467e:	0e 94 79 06 	call	0xcf2	; 0xcf2 <xputs>
    phex(mouse_report.buttons); print("|");
    4682:	80 91 16 03 	lds	r24, 0x0316	; 0x800316 <mouse_report>
    4686:	1f 92       	push	r1
    4688:	8f 93       	push	r24
    468a:	8c ed       	ldi	r24, 0xDC	; 220
    468c:	94 e0       	ldi	r25, 0x04	; 4
    468e:	9f 93       	push	r25
    4690:	8f 93       	push	r24
    4692:	0e 94 12 07 	call	0xe24	; 0xe24 <__xprintf>
    4696:	8a ed       	ldi	r24, 0xDA	; 218
    4698:	94 e0       	ldi	r25, 0x04	; 4
    469a:	0e 94 79 06 	call	0xcf2	; 0xcf2 <xputs>
    print_decs(mouse_report.x); print(" ");
    469e:	80 91 17 03 	lds	r24, 0x0317	; 0x800317 <mouse_report+0x1>
    46a2:	28 2f       	mov	r18, r24
    46a4:	08 2e       	mov	r0, r24
    46a6:	00 0c       	add	r0, r0
    46a8:	33 0b       	sbc	r19, r19
    46aa:	3f 93       	push	r19
    46ac:	8f 93       	push	r24
    46ae:	87 ed       	ldi	r24, 0xD7	; 215
    46b0:	94 e0       	ldi	r25, 0x04	; 4
    46b2:	9f 93       	push	r25
    46b4:	8f 93       	push	r24
    46b6:	0e 94 12 07 	call	0xe24	; 0xe24 <__xprintf>
    46ba:	85 ed       	ldi	r24, 0xD5	; 213
    46bc:	94 e0       	ldi	r25, 0x04	; 4
    46be:	0e 94 79 06 	call	0xcf2	; 0xcf2 <xputs>
    print_decs(mouse_report.y); print(" ");
    46c2:	80 91 18 03 	lds	r24, 0x0318	; 0x800318 <mouse_report+0x2>
    46c6:	28 2f       	mov	r18, r24
    46c8:	08 2e       	mov	r0, r24
    46ca:	00 0c       	add	r0, r0
    46cc:	33 0b       	sbc	r19, r19
    46ce:	3f 93       	push	r19
    46d0:	8f 93       	push	r24
    46d2:	82 ed       	ldi	r24, 0xD2	; 210
    46d4:	94 e0       	ldi	r25, 0x04	; 4
    46d6:	9f 93       	push	r25
    46d8:	8f 93       	push	r24
    46da:	0e 94 12 07 	call	0xe24	; 0xe24 <__xprintf>
    46de:	80 ed       	ldi	r24, 0xD0	; 208
    46e0:	94 e0       	ldi	r25, 0x04	; 4
    46e2:	0e 94 79 06 	call	0xcf2	; 0xcf2 <xputs>
    print_decs(mouse_report.v); print(" ");
    46e6:	80 91 19 03 	lds	r24, 0x0319	; 0x800319 <mouse_report+0x3>
    46ea:	28 2f       	mov	r18, r24
    46ec:	08 2e       	mov	r0, r24
    46ee:	00 0c       	add	r0, r0
    46f0:	33 0b       	sbc	r19, r19
    46f2:	3f 93       	push	r19
    46f4:	8f 93       	push	r24
    46f6:	8d ec       	ldi	r24, 0xCD	; 205
    46f8:	94 e0       	ldi	r25, 0x04	; 4
    46fa:	9f 93       	push	r25
    46fc:	8f 93       	push	r24
    46fe:	0e 94 12 07 	call	0xe24	; 0xe24 <__xprintf>
    4702:	8b ec       	ldi	r24, 0xCB	; 203
    4704:	94 e0       	ldi	r25, 0x04	; 4
    4706:	0e 94 79 06 	call	0xcf2	; 0xcf2 <xputs>
    print_decs(mouse_report.h); print("](");
    470a:	80 91 1a 03 	lds	r24, 0x031A	; 0x80031a <mouse_report+0x4>
    470e:	28 2f       	mov	r18, r24
    4710:	08 2e       	mov	r0, r24
    4712:	00 0c       	add	r0, r0
    4714:	33 0b       	sbc	r19, r19
    4716:	3f 93       	push	r19
    4718:	8f 93       	push	r24
    471a:	88 ec       	ldi	r24, 0xC8	; 200
    471c:	94 e0       	ldi	r25, 0x04	; 4
    471e:	9f 93       	push	r25
    4720:	8f 93       	push	r24
    4722:	0e 94 12 07 	call	0xe24	; 0xe24 <__xprintf>
    4726:	85 ec       	ldi	r24, 0xC5	; 197
    4728:	94 e0       	ldi	r25, 0x04	; 4
    472a:	0e 94 79 06 	call	0xcf2	; 0xcf2 <xputs>
    print_dec(mousekey_repeat); print("/");
    472e:	80 91 15 03 	lds	r24, 0x0315	; 0x800315 <mousekey_repeat>
    4732:	1f 92       	push	r1
    4734:	8f 93       	push	r24
    4736:	82 ec       	ldi	r24, 0xC2	; 194
    4738:	94 e0       	ldi	r25, 0x04	; 4
    473a:	9f 93       	push	r25
    473c:	8f 93       	push	r24
    473e:	0e 94 12 07 	call	0xe24	; 0xe24 <__xprintf>
    4742:	80 ec       	ldi	r24, 0xC0	; 192
    4744:	94 e0       	ldi	r25, 0x04	; 4
    4746:	0e 94 79 06 	call	0xcf2	; 0xcf2 <xputs>
    print_dec(mousekey_accel); print(")\n");
    474a:	80 91 14 03 	lds	r24, 0x0314	; 0x800314 <mousekey_accel>
    474e:	1f 92       	push	r1
    4750:	8f 93       	push	r24
    4752:	8d eb       	ldi	r24, 0xBD	; 189
    4754:	94 e0       	ldi	r25, 0x04	; 4
    4756:	9f 93       	push	r25
    4758:	8f 93       	push	r24
    475a:	0e 94 12 07 	call	0xe24	; 0xe24 <__xprintf>
    475e:	8a eb       	ldi	r24, 0xBA	; 186
    4760:	94 e0       	ldi	r25, 0x04	; 4
    4762:	0e 94 79 06 	call	0xcf2	; 0xcf2 <xputs>
    4766:	8d b7       	in	r24, 0x3d	; 61
    4768:	9e b7       	in	r25, 0x3e	; 62
    476a:	4c 96       	adiw	r24, 0x1c	; 28
    476c:	0f b6       	in	r0, 0x3f	; 63
    476e:	f8 94       	cli
    4770:	9e bf       	out	0x3e, r25	; 62
    4772:	0f be       	out	0x3f, r0	; 63
    4774:	8d bf       	out	0x3d, r24	; 61
}

void mousekey_send(void)
{
    mousekey_debug();
    host_mouse_send(&mouse_report);
    4776:	86 e1       	ldi	r24, 0x16	; 22
    4778:	93 e0       	ldi	r25, 0x03	; 3
    477a:	0e 94 a4 10 	call	0x2148	; 0x2148 <host_mouse_send>
    last_timer = timer_read();
    477e:	0e 94 3f 1e 	call	0x3c7e	; 0x3c7e <timer_read>
    4782:	90 93 13 03 	sts	0x0313, r25	; 0x800313 <last_timer+0x1>
    4786:	80 93 12 03 	sts	0x0312, r24	; 0x800312 <last_timer>
    478a:	08 95       	ret

0000478c <mousekey_task>:
    }
    return (unit > MOUSEKEY_WHEEL_MAX ? MOUSEKEY_WHEEL_MAX : (unit == 0 ? 1 : unit));
}

void mousekey_task(void)
{
    478c:	1f 93       	push	r17
    478e:	cf 93       	push	r28
    4790:	df 93       	push	r29
    if (timer_elapsed(last_timer) < (mousekey_repeat ? mk_interval : mk_delay*10))
    4792:	80 91 12 03 	lds	r24, 0x0312	; 0x800312 <last_timer>
    4796:	90 91 13 03 	lds	r25, 0x0313	; 0x800313 <last_timer+0x1>
    479a:	0e 94 57 1e 	call	0x3cae	; 0x3cae <timer_elapsed>
    479e:	ac 01       	movw	r20, r24
    47a0:	90 91 15 03 	lds	r25, 0x0315	; 0x800315 <mousekey_repeat>
    47a4:	99 23       	and	r25, r25
    47a6:	21 f0       	breq	.+8      	; 0x47b0 <mousekey_task+0x24>
    47a8:	20 91 18 01 	lds	r18, 0x0118	; 0x800118 <mk_interval>
    47ac:	30 e0       	ldi	r19, 0x00	; 0
    47ae:	06 c0       	rjmp	.+12     	; 0x47bc <mousekey_task+0x30>
    47b0:	20 91 19 01 	lds	r18, 0x0119	; 0x800119 <mk_delay>
    47b4:	8a e0       	ldi	r24, 0x0A	; 10
    47b6:	28 9f       	mul	r18, r24
    47b8:	90 01       	movw	r18, r0
    47ba:	11 24       	eor	r1, r1
    47bc:	42 17       	cp	r20, r18
    47be:	53 07       	cpc	r21, r19
    47c0:	08 f4       	brcc	.+2      	; 0x47c4 <mousekey_task+0x38>
    47c2:	85 c0       	rjmp	.+266    	; 0x48ce <mousekey_task+0x142>
        return;

    if (mouse_report.x == 0 && mouse_report.y == 0 && mouse_report.v == 0 && mouse_report.h == 0)
    47c4:	80 91 17 03 	lds	r24, 0x0317	; 0x800317 <mouse_report+0x1>
    47c8:	c0 91 18 03 	lds	r28, 0x0318	; 0x800318 <mouse_report+0x2>
    47cc:	d0 91 19 03 	lds	r29, 0x0319	; 0x800319 <mouse_report+0x3>
    47d0:	10 91 1a 03 	lds	r17, 0x031A	; 0x80031a <mouse_report+0x4>
    47d4:	81 11       	cpse	r24, r1
    47d6:	07 c0       	rjmp	.+14     	; 0x47e6 <mousekey_task+0x5a>
    47d8:	c1 11       	cpse	r28, r1
    47da:	75 c0       	rjmp	.+234    	; 0x48c6 <mousekey_task+0x13a>
    47dc:	d1 11       	cpse	r29, r1
    47de:	73 c0       	rjmp	.+230    	; 0x48c6 <mousekey_task+0x13a>
    47e0:	11 11       	cpse	r17, r1
    47e2:	71 c0       	rjmp	.+226    	; 0x48c6 <mousekey_task+0x13a>
    47e4:	74 c0       	rjmp	.+232    	; 0x48ce <mousekey_task+0x142>
        return;

    if (mousekey_repeat != UINT8_MAX)
    47e6:	9f 3f       	cpi	r25, 0xFF	; 255
    47e8:	19 f0       	breq	.+6      	; 0x47f0 <mousekey_task+0x64>
        mousekey_repeat++;
    47ea:	9f 5f       	subi	r25, 0xFF	; 255
    47ec:	90 93 15 03 	sts	0x0315, r25	; 0x800315 <mousekey_repeat>


    if (mouse_report.x > 0) mouse_report.x = move_unit();
    47f0:	18 16       	cp	r1, r24
    47f2:	24 f4       	brge	.+8      	; 0x47fc <mousekey_task+0x70>
    47f4:	0e 94 ca 21 	call	0x4394	; 0x4394 <move_unit>
    47f8:	80 93 17 03 	sts	0x0317, r24	; 0x800317 <mouse_report+0x1>
    if (mouse_report.x < 0) mouse_report.x = move_unit() * -1;
    47fc:	80 91 17 03 	lds	r24, 0x0317	; 0x800317 <mouse_report+0x1>
    4800:	87 ff       	sbrs	r24, 7
    4802:	05 c0       	rjmp	.+10     	; 0x480e <mousekey_task+0x82>
    4804:	0e 94 ca 21 	call	0x4394	; 0x4394 <move_unit>
    4808:	81 95       	neg	r24
    480a:	80 93 17 03 	sts	0x0317, r24	; 0x800317 <mouse_report+0x1>
    if (mouse_report.y > 0) mouse_report.y = move_unit();
    480e:	1c 16       	cp	r1, r28
    4810:	24 f4       	brge	.+8      	; 0x481a <mousekey_task+0x8e>
    4812:	0e 94 ca 21 	call	0x4394	; 0x4394 <move_unit>
    4816:	80 93 18 03 	sts	0x0318, r24	; 0x800318 <mouse_report+0x2>
    if (mouse_report.y < 0) mouse_report.y = move_unit() * -1;
    481a:	80 91 18 03 	lds	r24, 0x0318	; 0x800318 <mouse_report+0x2>
    481e:	87 ff       	sbrs	r24, 7
    4820:	05 c0       	rjmp	.+10     	; 0x482c <mousekey_task+0xa0>
    4822:	0e 94 ca 21 	call	0x4394	; 0x4394 <move_unit>
    4826:	81 95       	neg	r24
    4828:	80 93 18 03 	sts	0x0318, r24	; 0x800318 <mouse_report+0x2>

    /* diagonal move [1/sqrt(2) = 0.7] */
    if (mouse_report.x && mouse_report.y) {
    482c:	60 91 17 03 	lds	r22, 0x0317	; 0x800317 <mouse_report+0x1>
    4830:	66 23       	and	r22, r22
    4832:	31 f1       	breq	.+76     	; 0x4880 <mousekey_task+0xf4>
    4834:	c0 91 18 03 	lds	r28, 0x0318	; 0x800318 <mouse_report+0x2>
    4838:	cc 23       	and	r28, r28
    483a:	11 f1       	breq	.+68     	; 0x4880 <mousekey_task+0xf4>
        mouse_report.x *= 0.7;
    483c:	06 2e       	mov	r0, r22
    483e:	00 0c       	add	r0, r0
    4840:	77 0b       	sbc	r23, r23
    4842:	88 0b       	sbc	r24, r24
    4844:	99 0b       	sbc	r25, r25
    4846:	0e 94 d3 29 	call	0x53a6	; 0x53a6 <__floatsisf>
    484a:	23 e3       	ldi	r18, 0x33	; 51
    484c:	33 e3       	ldi	r19, 0x33	; 51
    484e:	43 e3       	ldi	r20, 0x33	; 51
    4850:	5f e3       	ldi	r21, 0x3F	; 63
    4852:	0e 94 37 2a 	call	0x546e	; 0x546e <__mulsf3>
    4856:	0e 94 9b 29 	call	0x5336	; 0x5336 <__fixsfsi>
    485a:	60 93 17 03 	sts	0x0317, r22	; 0x800317 <mouse_report+0x1>
        mouse_report.y *= 0.7;
    485e:	6c 2f       	mov	r22, r28
    4860:	cc 0f       	add	r28, r28
    4862:	77 0b       	sbc	r23, r23
    4864:	88 0b       	sbc	r24, r24
    4866:	99 0b       	sbc	r25, r25
    4868:	0e 94 d3 29 	call	0x53a6	; 0x53a6 <__floatsisf>
    486c:	23 e3       	ldi	r18, 0x33	; 51
    486e:	33 e3       	ldi	r19, 0x33	; 51
    4870:	43 e3       	ldi	r20, 0x33	; 51
    4872:	5f e3       	ldi	r21, 0x3F	; 63
    4874:	0e 94 37 2a 	call	0x546e	; 0x546e <__mulsf3>
    4878:	0e 94 9b 29 	call	0x5336	; 0x5336 <__fixsfsi>
    487c:	60 93 18 03 	sts	0x0318, r22	; 0x800318 <mouse_report+0x2>
    }

    if (mouse_report.v > 0) mouse_report.v = wheel_unit();
    4880:	1d 16       	cp	r1, r29
    4882:	24 f4       	brge	.+8      	; 0x488c <mousekey_task+0x100>
    4884:	0e 94 13 22 	call	0x4426	; 0x4426 <wheel_unit>
    4888:	80 93 19 03 	sts	0x0319, r24	; 0x800319 <mouse_report+0x3>
    if (mouse_report.v < 0) mouse_report.v = wheel_unit() * -1;
    488c:	80 91 19 03 	lds	r24, 0x0319	; 0x800319 <mouse_report+0x3>
    4890:	87 ff       	sbrs	r24, 7
    4892:	05 c0       	rjmp	.+10     	; 0x489e <mousekey_task+0x112>
    4894:	0e 94 13 22 	call	0x4426	; 0x4426 <wheel_unit>
    4898:	81 95       	neg	r24
    489a:	80 93 19 03 	sts	0x0319, r24	; 0x800319 <mouse_report+0x3>
    if (mouse_report.h > 0) mouse_report.h = wheel_unit();
    489e:	11 16       	cp	r1, r17
    48a0:	24 f4       	brge	.+8      	; 0x48aa <mousekey_task+0x11e>
    48a2:	0e 94 13 22 	call	0x4426	; 0x4426 <wheel_unit>
    48a6:	80 93 1a 03 	sts	0x031A, r24	; 0x80031a <mouse_report+0x4>
    if (mouse_report.h < 0) mouse_report.h = wheel_unit() * -1;
    48aa:	80 91 1a 03 	lds	r24, 0x031A	; 0x80031a <mouse_report+0x4>
    48ae:	87 ff       	sbrs	r24, 7
    48b0:	05 c0       	rjmp	.+10     	; 0x48bc <mousekey_task+0x130>
    48b2:	0e 94 13 22 	call	0x4426	; 0x4426 <wheel_unit>
    48b6:	81 95       	neg	r24
    48b8:	80 93 1a 03 	sts	0x031A, r24	; 0x80031a <mouse_report+0x4>

    mousekey_send();
}
    48bc:	df 91       	pop	r29
    48be:	cf 91       	pop	r28
    48c0:	1f 91       	pop	r17
    if (mouse_report.v > 0) mouse_report.v = wheel_unit();
    if (mouse_report.v < 0) mouse_report.v = wheel_unit() * -1;
    if (mouse_report.h > 0) mouse_report.h = wheel_unit();
    if (mouse_report.h < 0) mouse_report.h = wheel_unit() * -1;

    mousekey_send();
    48c2:	0c 94 39 23 	jmp	0x4672	; 0x4672 <mousekey_send>
        return;

    if (mouse_report.x == 0 && mouse_report.y == 0 && mouse_report.v == 0 && mouse_report.h == 0)
        return;

    if (mousekey_repeat != UINT8_MAX)
    48c6:	9f 3f       	cpi	r25, 0xFF	; 255
    48c8:	09 f0       	breq	.+2      	; 0x48cc <mousekey_task+0x140>
    48ca:	8f cf       	rjmp	.-226    	; 0x47ea <mousekey_task+0x5e>
    48cc:	a0 cf       	rjmp	.-192    	; 0x480e <mousekey_task+0x82>
    if (mouse_report.v < 0) mouse_report.v = wheel_unit() * -1;
    if (mouse_report.h > 0) mouse_report.h = wheel_unit();
    if (mouse_report.h < 0) mouse_report.h = wheel_unit() * -1;

    mousekey_send();
}
    48ce:	df 91       	pop	r29
    48d0:	cf 91       	pop	r28
    48d2:	1f 91       	pop	r17
    48d4:	08 95       	ret

000048d6 <mousekey_clear>:
    last_timer = timer_read();
}

void mousekey_clear(void)
{
    mouse_report = (report_mouse_t){};
    48d6:	e6 e1       	ldi	r30, 0x16	; 22
    48d8:	f3 e0       	ldi	r31, 0x03	; 3
    48da:	85 e0       	ldi	r24, 0x05	; 5
    48dc:	df 01       	movw	r26, r30
    48de:	1d 92       	st	X+, r1
    48e0:	8a 95       	dec	r24
    48e2:	e9 f7       	brne	.-6      	; 0x48de <mousekey_clear+0x8>
    mousekey_repeat = 0;
    48e4:	10 92 15 03 	sts	0x0315, r1	; 0x800315 <mousekey_repeat>
    mousekey_accel = 0;
    48e8:	10 92 14 03 	sts	0x0314, r1	; 0x800314 <mousekey_accel>
    48ec:	08 95       	ret

000048ee <mousekey_console_help>:
    }
}

static void mousekey_console_help(void)
{
    print("\n\t- Mousekey -\n"
    48ee:	84 e0       	ldi	r24, 0x04	; 4
    48f0:	97 e0       	ldi	r25, 0x07	; 7
    48f2:	0e 94 79 06 	call	0xcf2	; 0xcf2 <xputs>
          "down:	-1\n"
          "pgup:	+10\n"
          "pgdown:	-10\n"
          "\n"
          "speed = delta * max_speed * (repeat / time_to_max)\n");
    xprintf("where delta: cursor=%d, wheel=%d\n" 
    48f6:	1f 92       	push	r1
    48f8:	81 e0       	ldi	r24, 0x01	; 1
    48fa:	8f 93       	push	r24
    48fc:	1f 92       	push	r1
    48fe:	85 e0       	ldi	r24, 0x05	; 5
    4900:	8f 93       	push	r24
    4902:	86 eb       	ldi	r24, 0xB6	; 182
    4904:	96 e0       	ldi	r25, 0x06	; 6
    4906:	9f 93       	push	r25
    4908:	8f 93       	push	r24
    490a:	0e 94 12 07 	call	0xe24	; 0xe24 <__xprintf>
            "See http://en.wikipedia.org/wiki/Mouse_keys\n", MOUSEKEY_MOVE_DELTA,  MOUSEKEY_WHEEL_DELTA);
}
    490e:	0f 90       	pop	r0
    4910:	0f 90       	pop	r0
    4912:	0f 90       	pop	r0
    4914:	0f 90       	pop	r0
    4916:	0f 90       	pop	r0
    4918:	0f 90       	pop	r0
    491a:	08 95       	ret

0000491c <mousekey_param_inc>:

//#define PRINT_SET_VAL(v)  print(#v " = "); print_dec(v); print("\n");
#define PRINT_SET_VAL(v)  xprintf(#v " = %d\n", (v))
static void mousekey_param_inc(uint8_t param, uint8_t inc)
{
    switch (param) {
    491c:	83 30       	cpi	r24, 0x03	; 3
    491e:	e9 f1       	breq	.+122    	; 0x499a <mousekey_param_inc+0x7e>
    4920:	28 f4       	brcc	.+10     	; 0x492c <mousekey_param_inc+0x10>
    4922:	81 30       	cpi	r24, 0x01	; 1
    4924:	61 f0       	breq	.+24     	; 0x493e <mousekey_param_inc+0x22>
    4926:	82 30       	cpi	r24, 0x02	; 2
    4928:	09 f1       	breq	.+66     	; 0x496c <mousekey_param_inc+0x50>
    492a:	08 95       	ret
    492c:	85 30       	cpi	r24, 0x05	; 5
    492e:	09 f4       	brne	.+2      	; 0x4932 <mousekey_param_inc+0x16>
    4930:	62 c0       	rjmp	.+196    	; 0x49f6 <mousekey_param_inc+0xda>
    4932:	08 f4       	brcc	.+2      	; 0x4936 <mousekey_param_inc+0x1a>
    4934:	49 c0       	rjmp	.+146    	; 0x49c8 <mousekey_param_inc+0xac>
    4936:	86 30       	cpi	r24, 0x06	; 6
    4938:	09 f4       	brne	.+2      	; 0x493c <mousekey_param_inc+0x20>
    493a:	74 c0       	rjmp	.+232    	; 0x4a24 <mousekey_param_inc+0x108>
    493c:	08 95       	ret
        case 1:
            if (mk_delay + inc < UINT8_MAX)
    493e:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <mk_delay>
    4942:	26 2f       	mov	r18, r22
    4944:	30 e0       	ldi	r19, 0x00	; 0
    4946:	28 0f       	add	r18, r24
    4948:	31 1d       	adc	r19, r1
    494a:	2f 3f       	cpi	r18, 0xFF	; 255
    494c:	31 05       	cpc	r19, r1
    494e:	24 f4       	brge	.+8      	; 0x4958 <mousekey_param_inc+0x3c>
                mk_delay += inc;
    4950:	68 0f       	add	r22, r24
    4952:	60 93 19 01 	sts	0x0119, r22	; 0x800119 <mk_delay>
    4956:	03 c0       	rjmp	.+6      	; 0x495e <mousekey_param_inc+0x42>
            else
                mk_delay = UINT8_MAX;
    4958:	8f ef       	ldi	r24, 0xFF	; 255
    495a:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <mk_delay>
            PRINT_SET_VAL(mk_delay);
    495e:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <mk_delay>
    4962:	1f 92       	push	r1
    4964:	8f 93       	push	r24
    4966:	8f ee       	ldi	r24, 0xEF	; 239
    4968:	95 e0       	ldi	r25, 0x05	; 5
    496a:	72 c0       	rjmp	.+228    	; 0x4a50 <mousekey_param_inc+0x134>
            break;
        case 2:
            if (mk_interval + inc < UINT8_MAX)
    496c:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <mk_interval>
    4970:	26 2f       	mov	r18, r22
    4972:	30 e0       	ldi	r19, 0x00	; 0
    4974:	28 0f       	add	r18, r24
    4976:	31 1d       	adc	r19, r1
    4978:	2f 3f       	cpi	r18, 0xFF	; 255
    497a:	31 05       	cpc	r19, r1
    497c:	24 f4       	brge	.+8      	; 0x4986 <mousekey_param_inc+0x6a>
                mk_interval += inc;
    497e:	68 0f       	add	r22, r24
    4980:	60 93 18 01 	sts	0x0118, r22	; 0x800118 <mk_interval>
    4984:	03 c0       	rjmp	.+6      	; 0x498c <mousekey_param_inc+0x70>
            else
                mk_interval = UINT8_MAX;
    4986:	8f ef       	ldi	r24, 0xFF	; 255
    4988:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <mk_interval>
            PRINT_SET_VAL(mk_interval);
    498c:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <mk_interval>
    4990:	1f 92       	push	r1
    4992:	8f 93       	push	r24
    4994:	8d ed       	ldi	r24, 0xDD	; 221
    4996:	95 e0       	ldi	r25, 0x05	; 5
    4998:	5b c0       	rjmp	.+182    	; 0x4a50 <mousekey_param_inc+0x134>
            break;
        case 3:
            if (mk_max_speed + inc < UINT8_MAX)
    499a:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <mk_max_speed>
    499e:	26 2f       	mov	r18, r22
    49a0:	30 e0       	ldi	r19, 0x00	; 0
    49a2:	28 0f       	add	r18, r24
    49a4:	31 1d       	adc	r19, r1
    49a6:	2f 3f       	cpi	r18, 0xFF	; 255
    49a8:	31 05       	cpc	r19, r1
    49aa:	24 f4       	brge	.+8      	; 0x49b4 <mousekey_param_inc+0x98>
                mk_max_speed += inc;
    49ac:	68 0f       	add	r22, r24
    49ae:	60 93 17 01 	sts	0x0117, r22	; 0x800117 <mk_max_speed>
    49b2:	03 c0       	rjmp	.+6      	; 0x49ba <mousekey_param_inc+0x9e>
            else
                mk_max_speed = UINT8_MAX;
    49b4:	8f ef       	ldi	r24, 0xFF	; 255
    49b6:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <mk_max_speed>
            PRINT_SET_VAL(mk_max_speed);
    49ba:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <mk_max_speed>
    49be:	1f 92       	push	r1
    49c0:	8f 93       	push	r24
    49c2:	8a ec       	ldi	r24, 0xCA	; 202
    49c4:	95 e0       	ldi	r25, 0x05	; 5
    49c6:	44 c0       	rjmp	.+136    	; 0x4a50 <mousekey_param_inc+0x134>
            break;
        case 4:
            if (mk_time_to_max + inc < UINT8_MAX)
    49c8:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <mk_time_to_max>
    49cc:	26 2f       	mov	r18, r22
    49ce:	30 e0       	ldi	r19, 0x00	; 0
    49d0:	28 0f       	add	r18, r24
    49d2:	31 1d       	adc	r19, r1
    49d4:	2f 3f       	cpi	r18, 0xFF	; 255
    49d6:	31 05       	cpc	r19, r1
    49d8:	24 f4       	brge	.+8      	; 0x49e2 <mousekey_param_inc+0xc6>
                mk_time_to_max += inc;
    49da:	68 0f       	add	r22, r24
    49dc:	60 93 16 01 	sts	0x0116, r22	; 0x800116 <mk_time_to_max>
    49e0:	03 c0       	rjmp	.+6      	; 0x49e8 <mousekey_param_inc+0xcc>
            else
                mk_time_to_max = UINT8_MAX;
    49e2:	8f ef       	ldi	r24, 0xFF	; 255
    49e4:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <mk_time_to_max>
            PRINT_SET_VAL(mk_time_to_max);
    49e8:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <mk_time_to_max>
    49ec:	1f 92       	push	r1
    49ee:	8f 93       	push	r24
    49f0:	85 eb       	ldi	r24, 0xB5	; 181
    49f2:	95 e0       	ldi	r25, 0x05	; 5
    49f4:	2d c0       	rjmp	.+90     	; 0x4a50 <mousekey_param_inc+0x134>
            break;
        case 5:
            if (mk_wheel_max_speed + inc < UINT8_MAX)
    49f6:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <mk_wheel_max_speed>
    49fa:	26 2f       	mov	r18, r22
    49fc:	30 e0       	ldi	r19, 0x00	; 0
    49fe:	28 0f       	add	r18, r24
    4a00:	31 1d       	adc	r19, r1
    4a02:	2f 3f       	cpi	r18, 0xFF	; 255
    4a04:	31 05       	cpc	r19, r1
    4a06:	24 f4       	brge	.+8      	; 0x4a10 <mousekey_param_inc+0xf4>
                mk_wheel_max_speed += inc;
    4a08:	68 0f       	add	r22, r24
    4a0a:	60 93 15 01 	sts	0x0115, r22	; 0x800115 <mk_wheel_max_speed>
    4a0e:	03 c0       	rjmp	.+6      	; 0x4a16 <mousekey_param_inc+0xfa>
            else
                mk_wheel_max_speed = UINT8_MAX;
    4a10:	8f ef       	ldi	r24, 0xFF	; 255
    4a12:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <mk_wheel_max_speed>
            PRINT_SET_VAL(mk_wheel_max_speed);
    4a16:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <mk_wheel_max_speed>
    4a1a:	1f 92       	push	r1
    4a1c:	8f 93       	push	r24
    4a1e:	8c e9       	ldi	r24, 0x9C	; 156
    4a20:	95 e0       	ldi	r25, 0x05	; 5
    4a22:	16 c0       	rjmp	.+44     	; 0x4a50 <mousekey_param_inc+0x134>
            break;
        case 6:
            if (mk_wheel_time_to_max + inc < UINT8_MAX)
    4a24:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <mk_wheel_time_to_max>
    4a28:	26 2f       	mov	r18, r22
    4a2a:	30 e0       	ldi	r19, 0x00	; 0
    4a2c:	28 0f       	add	r18, r24
    4a2e:	31 1d       	adc	r19, r1
    4a30:	2f 3f       	cpi	r18, 0xFF	; 255
    4a32:	31 05       	cpc	r19, r1
    4a34:	24 f4       	brge	.+8      	; 0x4a3e <mousekey_param_inc+0x122>
                mk_wheel_time_to_max += inc;
    4a36:	68 0f       	add	r22, r24
    4a38:	60 93 14 01 	sts	0x0114, r22	; 0x800114 <mk_wheel_time_to_max>
    4a3c:	03 c0       	rjmp	.+6      	; 0x4a44 <mousekey_param_inc+0x128>
            else
                mk_wheel_time_to_max = UINT8_MAX;
    4a3e:	8f ef       	ldi	r24, 0xFF	; 255
    4a40:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <mk_wheel_time_to_max>
            PRINT_SET_VAL(mk_wheel_time_to_max);
    4a44:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <mk_wheel_time_to_max>
    4a48:	1f 92       	push	r1
    4a4a:	8f 93       	push	r24
    4a4c:	81 e8       	ldi	r24, 0x81	; 129
    4a4e:	95 e0       	ldi	r25, 0x05	; 5
    4a50:	9f 93       	push	r25
    4a52:	8f 93       	push	r24
    4a54:	0e 94 12 07 	call	0xe24	; 0xe24 <__xprintf>
            break;
    4a58:	0f 90       	pop	r0
    4a5a:	0f 90       	pop	r0
    4a5c:	0f 90       	pop	r0
    4a5e:	0f 90       	pop	r0
    4a60:	08 95       	ret

00004a62 <mousekey_param_dec>:
    }
}

static void mousekey_param_dec(uint8_t param, uint8_t dec)
{
    switch (param) {
    4a62:	83 30       	cpi	r24, 0x03	; 3
    4a64:	81 f1       	breq	.+96     	; 0x4ac6 <mousekey_param_dec+0x64>
    4a66:	28 f4       	brcc	.+10     	; 0x4a72 <mousekey_param_dec+0x10>
    4a68:	81 30       	cpi	r24, 0x01	; 1
    4a6a:	59 f0       	breq	.+22     	; 0x4a82 <mousekey_param_dec+0x20>
    4a6c:	82 30       	cpi	r24, 0x02	; 2
    4a6e:	d1 f0       	breq	.+52     	; 0x4aa4 <mousekey_param_dec+0x42>
    4a70:	08 95       	ret
    4a72:	85 30       	cpi	r24, 0x05	; 5
    4a74:	09 f4       	brne	.+2      	; 0x4a78 <mousekey_param_dec+0x16>
    4a76:	49 c0       	rjmp	.+146    	; 0x4b0a <mousekey_param_dec+0xa8>
    4a78:	b8 f1       	brcs	.+110    	; 0x4ae8 <mousekey_param_dec+0x86>
    4a7a:	86 30       	cpi	r24, 0x06	; 6
    4a7c:	09 f4       	brne	.+2      	; 0x4a80 <mousekey_param_dec+0x1e>
    4a7e:	56 c0       	rjmp	.+172    	; 0x4b2c <mousekey_param_dec+0xca>
    4a80:	08 95       	ret
        case 1:
            if (mk_delay > dec)
    4a82:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <mk_delay>
    4a86:	68 17       	cp	r22, r24
    4a88:	20 f4       	brcc	.+8      	; 0x4a92 <mousekey_param_dec+0x30>
                mk_delay -= dec;
    4a8a:	86 1b       	sub	r24, r22
    4a8c:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <mk_delay>
    4a90:	02 c0       	rjmp	.+4      	; 0x4a96 <mousekey_param_dec+0x34>
            else
                mk_delay = 0;
    4a92:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <mk_delay>
            PRINT_SET_VAL(mk_delay);
    4a96:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <mk_delay>
    4a9a:	1f 92       	push	r1
    4a9c:	8f 93       	push	r24
    4a9e:	82 e7       	ldi	r24, 0x72	; 114
    4aa0:	95 e0       	ldi	r25, 0x05	; 5
    4aa2:	54 c0       	rjmp	.+168    	; 0x4b4c <mousekey_param_dec+0xea>
            break;
        case 2:
            if (mk_interval > dec)
    4aa4:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <mk_interval>
    4aa8:	68 17       	cp	r22, r24
    4aaa:	20 f4       	brcc	.+8      	; 0x4ab4 <mousekey_param_dec+0x52>
                mk_interval -= dec;
    4aac:	86 1b       	sub	r24, r22
    4aae:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <mk_interval>
    4ab2:	02 c0       	rjmp	.+4      	; 0x4ab8 <mousekey_param_dec+0x56>
            else
                mk_interval = 0;
    4ab4:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <mk_interval>
            PRINT_SET_VAL(mk_interval);
    4ab8:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <mk_interval>
    4abc:	1f 92       	push	r1
    4abe:	8f 93       	push	r24
    4ac0:	80 e6       	ldi	r24, 0x60	; 96
    4ac2:	95 e0       	ldi	r25, 0x05	; 5
    4ac4:	43 c0       	rjmp	.+134    	; 0x4b4c <mousekey_param_dec+0xea>
            break;
        case 3:
            if (mk_max_speed > dec)
    4ac6:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <mk_max_speed>
    4aca:	68 17       	cp	r22, r24
    4acc:	20 f4       	brcc	.+8      	; 0x4ad6 <mousekey_param_dec+0x74>
                mk_max_speed -= dec;
    4ace:	86 1b       	sub	r24, r22
    4ad0:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <mk_max_speed>
    4ad4:	02 c0       	rjmp	.+4      	; 0x4ada <mousekey_param_dec+0x78>
            else
                mk_max_speed = 0;
    4ad6:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <mk_max_speed>
            PRINT_SET_VAL(mk_max_speed);
    4ada:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <mk_max_speed>
    4ade:	1f 92       	push	r1
    4ae0:	8f 93       	push	r24
    4ae2:	8d e4       	ldi	r24, 0x4D	; 77
    4ae4:	95 e0       	ldi	r25, 0x05	; 5
    4ae6:	32 c0       	rjmp	.+100    	; 0x4b4c <mousekey_param_dec+0xea>
            break;
        case 4:
            if (mk_time_to_max > dec)
    4ae8:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <mk_time_to_max>
    4aec:	68 17       	cp	r22, r24
    4aee:	20 f4       	brcc	.+8      	; 0x4af8 <mousekey_param_dec+0x96>
                mk_time_to_max -= dec;
    4af0:	86 1b       	sub	r24, r22
    4af2:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <mk_time_to_max>
    4af6:	02 c0       	rjmp	.+4      	; 0x4afc <mousekey_param_dec+0x9a>
            else
                mk_time_to_max = 0;
    4af8:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <mk_time_to_max>
            PRINT_SET_VAL(mk_time_to_max);
    4afc:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <mk_time_to_max>
    4b00:	1f 92       	push	r1
    4b02:	8f 93       	push	r24
    4b04:	88 e3       	ldi	r24, 0x38	; 56
    4b06:	95 e0       	ldi	r25, 0x05	; 5
    4b08:	21 c0       	rjmp	.+66     	; 0x4b4c <mousekey_param_dec+0xea>
            break;
        case 5:
            if (mk_wheel_max_speed > dec)
    4b0a:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <mk_wheel_max_speed>
    4b0e:	68 17       	cp	r22, r24
    4b10:	20 f4       	brcc	.+8      	; 0x4b1a <mousekey_param_dec+0xb8>
                mk_wheel_max_speed -= dec;
    4b12:	86 1b       	sub	r24, r22
    4b14:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <mk_wheel_max_speed>
    4b18:	02 c0       	rjmp	.+4      	; 0x4b1e <mousekey_param_dec+0xbc>
            else
                mk_wheel_max_speed = 0;
    4b1a:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <mk_wheel_max_speed>
            PRINT_SET_VAL(mk_wheel_max_speed);
    4b1e:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <mk_wheel_max_speed>
    4b22:	1f 92       	push	r1
    4b24:	8f 93       	push	r24
    4b26:	8f e1       	ldi	r24, 0x1F	; 31
    4b28:	95 e0       	ldi	r25, 0x05	; 5
    4b2a:	10 c0       	rjmp	.+32     	; 0x4b4c <mousekey_param_dec+0xea>
            break;
        case 6:
            if (mk_wheel_time_to_max > dec)
    4b2c:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <mk_wheel_time_to_max>
    4b30:	68 17       	cp	r22, r24
    4b32:	20 f4       	brcc	.+8      	; 0x4b3c <mousekey_param_dec+0xda>
                mk_wheel_time_to_max -= dec;
    4b34:	86 1b       	sub	r24, r22
    4b36:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <mk_wheel_time_to_max>
    4b3a:	02 c0       	rjmp	.+4      	; 0x4b40 <mousekey_param_dec+0xde>
            else
                mk_wheel_time_to_max = 0;
    4b3c:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <mk_wheel_time_to_max>
            PRINT_SET_VAL(mk_wheel_time_to_max);
    4b40:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <mk_wheel_time_to_max>
    4b44:	1f 92       	push	r1
    4b46:	8f 93       	push	r24
    4b48:	84 e0       	ldi	r24, 0x04	; 4
    4b4a:	95 e0       	ldi	r25, 0x05	; 5
    4b4c:	9f 93       	push	r25
    4b4e:	8f 93       	push	r24
    4b50:	0e 94 12 07 	call	0xe24	; 0xe24 <__xprintf>
            break;
    4b54:	0f 90       	pop	r0
    4b56:	0f 90       	pop	r0
    4b58:	0f 90       	pop	r0
    4b5a:	0f 90       	pop	r0
    4b5c:	08 95       	ret

00004b5e <switch_default_layer>:
    return 0;
}
#endif

static void switch_default_layer(uint8_t layer)
{
    4b5e:	cf 93       	push	r28
    4b60:	c8 2f       	mov	r28, r24
    xprintf("L%d\n", layer);
    4b62:	1f 92       	push	r1
    4b64:	8f 93       	push	r24
    4b66:	89 e0       	ldi	r24, 0x09	; 9
    4b68:	98 e0       	ldi	r25, 0x08	; 8
    4b6a:	9f 93       	push	r25
    4b6c:	8f 93       	push	r24
    4b6e:	0e 94 12 07 	call	0xe24	; 0xe24 <__xprintf>
    default_layer_set(1UL<<layer);
    4b72:	81 e0       	ldi	r24, 0x01	; 1
    4b74:	90 e0       	ldi	r25, 0x00	; 0
    4b76:	a0 e0       	ldi	r26, 0x00	; 0
    4b78:	b0 e0       	ldi	r27, 0x00	; 0
    4b7a:	bc 01       	movw	r22, r24
    4b7c:	cd 01       	movw	r24, r26
    4b7e:	04 c0       	rjmp	.+8      	; 0x4b88 <switch_default_layer+0x2a>
    4b80:	66 0f       	add	r22, r22
    4b82:	77 1f       	adc	r23, r23
    4b84:	88 1f       	adc	r24, r24
    4b86:	99 1f       	adc	r25, r25
    4b88:	ca 95       	dec	r28
    4b8a:	d2 f7       	brpl	.-12     	; 0x4b80 <switch_default_layer+0x22>
    4b8c:	0e 94 07 1b 	call	0x360e	; 0x360e <default_layer_set>
    clear_keyboard();
    4b90:	0f 90       	pop	r0
    4b92:	0f 90       	pop	r0
    4b94:	0f 90       	pop	r0
    4b96:	0f 90       	pop	r0
}
    4b98:	cf 91       	pop	r28

static void switch_default_layer(uint8_t layer)
{
    xprintf("L%d\n", layer);
    default_layer_set(1UL<<layer);
    clear_keyboard();
    4b9a:	0c 94 a8 16 	jmp	0x2d50	; 0x2d50 <clear_keyboard>

00004b9e <command_common>:
#endif
}
#endif

static bool command_common(uint8_t code)
{
    4b9e:	cf 93       	push	r28
    static host_driver_t *host_driver = 0;
#endif
#ifdef SLEEP_LED_ENABLE
    static bool sleep_led_test = false;
#endif
    switch (code) {
    4ba0:	8b 31       	cpi	r24, 0x1B	; 27
    4ba2:	09 f4       	brne	.+2      	; 0x4ba6 <command_common+0x8>
    4ba4:	cb c1       	rjmp	.+918    	; 0x4f3c <command_common+0x39e>
    4ba6:	08 f0       	brcs	.+2      	; 0x4baa <command_common+0xc>
    4ba8:	49 c0       	rjmp	.+146    	; 0x4c3c <command_common+0x9e>
    4baa:	8e 30       	cpi	r24, 0x0E	; 14
    4bac:	09 f4       	brne	.+2      	; 0x4bb0 <command_common+0x12>
    4bae:	da c1       	rjmp	.+948    	; 0x4f64 <command_common+0x3c6>
    4bb0:	00 f5       	brcc	.+64     	; 0x4bf2 <command_common+0x54>
    4bb2:	87 30       	cpi	r24, 0x07	; 7
    4bb4:	09 f4       	brne	.+2      	; 0x4bb8 <command_common+0x1a>
    4bb6:	a9 c1       	rjmp	.+850    	; 0x4f0a <command_common+0x36c>
    4bb8:	a8 f4       	brcc	.+42     	; 0x4be4 <command_common+0x46>
    4bba:	86 30       	cpi	r24, 0x06	; 6
    4bbc:	09 f0       	breq	.+2      	; 0x4bc0 <command_common+0x22>
    4bbe:	5a c2       	rjmp	.+1204   	; 0x5074 <command_common+0x4d6>
        case KC_H:
        case KC_SLASH: /* ? */
            command_common_help();
            break;
        case KC_C:
            debug_matrix   = false;
    4bc0:	80 91 0c 03 	lds	r24, 0x030C	; 0x80030c <debug_config>
            debug_keyboard = false;
            debug_mouse    = false;
            debug_enable   = false;
    4bc4:	81 7f       	andi	r24, 0xF1	; 241
    4bc6:	8e 7f       	andi	r24, 0xFE	; 254
    4bc8:	80 93 0c 03 	sts	0x030C, r24	; 0x80030c <debug_config>
/***********************************************************
 * Command console
 ***********************************************************/
static void command_console_help(void)
{
    print("\n\t- Console -\n"
    4bcc:	8e e0       	ldi	r24, 0x0E	; 14
    4bce:	98 e0       	ldi	r25, 0x08	; 8
    4bd0:	0e 94 79 06 	call	0xcf2	; 0xcf2 <xputs>
            debug_matrix   = false;
            debug_keyboard = false;
            debug_mouse    = false;
            debug_enable   = false;
            command_console_help();
            print("C> ");
    4bd4:	88 e3       	ldi	r24, 0x38	; 56
    4bd6:	9c e0       	ldi	r25, 0x0C	; 12
    4bd8:	0e 94 79 06 	call	0xcf2	; 0xcf2 <xputs>
            command_state = CONSOLE;
    4bdc:	81 e0       	ldi	r24, 0x01	; 1
    4bde:	80 93 1c 03 	sts	0x031C, r24	; 0x80031c <command_state>
    4be2:	91 c1       	rjmp	.+802    	; 0x4f06 <command_common+0x368>
    static host_driver_t *host_driver = 0;
#endif
#ifdef SLEEP_LED_ENABLE
    static bool sleep_led_test = false;
#endif
    switch (code) {
    4be4:	88 30       	cpi	r24, 0x08	; 8
    4be6:	09 f4       	brne	.+2      	; 0x4bea <command_common+0x4c>
    4be8:	5b c0       	rjmp	.+182    	; 0x4ca0 <command_common+0x102>
    4bea:	8b 30       	cpi	r24, 0x0B	; 11
    4bec:	09 f4       	brne	.+2      	; 0x4bf0 <command_common+0x52>
    4bee:	87 c1       	rjmp	.+782    	; 0x4efe <command_common+0x360>
    4bf0:	41 c2       	rjmp	.+1154   	; 0x5074 <command_common+0x4d6>
    4bf2:	81 31       	cpi	r24, 0x11	; 17
    4bf4:	09 f4       	brne	.+2      	; 0x4bf8 <command_common+0x5a>
    4bf6:	26 c2       	rjmp	.+1100   	; 0x5044 <command_common+0x4a6>
    4bf8:	20 f4       	brcc	.+8      	; 0x4c02 <command_common+0x64>
    4bfa:	80 31       	cpi	r24, 0x10	; 16
    4bfc:	09 f4       	brne	.+2      	; 0x4c00 <command_common+0x62>
    4bfe:	c6 c1       	rjmp	.+908    	; 0x4f8c <command_common+0x3ee>
    4c00:	39 c2       	rjmp	.+1138   	; 0x5074 <command_common+0x4d6>
    4c02:	86 31       	cpi	r24, 0x16	; 22
    4c04:	09 f4       	brne	.+2      	; 0x4c08 <command_common+0x6a>
    4c06:	dd c1       	rjmp	.+954    	; 0x4fc2 <command_common+0x424>
    4c08:	89 31       	cpi	r24, 0x19	; 25
    4c0a:	09 f0       	breq	.+2      	; 0x4c0e <command_common+0x70>
    4c0c:	33 c2       	rjmp	.+1126   	; 0x5074 <command_common+0x4d6>
            } else {
                print("\nmouse: off\n");
            }
            break;
        case KC_V: // print version & information
            print("\n\t- Version -\n");
    4c0e:	8c ea       	ldi	r24, 0xAC	; 172
    4c10:	9b e0       	ldi	r25, 0x0B	; 11
    4c12:	0e 94 79 06 	call	0xcf2	; 0xcf2 <xputs>
            print("DESC: " STR(DESCRIPTION) "\n");
    4c16:	8f e7       	ldi	r24, 0x7F	; 127
    4c18:	9b e0       	ldi	r25, 0x0B	; 11
    4c1a:	0e 94 79 06 	call	0xcf2	; 0xcf2 <xputs>
            print("VID: " STR(VENDOR_ID) "(" STR(MANUFACTURER) ") "
    4c1e:	87 e4       	ldi	r24, 0x47	; 71
    4c20:	9b e0       	ldi	r25, 0x0B	; 11
    4c22:	0e 94 79 06 	call	0xcf2	; 0xcf2 <xputs>
                  "PID: " STR(PRODUCT_ID) "(" STR(PRODUCT) ") "
                  "VER: " STR(DEVICE_VER) "\n");
            print("BUILD: " STR(VERSION) " (" __TIME__ " " __DATE__ ")\n");
    4c26:	80 e2       	ldi	r24, 0x20	; 32
    4c28:	9b e0       	ldi	r25, 0x0B	; 11
    4c2a:	0e 94 79 06 	call	0xcf2	; 0xcf2 <xputs>
            /* build options */
            print("OPTIONS:"
    4c2e:	8b ed       	ldi	r24, 0xDB	; 219
    4c30:	9a e0       	ldi	r25, 0x0A	; 10
    4c32:	0e 94 79 06 	call	0xcf2	; 0xcf2 <xputs>
#ifdef KEYMAP_SECTION_ENABLE
            " KEYMAP_SECTION"
#endif
            " " STR(BOOTLOADER_SIZE) "\n");

            print("GCC: " STR(__GNUC__) "." STR(__GNUC_MINOR__) "." STR(__GNUC_PATCHLEVEL__)
    4c36:	80 eb       	ldi	r24, 0xB0	; 176
    4c38:	9a e0       	ldi	r25, 0x0A	; 10
    4c3a:	63 c1       	rjmp	.+710    	; 0x4f02 <command_common+0x364>
    static host_driver_t *host_driver = 0;
#endif
#ifdef SLEEP_LED_ENABLE
    static bool sleep_led_test = false;
#endif
    switch (code) {
    4c3c:	85 33       	cpi	r24, 0x35	; 53
    4c3e:	09 f4       	brne	.+2      	; 0x4c42 <command_common+0xa4>
    4c40:	13 c2       	rjmp	.+1062   	; 0x5068 <command_common+0x4ca>
    4c42:	68 f4       	brcc	.+26     	; 0x4c5e <command_common+0xc0>
    4c44:	87 32       	cpi	r24, 0x27	; 39
    4c46:	09 f4       	brne	.+2      	; 0x4c4a <command_common+0xac>
    4c48:	0f c2       	rjmp	.+1054   	; 0x5068 <command_common+0x4ca>
    4c4a:	28 f4       	brcc	.+10     	; 0x4c56 <command_common+0xb8>
    4c4c:	8e 31       	cpi	r24, 0x1E	; 30
    4c4e:	08 f4       	brcc	.+2      	; 0x4c52 <command_common+0xb4>
    4c50:	11 c2       	rjmp	.+1058   	; 0x5074 <command_common+0x4d6>
        case KC_0:
        case KC_F10:
            switch_default_layer(0);
            break;
        case KC_1 ... KC_9:
            switch_default_layer((code - KC_1) + 1);
    4c52:	8d 51       	subi	r24, 0x1D	; 29
    4c54:	0c c2       	rjmp	.+1048   	; 0x506e <command_common+0x4d0>
    static host_driver_t *host_driver = 0;
#endif
#ifdef SLEEP_LED_ENABLE
    static bool sleep_led_test = false;
#endif
    switch (code) {
    4c56:	89 32       	cpi	r24, 0x29	; 41
    4c58:	09 f4       	brne	.+2      	; 0x4c5c <command_common+0xbe>
    4c5a:	06 c2       	rjmp	.+1036   	; 0x5068 <command_common+0x4ca>
    4c5c:	0b c2       	rjmp	.+1046   	; 0x5074 <command_common+0x4d6>
    4c5e:	83 34       	cpi	r24, 0x43	; 67
    4c60:	38 f4       	brcc	.+14     	; 0x4c70 <command_common+0xd2>
    4c62:	8a 33       	cpi	r24, 0x3A	; 58
    4c64:	08 f0       	brcs	.+2      	; 0x4c68 <command_common+0xca>
    4c66:	02 c2       	rjmp	.+1028   	; 0x506c <command_common+0x4ce>
    4c68:	88 33       	cpi	r24, 0x38	; 56
    4c6a:	09 f4       	brne	.+2      	; 0x4c6e <command_common+0xd0>
    4c6c:	48 c1       	rjmp	.+656    	; 0x4efe <command_common+0x360>
    4c6e:	02 c2       	rjmp	.+1028   	; 0x5074 <command_common+0x4d6>
    4c70:	83 34       	cpi	r24, 0x43	; 67
    4c72:	09 f4       	brne	.+2      	; 0x4c76 <command_common+0xd8>
    4c74:	f9 c1       	rjmp	.+1010   	; 0x5068 <command_common+0x4ca>
    4c76:	88 34       	cpi	r24, 0x48	; 72
    4c78:	09 f0       	breq	.+2      	; 0x4c7c <command_common+0xde>
    4c7a:	fc c1       	rjmp	.+1016   	; 0x5074 <command_common+0x4d6>
            command_console_help();
            print("C> ");
            command_state = CONSOLE;
            break;
        case KC_PAUSE:
            clear_keyboard();
    4c7c:	0e 94 a8 16 	call	0x2d50	; 0x2d50 <clear_keyboard>
            print("\n\nbootloader... ");
    4c80:	87 e2       	ldi	r24, 0x27	; 39
    4c82:	9c e0       	ldi	r25, 0x0C	; 12
    4c84:	0e 94 79 06 	call	0xcf2	; 0xcf2 <xputs>
    4c88:	9f ef       	ldi	r25, 0xFF	; 255
    4c8a:	23 ed       	ldi	r18, 0xD3	; 211
    4c8c:	80 e3       	ldi	r24, 0x30	; 48
    4c8e:	91 50       	subi	r25, 0x01	; 1
    4c90:	20 40       	sbci	r18, 0x00	; 0
    4c92:	80 40       	sbci	r24, 0x00	; 0
    4c94:	e1 f7       	brne	.-8      	; 0x4c8e <command_common+0xf0>
    4c96:	00 c0       	rjmp	.+0      	; 0x4c98 <command_common+0xfa>
    4c98:	00 00       	nop
            wait_ms(1000);
            bootloader_jump(); // not return
    4c9a:	0e 94 a6 1e 	call	0x3d4c	; 0x3d4c <bootloader_jump>
    4c9e:	33 c1       	rjmp	.+614    	; 0x4f06 <command_common+0x368>
            sleep_led_test = !sleep_led_test;
            break;
#endif
#ifdef BOOTMAGIC_ENABLE
        case KC_E:
            print("eeconfig:\n");
    4ca0:	8c e3       	ldi	r24, 0x3C	; 60
    4ca2:	9c e0       	ldi	r25, 0x0C	; 12
    4ca4:	0e 94 79 06 	call	0xcf2	; 0xcf2 <xputs>
}

#ifdef BOOTMAGIC_ENABLE
static void print_eeconfig(void)
{
    print("default_layer: "); print_dec(eeconfig_read_default_layer()); print("\n");
    4ca8:	8d e0       	ldi	r24, 0x0D	; 13
    4caa:	9a e0       	ldi	r25, 0x0A	; 10
    4cac:	0e 94 79 06 	call	0xcf2	; 0xcf2 <xputs>
    4cb0:	0e 94 b8 21 	call	0x4370	; 0x4370 <eeconfig_read_default_layer>
    4cb4:	1f 92       	push	r1
    4cb6:	8f 93       	push	r24
    4cb8:	8a e0       	ldi	r24, 0x0A	; 10
    4cba:	9a e0       	ldi	r25, 0x0A	; 10
    4cbc:	9f 93       	push	r25
    4cbe:	8f 93       	push	r24
    4cc0:	0e 94 12 07 	call	0xe24	; 0xe24 <__xprintf>
    4cc4:	88 e0       	ldi	r24, 0x08	; 8
    4cc6:	9a e0       	ldi	r25, 0x0A	; 10
    4cc8:	0e 94 79 06 	call	0xcf2	; 0xcf2 <xputs>

    debug_config_t dc;
    dc.raw = eeconfig_read_debug();
    4ccc:	0e 94 af 21 	call	0x435e	; 0x435e <eeconfig_read_debug>
    4cd0:	c8 2f       	mov	r28, r24
    print("debug_config.raw: "); print_hex8(dc.raw); print("\n");
    4cd2:	85 ef       	ldi	r24, 0xF5	; 245
    4cd4:	99 e0       	ldi	r25, 0x09	; 9
    4cd6:	0e 94 79 06 	call	0xcf2	; 0xcf2 <xputs>
    4cda:	1f 92       	push	r1
    4cdc:	cf 93       	push	r28
    4cde:	80 ef       	ldi	r24, 0xF0	; 240
    4ce0:	99 e0       	ldi	r25, 0x09	; 9
    4ce2:	9f 93       	push	r25
    4ce4:	8f 93       	push	r24
    4ce6:	0e 94 12 07 	call	0xe24	; 0xe24 <__xprintf>
    4cea:	8e ee       	ldi	r24, 0xEE	; 238
    4cec:	99 e0       	ldi	r25, 0x09	; 9
    4cee:	0e 94 79 06 	call	0xcf2	; 0xcf2 <xputs>
    print(".enable: "); print_dec(dc.enable); print("\n");
    4cf2:	84 ee       	ldi	r24, 0xE4	; 228
    4cf4:	99 e0       	ldi	r25, 0x09	; 9
    4cf6:	0e 94 79 06 	call	0xcf2	; 0xcf2 <xputs>
    4cfa:	8c 2f       	mov	r24, r28
    4cfc:	81 70       	andi	r24, 0x01	; 1
    4cfe:	1f 92       	push	r1
    4d00:	8f 93       	push	r24
    4d02:	81 ee       	ldi	r24, 0xE1	; 225
    4d04:	99 e0       	ldi	r25, 0x09	; 9
    4d06:	9f 93       	push	r25
    4d08:	8f 93       	push	r24
    4d0a:	0e 94 12 07 	call	0xe24	; 0xe24 <__xprintf>
    4d0e:	8f ed       	ldi	r24, 0xDF	; 223
    4d10:	99 e0       	ldi	r25, 0x09	; 9
    4d12:	0e 94 79 06 	call	0xcf2	; 0xcf2 <xputs>
    print(".matrix: "); print_dec(dc.matrix); print("\n");
    4d16:	85 ed       	ldi	r24, 0xD5	; 213
    4d18:	99 e0       	ldi	r25, 0x09	; 9
    4d1a:	0e 94 79 06 	call	0xcf2	; 0xcf2 <xputs>
    4d1e:	c1 fb       	bst	r28, 1
    4d20:	88 27       	eor	r24, r24
    4d22:	80 f9       	bld	r24, 0
    4d24:	1f 92       	push	r1
    4d26:	8f 93       	push	r24
    4d28:	82 ed       	ldi	r24, 0xD2	; 210
    4d2a:	99 e0       	ldi	r25, 0x09	; 9
    4d2c:	9f 93       	push	r25
    4d2e:	8f 93       	push	r24
    4d30:	0e 94 12 07 	call	0xe24	; 0xe24 <__xprintf>
    4d34:	80 ed       	ldi	r24, 0xD0	; 208
    4d36:	99 e0       	ldi	r25, 0x09	; 9
    4d38:	0e 94 79 06 	call	0xcf2	; 0xcf2 <xputs>
    print(".keyboard: "); print_dec(dc.keyboard); print("\n");
    4d3c:	84 ec       	ldi	r24, 0xC4	; 196
    4d3e:	99 e0       	ldi	r25, 0x09	; 9
    4d40:	0e 94 79 06 	call	0xcf2	; 0xcf2 <xputs>
    4d44:	c2 fb       	bst	r28, 2
    4d46:	88 27       	eor	r24, r24
    4d48:	80 f9       	bld	r24, 0
    4d4a:	1f 92       	push	r1
    4d4c:	8f 93       	push	r24
    4d4e:	81 ec       	ldi	r24, 0xC1	; 193
    4d50:	99 e0       	ldi	r25, 0x09	; 9
    4d52:	9f 93       	push	r25
    4d54:	8f 93       	push	r24
    4d56:	0e 94 12 07 	call	0xe24	; 0xe24 <__xprintf>
    4d5a:	8f eb       	ldi	r24, 0xBF	; 191
    4d5c:	99 e0       	ldi	r25, 0x09	; 9
    4d5e:	0e 94 79 06 	call	0xcf2	; 0xcf2 <xputs>
    print(".mouse: "); print_dec(dc.mouse); print("\n");
    4d62:	86 eb       	ldi	r24, 0xB6	; 182
    4d64:	99 e0       	ldi	r25, 0x09	; 9
    4d66:	0e 94 79 06 	call	0xcf2	; 0xcf2 <xputs>
    4d6a:	c3 fb       	bst	r28, 3
    4d6c:	cc 27       	eor	r28, r28
    4d6e:	c0 f9       	bld	r28, 0
    4d70:	1f 92       	push	r1
    4d72:	cf 93       	push	r28
    4d74:	83 eb       	ldi	r24, 0xB3	; 179
    4d76:	99 e0       	ldi	r25, 0x09	; 9
    4d78:	9f 93       	push	r25
    4d7a:	8f 93       	push	r24
    4d7c:	0e 94 12 07 	call	0xe24	; 0xe24 <__xprintf>
    4d80:	81 eb       	ldi	r24, 0xB1	; 177
    4d82:	99 e0       	ldi	r25, 0x09	; 9
    4d84:	0e 94 79 06 	call	0xcf2	; 0xcf2 <xputs>

    keymap_config_t kc;
    kc.raw = eeconfig_read_keymap();
    4d88:	0e 94 c1 21 	call	0x4382	; 0x4382 <eeconfig_read_keymap>
    4d8c:	c8 2f       	mov	r28, r24
    print("keymap_config.raw: "); print_hex8(kc.raw); print("\n");
    4d8e:	8d e9       	ldi	r24, 0x9D	; 157
    4d90:	99 e0       	ldi	r25, 0x09	; 9
    4d92:	0e 94 79 06 	call	0xcf2	; 0xcf2 <xputs>
    4d96:	1f 92       	push	r1
    4d98:	cf 93       	push	r28
    4d9a:	88 e9       	ldi	r24, 0x98	; 152
    4d9c:	99 e0       	ldi	r25, 0x09	; 9
    4d9e:	9f 93       	push	r25
    4da0:	8f 93       	push	r24
    4da2:	0e 94 12 07 	call	0xe24	; 0xe24 <__xprintf>
    4da6:	86 e9       	ldi	r24, 0x96	; 150
    4da8:	99 e0       	ldi	r25, 0x09	; 9
    4daa:	0e 94 79 06 	call	0xcf2	; 0xcf2 <xputs>
    print(".swap_control_capslock: "); print_dec(kc.swap_control_capslock); print("\n");
    4dae:	8d e7       	ldi	r24, 0x7D	; 125
    4db0:	99 e0       	ldi	r25, 0x09	; 9
    4db2:	0e 94 79 06 	call	0xcf2	; 0xcf2 <xputs>
    4db6:	8c 2f       	mov	r24, r28
    4db8:	81 70       	andi	r24, 0x01	; 1
    4dba:	1f 92       	push	r1
    4dbc:	8f 93       	push	r24
    4dbe:	8a e7       	ldi	r24, 0x7A	; 122
    4dc0:	99 e0       	ldi	r25, 0x09	; 9
    4dc2:	9f 93       	push	r25
    4dc4:	8f 93       	push	r24
    4dc6:	0e 94 12 07 	call	0xe24	; 0xe24 <__xprintf>
    4dca:	8d b7       	in	r24, 0x3d	; 61
    4dcc:	9e b7       	in	r25, 0x3e	; 62
    4dce:	80 96       	adiw	r24, 0x20	; 32
    4dd0:	0f b6       	in	r0, 0x3f	; 63
    4dd2:	f8 94       	cli
    4dd4:	9e bf       	out	0x3e, r25	; 62
    4dd6:	0f be       	out	0x3f, r0	; 63
    4dd8:	8d bf       	out	0x3d, r24	; 61
    4dda:	88 e7       	ldi	r24, 0x78	; 120
    4ddc:	99 e0       	ldi	r25, 0x09	; 9
    4dde:	0e 94 79 06 	call	0xcf2	; 0xcf2 <xputs>
    print(".capslock_to_control: "); print_dec(kc.capslock_to_control); print("\n");
    4de2:	81 e6       	ldi	r24, 0x61	; 97
    4de4:	99 e0       	ldi	r25, 0x09	; 9
    4de6:	0e 94 79 06 	call	0xcf2	; 0xcf2 <xputs>
    4dea:	c1 fb       	bst	r28, 1
    4dec:	88 27       	eor	r24, r24
    4dee:	80 f9       	bld	r24, 0
    4df0:	1f 92       	push	r1
    4df2:	8f 93       	push	r24
    4df4:	8e e5       	ldi	r24, 0x5E	; 94
    4df6:	99 e0       	ldi	r25, 0x09	; 9
    4df8:	9f 93       	push	r25
    4dfa:	8f 93       	push	r24
    4dfc:	0e 94 12 07 	call	0xe24	; 0xe24 <__xprintf>
    4e00:	8c e5       	ldi	r24, 0x5C	; 92
    4e02:	99 e0       	ldi	r25, 0x09	; 9
    4e04:	0e 94 79 06 	call	0xcf2	; 0xcf2 <xputs>
    print(".swap_lalt_lgui: "); print_dec(kc.swap_lalt_lgui); print("\n");
    4e08:	8a e4       	ldi	r24, 0x4A	; 74
    4e0a:	99 e0       	ldi	r25, 0x09	; 9
    4e0c:	0e 94 79 06 	call	0xcf2	; 0xcf2 <xputs>
    4e10:	c2 fb       	bst	r28, 2
    4e12:	88 27       	eor	r24, r24
    4e14:	80 f9       	bld	r24, 0
    4e16:	1f 92       	push	r1
    4e18:	8f 93       	push	r24
    4e1a:	87 e4       	ldi	r24, 0x47	; 71
    4e1c:	99 e0       	ldi	r25, 0x09	; 9
    4e1e:	9f 93       	push	r25
    4e20:	8f 93       	push	r24
    4e22:	0e 94 12 07 	call	0xe24	; 0xe24 <__xprintf>
    4e26:	85 e4       	ldi	r24, 0x45	; 69
    4e28:	99 e0       	ldi	r25, 0x09	; 9
    4e2a:	0e 94 79 06 	call	0xcf2	; 0xcf2 <xputs>
    print(".swap_ralt_rgui: "); print_dec(kc.swap_ralt_rgui); print("\n");
    4e2e:	83 e3       	ldi	r24, 0x33	; 51
    4e30:	99 e0       	ldi	r25, 0x09	; 9
    4e32:	0e 94 79 06 	call	0xcf2	; 0xcf2 <xputs>
    4e36:	c3 fb       	bst	r28, 3
    4e38:	88 27       	eor	r24, r24
    4e3a:	80 f9       	bld	r24, 0
    4e3c:	1f 92       	push	r1
    4e3e:	8f 93       	push	r24
    4e40:	80 e3       	ldi	r24, 0x30	; 48
    4e42:	99 e0       	ldi	r25, 0x09	; 9
    4e44:	9f 93       	push	r25
    4e46:	8f 93       	push	r24
    4e48:	0e 94 12 07 	call	0xe24	; 0xe24 <__xprintf>
    4e4c:	8e e2       	ldi	r24, 0x2E	; 46
    4e4e:	99 e0       	ldi	r25, 0x09	; 9
    4e50:	0e 94 79 06 	call	0xcf2	; 0xcf2 <xputs>
    print(".no_gui: "); print_dec(kc.no_gui); print("\n");
    4e54:	84 e2       	ldi	r24, 0x24	; 36
    4e56:	99 e0       	ldi	r25, 0x09	; 9
    4e58:	0e 94 79 06 	call	0xcf2	; 0xcf2 <xputs>
    4e5c:	c4 fb       	bst	r28, 4
    4e5e:	88 27       	eor	r24, r24
    4e60:	80 f9       	bld	r24, 0
    4e62:	1f 92       	push	r1
    4e64:	8f 93       	push	r24
    4e66:	81 e2       	ldi	r24, 0x21	; 33
    4e68:	99 e0       	ldi	r25, 0x09	; 9
    4e6a:	9f 93       	push	r25
    4e6c:	8f 93       	push	r24
    4e6e:	0e 94 12 07 	call	0xe24	; 0xe24 <__xprintf>
    4e72:	8f e1       	ldi	r24, 0x1F	; 31
    4e74:	99 e0       	ldi	r25, 0x09	; 9
    4e76:	0e 94 79 06 	call	0xcf2	; 0xcf2 <xputs>
    print(".swap_grave_esc: "); print_dec(kc.swap_grave_esc); print("\n");
    4e7a:	8d e0       	ldi	r24, 0x0D	; 13
    4e7c:	99 e0       	ldi	r25, 0x09	; 9
    4e7e:	0e 94 79 06 	call	0xcf2	; 0xcf2 <xputs>
    4e82:	c5 fb       	bst	r28, 5
    4e84:	88 27       	eor	r24, r24
    4e86:	80 f9       	bld	r24, 0
    4e88:	1f 92       	push	r1
    4e8a:	8f 93       	push	r24
    4e8c:	8a e0       	ldi	r24, 0x0A	; 10
    4e8e:	99 e0       	ldi	r25, 0x09	; 9
    4e90:	9f 93       	push	r25
    4e92:	8f 93       	push	r24
    4e94:	0e 94 12 07 	call	0xe24	; 0xe24 <__xprintf>
    4e98:	88 e0       	ldi	r24, 0x08	; 8
    4e9a:	99 e0       	ldi	r25, 0x09	; 9
    4e9c:	0e 94 79 06 	call	0xcf2	; 0xcf2 <xputs>
    print(".swap_backslash_backspace: "); print_dec(kc.swap_backslash_backspace); print("\n");
    4ea0:	8c ee       	ldi	r24, 0xEC	; 236
    4ea2:	98 e0       	ldi	r25, 0x08	; 8
    4ea4:	0e 94 79 06 	call	0xcf2	; 0xcf2 <xputs>
    4ea8:	c6 fb       	bst	r28, 6
    4eaa:	88 27       	eor	r24, r24
    4eac:	80 f9       	bld	r24, 0
    4eae:	1f 92       	push	r1
    4eb0:	8f 93       	push	r24
    4eb2:	89 ee       	ldi	r24, 0xE9	; 233
    4eb4:	98 e0       	ldi	r25, 0x08	; 8
    4eb6:	9f 93       	push	r25
    4eb8:	8f 93       	push	r24
    4eba:	0e 94 12 07 	call	0xe24	; 0xe24 <__xprintf>
    4ebe:	87 ee       	ldi	r24, 0xE7	; 231
    4ec0:	98 e0       	ldi	r25, 0x08	; 8
    4ec2:	0e 94 79 06 	call	0xcf2	; 0xcf2 <xputs>
    print(".nkro: "); print_dec(kc.nkro); print("\n");
    4ec6:	8f ed       	ldi	r24, 0xDF	; 223
    4ec8:	98 e0       	ldi	r25, 0x08	; 8
    4eca:	0e 94 79 06 	call	0xcf2	; 0xcf2 <xputs>
    4ece:	c7 fb       	bst	r28, 7
    4ed0:	cc 27       	eor	r28, r28
    4ed2:	c0 f9       	bld	r28, 0
    4ed4:	1f 92       	push	r1
    4ed6:	cf 93       	push	r28
    4ed8:	8c ed       	ldi	r24, 0xDC	; 220
    4eda:	98 e0       	ldi	r25, 0x08	; 8
    4edc:	9f 93       	push	r25
    4ede:	8f 93       	push	r24
    4ee0:	0e 94 12 07 	call	0xe24	; 0xe24 <__xprintf>
    4ee4:	8a ed       	ldi	r24, 0xDA	; 218
    4ee6:	98 e0       	ldi	r25, 0x08	; 8
    4ee8:	0e 94 79 06 	call	0xcf2	; 0xcf2 <xputs>
    4eec:	8d b7       	in	r24, 0x3d	; 61
    4eee:	9e b7       	in	r25, 0x3e	; 62
    4ef0:	4c 96       	adiw	r24, 0x1c	; 28
    4ef2:	0f b6       	in	r0, 0x3f	; 63
    4ef4:	f8 94       	cli
    4ef6:	9e bf       	out	0x3e, r25	; 62
    4ef8:	0f be       	out	0x3f, r0	; 63
    4efa:	8d bf       	out	0x3d, r24	; 61
    4efc:	04 c0       	rjmp	.+8      	; 0x4f06 <command_common+0x368>
/***********************************************************
 * Command common
 ***********************************************************/
static void command_common_help(void)
{
    print("\n\t- Magic -\n"
    4efe:	85 e3       	ldi	r24, 0x35	; 53
    4f00:	98 e0       	ldi	r25, 0x08	; 8
    4f02:	0e 94 79 06 	call	0xcf2	; 0xcf2 <xputs>
            break;
        default:
            print("?");
            return false;
    }
    return true;
    4f06:	c1 e0       	ldi	r28, 0x01	; 1
    4f08:	ba c0       	rjmp	.+372    	; 0x507e <command_common+0x4e0>
            print("\n\nbootloader... ");
            wait_ms(1000);
            bootloader_jump(); // not return
            break;
        case KC_D:
            if (debug_enable) {
    4f0a:	80 91 0c 03 	lds	r24, 0x030C	; 0x80030c <debug_config>
    4f0e:	c8 2f       	mov	r28, r24
    4f10:	c1 70       	andi	r28, 0x01	; 1
    4f12:	80 ff       	sbrs	r24, 0
    4f14:	09 c0       	rjmp	.+18     	; 0x4f28 <command_common+0x38a>
                print("\ndebug: off\n");
    4f16:	8a e1       	ldi	r24, 0x1A	; 26
    4f18:	9c e0       	ldi	r25, 0x0C	; 12
    4f1a:	0e 94 79 06 	call	0xcf2	; 0xcf2 <xputs>
                debug_matrix   = false;
    4f1e:	80 91 0c 03 	lds	r24, 0x030C	; 0x80030c <debug_config>
                debug_keyboard = false;
                debug_mouse    = false;
                debug_enable   = false;
    4f22:	81 7f       	andi	r24, 0xF1	; 241
    4f24:	8e 7f       	andi	r24, 0xFE	; 254
    4f26:	47 c0       	rjmp	.+142    	; 0x4fb6 <command_common+0x418>
            } else {
                print("\ndebug: on\n");
    4f28:	8e e0       	ldi	r24, 0x0E	; 14
    4f2a:	9c e0       	ldi	r25, 0x0C	; 12
    4f2c:	0e 94 79 06 	call	0xcf2	; 0xcf2 <xputs>
                debug_enable   = true;
    4f30:	80 91 0c 03 	lds	r24, 0x030C	; 0x80030c <debug_config>
    4f34:	81 60       	ori	r24, 0x01	; 1
    4f36:	80 93 0c 03 	sts	0x030C, r24	; 0x80030c <debug_config>
    4f3a:	e5 cf       	rjmp	.-54     	; 0x4f06 <command_common+0x368>
            }
            break;
        case KC_X: // debug matrix toggle
            debug_matrix = !debug_matrix;
    4f3c:	90 91 0c 03 	lds	r25, 0x030C	; 0x80030c <debug_config>
    4f40:	91 fb       	bst	r25, 1
    4f42:	cc 27       	eor	r28, r28
    4f44:	c0 f9       	bld	r28, 0
    4f46:	81 e0       	ldi	r24, 0x01	; 1
    4f48:	c8 27       	eor	r28, r24
    4f4a:	89 2f       	mov	r24, r25
    4f4c:	c0 fb       	bst	r28, 0
    4f4e:	81 f9       	bld	r24, 1
    4f50:	80 93 0c 03 	sts	0x030C, r24	; 0x80030c <debug_config>
            if (debug_matrix) {
    4f54:	cc 23       	and	r28, r28
    4f56:	19 f0       	breq	.+6      	; 0x4f5e <command_common+0x3c0>
                print("\nmatrix: on\n");
    4f58:	81 e0       	ldi	r24, 0x01	; 1
    4f5a:	9c e0       	ldi	r25, 0x0C	; 12
    4f5c:	27 c0       	rjmp	.+78     	; 0x4fac <command_common+0x40e>
                debug_enable = true;
            } else {
                print("\nmatrix: off\n");
    4f5e:	83 ef       	ldi	r24, 0xF3	; 243
    4f60:	9b e0       	ldi	r25, 0x0B	; 11
    4f62:	cf cf       	rjmp	.-98     	; 0x4f02 <command_common+0x364>
            }
            break;
        case KC_K: // debug keyboard toggle
            debug_keyboard = !debug_keyboard;
    4f64:	90 91 0c 03 	lds	r25, 0x030C	; 0x80030c <debug_config>
    4f68:	92 fb       	bst	r25, 2
    4f6a:	cc 27       	eor	r28, r28
    4f6c:	c0 f9       	bld	r28, 0
    4f6e:	81 e0       	ldi	r24, 0x01	; 1
    4f70:	c8 27       	eor	r28, r24
    4f72:	89 2f       	mov	r24, r25
    4f74:	c0 fb       	bst	r28, 0
    4f76:	82 f9       	bld	r24, 2
    4f78:	80 93 0c 03 	sts	0x030C, r24	; 0x80030c <debug_config>
            if (debug_keyboard) {
    4f7c:	cc 23       	and	r28, r28
    4f7e:	19 f0       	breq	.+6      	; 0x4f86 <command_common+0x3e8>
                print("\nkeyboard: on\n");
    4f80:	84 ee       	ldi	r24, 0xE4	; 228
    4f82:	9b e0       	ldi	r25, 0x0B	; 11
    4f84:	13 c0       	rjmp	.+38     	; 0x4fac <command_common+0x40e>
                debug_enable = true;
            } else {
                print("\nkeyboard: off\n");
    4f86:	84 ed       	ldi	r24, 0xD4	; 212
    4f88:	9b e0       	ldi	r25, 0x0B	; 11
    4f8a:	bb cf       	rjmp	.-138    	; 0x4f02 <command_common+0x364>
            }
            break;
        case KC_M: // debug mouse toggle
            debug_mouse = !debug_mouse;
    4f8c:	90 91 0c 03 	lds	r25, 0x030C	; 0x80030c <debug_config>
    4f90:	93 fb       	bst	r25, 3
    4f92:	cc 27       	eor	r28, r28
    4f94:	c0 f9       	bld	r28, 0
    4f96:	81 e0       	ldi	r24, 0x01	; 1
    4f98:	c8 27       	eor	r28, r24
    4f9a:	89 2f       	mov	r24, r25
    4f9c:	c0 fb       	bst	r28, 0
    4f9e:	83 f9       	bld	r24, 3
    4fa0:	80 93 0c 03 	sts	0x030C, r24	; 0x80030c <debug_config>
            if (debug_mouse) {
    4fa4:	cc 23       	and	r28, r28
    4fa6:	51 f0       	breq	.+20     	; 0x4fbc <command_common+0x41e>
                print("\nmouse: on\n");
    4fa8:	88 ec       	ldi	r24, 0xC8	; 200
    4faa:	9b e0       	ldi	r25, 0x0B	; 11
    4fac:	0e 94 79 06 	call	0xcf2	; 0xcf2 <xputs>
                debug_enable = true;
    4fb0:	80 91 0c 03 	lds	r24, 0x030C	; 0x80030c <debug_config>
    4fb4:	81 60       	ori	r24, 0x01	; 1
    4fb6:	80 93 0c 03 	sts	0x030C, r24	; 0x80030c <debug_config>
    4fba:	61 c0       	rjmp	.+194    	; 0x507e <command_common+0x4e0>
            } else {
                print("\nmouse: off\n");
    4fbc:	8b eb       	ldi	r24, 0xBB	; 187
    4fbe:	9b e0       	ldi	r25, 0x0B	; 11
    4fc0:	a0 cf       	rjmp	.-192    	; 0x4f02 <command_common+0x364>
            // TODO
            );
#endif
            break;
        case KC_S:
            print("\n\t- Status -\n");
    4fc2:	82 ea       	ldi	r24, 0xA2	; 162
    4fc4:	9a e0       	ldi	r25, 0x0A	; 10
    4fc6:	0e 94 79 06 	call	0xcf2	; 0xcf2 <xputs>
            print_val_hex8(host_keyboard_leds());
    4fca:	0e 94 4f 10 	call	0x209e	; 0x209e <host_keyboard_leds>
    4fce:	1f 92       	push	r1
    4fd0:	8f 93       	push	r24
    4fd2:	88 e8       	ldi	r24, 0x88	; 136
    4fd4:	9a e0       	ldi	r25, 0x0A	; 10
    4fd6:	9f 93       	push	r25
    4fd8:	8f 93       	push	r24
    4fda:	0e 94 12 07 	call	0xe24	; 0xe24 <__xprintf>
            print_val_hex8(keyboard_protocol);
    4fde:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <keyboard_protocol>
    4fe2:	1f 92       	push	r1
    4fe4:	8f 93       	push	r24
    4fe6:	81 e7       	ldi	r24, 0x71	; 113
    4fe8:	9a e0       	ldi	r25, 0x0A	; 10
    4fea:	9f 93       	push	r25
    4fec:	8f 93       	push	r24
    4fee:	0e 94 12 07 	call	0xe24	; 0xe24 <__xprintf>
            print_val_hex8(keyboard_idle);
    4ff2:	80 91 71 02 	lds	r24, 0x0271	; 0x800271 <keyboard_idle>
    4ff6:	1f 92       	push	r1
    4ff8:	8f 93       	push	r24
    4ffa:	8e e5       	ldi	r24, 0x5E	; 94
    4ffc:	9a e0       	ldi	r25, 0x0A	; 10
    4ffe:	9f 93       	push	r25
    5000:	8f 93       	push	r24
    5002:	0e 94 12 07 	call	0xe24	; 0xe24 <__xprintf>
#ifdef NKRO_ENABLE
            print_val_hex8(keyboard_nkro);
    5006:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <keyboard_nkro>
    500a:	1f 92       	push	r1
    500c:	8f 93       	push	r24
    500e:	8b e4       	ldi	r24, 0x4B	; 75
    5010:	9a e0       	ldi	r25, 0x0A	; 10
    5012:	9f 93       	push	r25
    5014:	8f 93       	push	r24
    5016:	0e 94 12 07 	call	0xe24	; 0xe24 <__xprintf>
#endif
            print_val_hex32(timer_read32());
    501a:	0e 94 4b 1e 	call	0x3c96	; 0x3c96 <timer_read32>
    501e:	9f 93       	push	r25
    5020:	8f 93       	push	r24
    5022:	7f 93       	push	r23
    5024:	6f 93       	push	r22
    5026:	84 e3       	ldi	r24, 0x34	; 52
    5028:	9a e0       	ldi	r25, 0x0A	; 10
    502a:	9f 93       	push	r25
    502c:	8f 93       	push	r24
    502e:	0e 94 12 07 	call	0xe24	; 0xe24 <__xprintf>
#ifdef PROTOCOL_PJRC
#   if USB_COUNT_SOF
            print_val_hex8(usbSofCount);
#   endif
#endif
            break;
    5032:	8d b7       	in	r24, 0x3d	; 61
    5034:	9e b7       	in	r25, 0x3e	; 62
    5036:	46 96       	adiw	r24, 0x16	; 22
    5038:	0f b6       	in	r0, 0x3f	; 63
    503a:	f8 94       	cli
    503c:	9e bf       	out	0x3e, r25	; 62
    503e:	0f be       	out	0x3f, r0	; 63
    5040:	8d bf       	out	0x3d, r24	; 61
    5042:	61 cf       	rjmp	.-318    	; 0x4f06 <command_common+0x368>
#ifdef NKRO_ENABLE
        case KC_N:
            clear_keyboard(); //Prevents stuck keys.
    5044:	0e 94 a8 16 	call	0x2d50	; 0x2d50 <clear_keyboard>
            keyboard_nkro = !keyboard_nkro;
    5048:	c0 91 11 01 	lds	r28, 0x0111	; 0x800111 <keyboard_nkro>
    504c:	81 e0       	ldi	r24, 0x01	; 1
    504e:	c8 27       	eor	r28, r24
    5050:	c0 93 11 01 	sts	0x0111, r28	; 0x800111 <keyboard_nkro>
            if (keyboard_nkro) {
    5054:	cc 23       	and	r28, r28
    5056:	29 f0       	breq	.+10     	; 0x5062 <command_common+0x4c4>
                print("NKRO: on\n");
    5058:	8a e2       	ldi	r24, 0x2A	; 42
    505a:	9a e0       	ldi	r25, 0x0A	; 10
    505c:	0e 94 79 06 	call	0xcf2	; 0xcf2 <xputs>
    5060:	0e c0       	rjmp	.+28     	; 0x507e <command_common+0x4e0>
            } else {
                print("NKRO: off\n");
    5062:	8f e1       	ldi	r24, 0x1F	; 31
    5064:	9a e0       	ldi	r25, 0x0A	; 10
    5066:	4d cf       	rjmp	.-358    	; 0x4f02 <command_common+0x364>
#endif
        case KC_ESC:
        case KC_GRV:
        case KC_0:
        case KC_F10:
            switch_default_layer(0);
    5068:	80 e0       	ldi	r24, 0x00	; 0
    506a:	01 c0       	rjmp	.+2      	; 0x506e <command_common+0x4d0>
            break;
        case KC_1 ... KC_9:
            switch_default_layer((code - KC_1) + 1);
            break;
        case KC_F1 ... KC_F9:
            switch_default_layer((code - KC_F1) + 1);
    506c:	89 53       	subi	r24, 0x39	; 57
    506e:	0e 94 af 25 	call	0x4b5e	; 0x4b5e <switch_default_layer>
    5072:	49 cf       	rjmp	.-366    	; 0x4f06 <command_common+0x368>
            break;
        default:
            print("?");
    5074:	8d e1       	ldi	r24, 0x1D	; 29
    5076:	9a e0       	ldi	r25, 0x0A	; 10
    5078:	0e 94 79 06 	call	0xcf2	; 0xcf2 <xputs>
            return false;
    507c:	c0 e0       	ldi	r28, 0x00	; 0
    }
    return true;
}
    507e:	8c 2f       	mov	r24, r28
    5080:	cf 91       	pop	r28
    5082:	08 95       	ret

00005084 <command_console_extra>:
bool command_console_extra(uint8_t code) __attribute__ ((weak));
bool command_console_extra(uint8_t code)
{
    (void)code;
    return false;
}
    5084:	80 e0       	ldi	r24, 0x00	; 0
    5086:	08 95       	ret

00005088 <command_extra>:
    5088:	0c 94 42 28 	jmp	0x5084	; 0x5084 <command_console_extra>

0000508c <command_proc>:

command_state_t command_state = ONESHOT;


bool command_proc(uint8_t code)
{
    508c:	cf 93       	push	r28
    508e:	c8 2f       	mov	r28, r24
    switch (command_state) {
    5090:	80 91 1c 03 	lds	r24, 0x031C	; 0x80031c <command_state>
    5094:	81 30       	cpi	r24, 0x01	; 1
    5096:	71 f0       	breq	.+28     	; 0x50b4 <command_proc+0x28>
    5098:	20 f0       	brcs	.+8      	; 0x50a2 <command_proc+0x16>
    509a:	82 30       	cpi	r24, 0x02	; 2
    509c:	09 f4       	brne	.+2      	; 0x50a0 <command_proc+0x14>
    509e:	4b c0       	rjmp	.+150    	; 0x5136 <command_proc+0xaa>
    50a0:	42 c1       	rjmp	.+644    	; 0x5326 <command_proc+0x29a>
        case ONESHOT:
            if (!IS_COMMAND())
    50a2:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <keyboard_report>
    50a6:	f0 91 13 01 	lds	r31, 0x0113	; 0x800113 <keyboard_report+0x1>
    50aa:	80 81       	ld	r24, Z
    50ac:	82 32       	cpi	r24, 0x22	; 34
    50ae:	09 f0       	breq	.+2      	; 0x50b2 <command_proc+0x26>
    50b0:	3c c1       	rjmp	.+632    	; 0x532a <command_proc+0x29e>
    50b2:	07 c0       	rjmp	.+14     	; 0x50c2 <command_proc+0x36>
                return false;
            return (command_extra(code) || command_common(code));
            break;
        case CONSOLE:
            if (IS_COMMAND())
    50b4:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <keyboard_report>
    50b8:	f0 91 13 01 	lds	r31, 0x0113	; 0x800113 <keyboard_report+0x1>
    50bc:	80 81       	ld	r24, Z
    50be:	82 32       	cpi	r24, 0x22	; 34
    50c0:	61 f4       	brne	.+24     	; 0x50da <command_proc+0x4e>
                return (command_extra(code) || command_common(code));
    50c2:	8c 2f       	mov	r24, r28
    50c4:	0e 94 44 28 	call	0x5088	; 0x5088 <command_extra>
    50c8:	81 11       	cpse	r24, r1
    50ca:	04 c0       	rjmp	.+8      	; 0x50d4 <command_proc+0x48>
    50cc:	8c 2f       	mov	r24, r28
    50ce:	0e 94 cf 25 	call	0x4b9e	; 0x4b9e <command_common>
    50d2:	2f c0       	rjmp	.+94     	; 0x5132 <command_proc+0xa6>
    50d4:	81 e0       	ldi	r24, 0x01	; 1
    50d6:	90 e0       	ldi	r25, 0x00	; 0
    50d8:	2c c0       	rjmp	.+88     	; 0x5132 <command_proc+0xa6>
            else
                return (command_console_extra(code) || command_console(code));
    50da:	8c 2f       	mov	r24, r28
    50dc:	0e 94 42 28 	call	0x5084	; 0x5084 <command_console_extra>
    50e0:	81 11       	cpse	r24, r1
    50e2:	26 c0       	rjmp	.+76     	; 0x5130 <command_proc+0xa4>
    );
}

static bool command_console(uint8_t code)
{
    switch (code) {
    50e4:	c4 31       	cpi	r28, 0x14	; 20
    50e6:	e1 f0       	breq	.+56     	; 0x5120 <command_proc+0x94>
    50e8:	70 f4       	brcc	.+28     	; 0x5106 <command_proc+0x7a>
    50ea:	cb 30       	cpi	r28, 0x0B	; 11
    50ec:	81 f0       	breq	.+32     	; 0x510e <command_proc+0x82>
    50ee:	c0 31       	cpi	r28, 0x10	; 16
    50f0:	d1 f4       	brne	.+52     	; 0x5126 <command_proc+0x9a>
        case KC_ESC:
            command_state = ONESHOT;
            return false;
#ifdef MOUSEKEY_ENABLE
        case KC_M:
            mousekey_console_help();
    50f2:	0e 94 77 24 	call	0x48ee	; 0x48ee <mousekey_console_help>
            print("M> ");
    50f6:	81 e0       	ldi	r24, 0x01	; 1
    50f8:	98 e0       	ldi	r25, 0x08	; 8
    50fa:	0e 94 79 06 	call	0xcf2	; 0xcf2 <xputs>
            command_state = MOUSEKEY;
    50fe:	82 e0       	ldi	r24, 0x02	; 2
    5100:	80 93 1c 03 	sts	0x031C, r24	; 0x80031c <command_state>
    5104:	15 c0       	rjmp	.+42     	; 0x5130 <command_proc+0xa4>
    );
}

static bool command_console(uint8_t code)
{
    switch (code) {
    5106:	c9 32       	cpi	r28, 0x29	; 41
    5108:	59 f0       	breq	.+22     	; 0x5120 <command_proc+0x94>
    510a:	c8 33       	cpi	r28, 0x38	; 56
    510c:	61 f4       	brne	.+24     	; 0x5126 <command_proc+0x9a>
/***********************************************************
 * Command console
 ***********************************************************/
static void command_console_help(void)
{
    print("\n\t- Console -\n"
    510e:	8e e0       	ldi	r24, 0x0E	; 14
    5110:	98 e0       	ldi	r25, 0x08	; 8
    5112:	0e 94 79 06 	call	0xcf2	; 0xcf2 <xputs>
#endif
        default:
            print("?");
            return false;
    }
    print("C> ");
    5116:	85 e0       	ldi	r24, 0x05	; 5
    5118:	98 e0       	ldi	r25, 0x08	; 8
    511a:	0e 94 79 06 	call	0xcf2	; 0xcf2 <xputs>
    511e:	08 c0       	rjmp	.+16     	; 0x5130 <command_proc+0xa4>
        case KC_SLASH: /* ? */
            command_console_help();
            break;
        case KC_Q:
        case KC_ESC:
            command_state = ONESHOT;
    5120:	10 92 1c 03 	sts	0x031C, r1	; 0x80031c <command_state>
    5124:	04 c1       	rjmp	.+520    	; 0x532e <command_proc+0x2a2>
            print("M> ");
            command_state = MOUSEKEY;
            return true;
#endif
        default:
            print("?");
    5126:	8f ef       	ldi	r24, 0xFF	; 255
    5128:	97 e0       	ldi	r25, 0x07	; 7
    512a:	0e 94 79 06 	call	0xcf2	; 0xcf2 <xputs>
    512e:	ff c0       	rjmp	.+510    	; 0x532e <command_proc+0x2a2>
            break;
        case CONSOLE:
            if (IS_COMMAND())
                return (command_extra(code) || command_common(code));
            else
                return (command_console_extra(code) || command_console(code));
    5130:	81 e0       	ldi	r24, 0x01	; 1
    5132:	81 70       	andi	r24, 0x01	; 1
    5134:	fe c0       	rjmp	.+508    	; 0x5332 <command_proc+0x2a6>
            "See http://en.wikipedia.org/wiki/Mouse_keys\n", MOUSEKEY_MOVE_DELTA,  MOUSEKEY_WHEEL_DELTA);
}

static bool mousekey_console(uint8_t code)
{
    switch (code) {
    5136:	c4 32       	cpi	r28, 0x24	; 36
    5138:	28 f5       	brcc	.+74     	; 0x5184 <command_proc+0xf8>
    513a:	ce 31       	cpi	r28, 0x1E	; 30
    513c:	08 f0       	brcs	.+2      	; 0x5140 <command_proc+0xb4>
    513e:	c1 c0       	rjmp	.+386    	; 0x52c2 <command_proc+0x236>
    5140:	cb 30       	cpi	r28, 0x0B	; 11
    5142:	a1 f1       	breq	.+104    	; 0x51ac <command_proc+0x120>
    5144:	d0 f4       	brcc	.+52     	; 0x517a <command_proc+0xee>
    5146:	c7 30       	cpi	r28, 0x07	; 7
    5148:	09 f0       	breq	.+2      	; 0x514c <command_proc+0xc0>
    514a:	d3 c0       	rjmp	.+422    	; 0x52f2 <command_proc+0x266>
            break;
        case KC_PGDN:
            mousekey_param_dec(mousekey_param, 10);
            break;
        case KC_D:
            mk_delay = MOUSEKEY_DELAY/10;
    514c:	8e e1       	ldi	r24, 0x1E	; 30
    514e:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <mk_delay>
            mk_interval = MOUSEKEY_INTERVAL;
    5152:	82 e3       	ldi	r24, 0x32	; 50
    5154:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <mk_interval>
            mk_max_speed = MOUSEKEY_MAX_SPEED;
    5158:	8a e0       	ldi	r24, 0x0A	; 10
    515a:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <mk_max_speed>
            mk_time_to_max = MOUSEKEY_TIME_TO_MAX;
    515e:	84 e1       	ldi	r24, 0x14	; 20
    5160:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <mk_time_to_max>
            mk_wheel_max_speed = MOUSEKEY_WHEEL_MAX_SPEED;
    5164:	88 e0       	ldi	r24, 0x08	; 8
    5166:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <mk_wheel_max_speed>
            mk_wheel_time_to_max = MOUSEKEY_WHEEL_TIME_TO_MAX;
    516a:	88 e2       	ldi	r24, 0x28	; 40
    516c:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <mk_wheel_time_to_max>
            print("set default\n");
    5170:	85 ea       	ldi	r24, 0xA5	; 165
    5172:	96 e0       	ldi	r25, 0x06	; 6
    5174:	0e 94 79 06 	call	0xcf2	; 0xcf2 <xputs>
    5178:	bf c0       	rjmp	.+382    	; 0x52f8 <command_proc+0x26c>
            "See http://en.wikipedia.org/wiki/Mouse_keys\n", MOUSEKEY_MOVE_DELTA,  MOUSEKEY_WHEEL_DELTA);
}

static bool mousekey_console(uint8_t code)
{
    switch (code) {
    517a:	c3 31       	cpi	r28, 0x13	; 19
    517c:	49 f1       	breq	.+82     	; 0x51d0 <command_proc+0x144>
    517e:	c4 31       	cpi	r28, 0x14	; 20
    5180:	c1 f0       	breq	.+48     	; 0x51b2 <command_proc+0x126>
    5182:	b7 c0       	rjmp	.+366    	; 0x52f2 <command_proc+0x266>
    5184:	cb 34       	cpi	r28, 0x4B	; 75
    5186:	09 f4       	brne	.+2      	; 0x518a <command_proc+0xfe>
    5188:	a9 c0       	rjmp	.+338    	; 0x52dc <command_proc+0x250>
    518a:	28 f4       	brcc	.+10     	; 0x5196 <command_proc+0x10a>
    518c:	c9 32       	cpi	r28, 0x29	; 41
    518e:	89 f0       	breq	.+34     	; 0x51b2 <command_proc+0x126>
    5190:	c8 33       	cpi	r28, 0x38	; 56
    5192:	61 f0       	breq	.+24     	; 0x51ac <command_proc+0x120>
    5194:	ae c0       	rjmp	.+348    	; 0x52f2 <command_proc+0x266>
    5196:	c1 35       	cpi	r28, 0x51	; 81
    5198:	09 f4       	brne	.+2      	; 0x519c <command_proc+0x110>
    519a:	9e c0       	rjmp	.+316    	; 0x52d8 <command_proc+0x24c>
    519c:	c2 35       	cpi	r28, 0x52	; 82
    519e:	09 f4       	brne	.+2      	; 0x51a2 <command_proc+0x116>
    51a0:	99 c0       	rjmp	.+306    	; 0x52d4 <command_proc+0x248>
    51a2:	ce 34       	cpi	r28, 0x4E	; 78
    51a4:	09 f0       	breq	.+2      	; 0x51a8 <command_proc+0x11c>
    51a6:	a5 c0       	rjmp	.+330    	; 0x52f2 <command_proc+0x266>
            break;
        case KC_PGUP:
            mousekey_param_inc(mousekey_param, 10);
            break;
        case KC_PGDN:
            mousekey_param_dec(mousekey_param, 10);
    51a8:	6a e0       	ldi	r22, 0x0A	; 10
    51aa:	9e c0       	rjmp	.+316    	; 0x52e8 <command_proc+0x25c>
static bool mousekey_console(uint8_t code)
{
    switch (code) {
        case KC_H:
        case KC_SLASH: /* ? */
            mousekey_console_help();
    51ac:	0e 94 77 24 	call	0x48ee	; 0x48ee <mousekey_console_help>
    51b0:	a3 c0       	rjmp	.+326    	; 0x52f8 <command_proc+0x26c>
            break;
        case KC_Q:
        case KC_ESC:
            if (mousekey_param) {
    51b2:	80 91 1b 03 	lds	r24, 0x031B	; 0x80031b <mousekey_param>
    51b6:	88 23       	and	r24, r24
    51b8:	19 f0       	breq	.+6      	; 0x51c0 <command_proc+0x134>
                mousekey_param = 0;
    51ba:	10 92 1b 03 	sts	0x031B, r1	; 0x80031b <mousekey_param>
    51be:	9c c0       	rjmp	.+312    	; 0x52f8 <command_proc+0x26c>
            } else {
                print("C> ");
    51c0:	82 eb       	ldi	r24, 0xB2	; 178
    51c2:	96 e0       	ldi	r25, 0x06	; 6
    51c4:	0e 94 79 06 	call	0xcf2	; 0xcf2 <xputs>
                command_state = CONSOLE;
    51c8:	81 e0       	ldi	r24, 0x01	; 1
    51ca:	80 93 1c 03 	sts	0x031C, r24	; 0x80031c <command_state>
    51ce:	b1 c0       	rjmp	.+354    	; 0x5332 <command_proc+0x2a6>
 ***********************************************************/
static uint8_t mousekey_param = 0;

static void mousekey_param_print(void)
{
    print("\n\t- Values -\n");
    51d0:	8c e8       	ldi	r24, 0x8C	; 140
    51d2:	96 e0       	ldi	r25, 0x06	; 6
    51d4:	0e 94 79 06 	call	0xcf2	; 0xcf2 <xputs>
    print("1: delay(*10ms): "); pdec(mk_delay); print("\n");
    51d8:	8a e7       	ldi	r24, 0x7A	; 122
    51da:	96 e0       	ldi	r25, 0x06	; 6
    51dc:	0e 94 79 06 	call	0xcf2	; 0xcf2 <xputs>
    51e0:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <mk_delay>
    51e4:	1f 92       	push	r1
    51e6:	8f 93       	push	r24
    51e8:	87 e7       	ldi	r24, 0x77	; 119
    51ea:	96 e0       	ldi	r25, 0x06	; 6
    51ec:	9f 93       	push	r25
    51ee:	8f 93       	push	r24
    51f0:	0e 94 12 07 	call	0xe24	; 0xe24 <__xprintf>
    51f4:	85 e7       	ldi	r24, 0x75	; 117
    51f6:	96 e0       	ldi	r25, 0x06	; 6
    51f8:	0e 94 79 06 	call	0xcf2	; 0xcf2 <xputs>
    print("2: interval(ms): "); pdec(mk_interval); print("\n");
    51fc:	83 e6       	ldi	r24, 0x63	; 99
    51fe:	96 e0       	ldi	r25, 0x06	; 6
    5200:	0e 94 79 06 	call	0xcf2	; 0xcf2 <xputs>
    5204:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <mk_interval>
    5208:	1f 92       	push	r1
    520a:	8f 93       	push	r24
    520c:	80 e6       	ldi	r24, 0x60	; 96
    520e:	96 e0       	ldi	r25, 0x06	; 6
    5210:	9f 93       	push	r25
    5212:	8f 93       	push	r24
    5214:	0e 94 12 07 	call	0xe24	; 0xe24 <__xprintf>
    5218:	8e e5       	ldi	r24, 0x5E	; 94
    521a:	96 e0       	ldi	r25, 0x06	; 6
    521c:	0e 94 79 06 	call	0xcf2	; 0xcf2 <xputs>
    print("3: max_speed: "); pdec(mk_max_speed); print("\n");
    5220:	8f e4       	ldi	r24, 0x4F	; 79
    5222:	96 e0       	ldi	r25, 0x06	; 6
    5224:	0e 94 79 06 	call	0xcf2	; 0xcf2 <xputs>
    5228:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <mk_max_speed>
    522c:	1f 92       	push	r1
    522e:	8f 93       	push	r24
    5230:	8c e4       	ldi	r24, 0x4C	; 76
    5232:	96 e0       	ldi	r25, 0x06	; 6
    5234:	9f 93       	push	r25
    5236:	8f 93       	push	r24
    5238:	0e 94 12 07 	call	0xe24	; 0xe24 <__xprintf>
    523c:	8a e4       	ldi	r24, 0x4A	; 74
    523e:	96 e0       	ldi	r25, 0x06	; 6
    5240:	0e 94 79 06 	call	0xcf2	; 0xcf2 <xputs>
    print("4: time_to_max: "); pdec(mk_time_to_max); print("\n");
    5244:	89 e3       	ldi	r24, 0x39	; 57
    5246:	96 e0       	ldi	r25, 0x06	; 6
    5248:	0e 94 79 06 	call	0xcf2	; 0xcf2 <xputs>
    524c:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <mk_time_to_max>
    5250:	1f 92       	push	r1
    5252:	8f 93       	push	r24
    5254:	86 e3       	ldi	r24, 0x36	; 54
    5256:	96 e0       	ldi	r25, 0x06	; 6
    5258:	9f 93       	push	r25
    525a:	8f 93       	push	r24
    525c:	0e 94 12 07 	call	0xe24	; 0xe24 <__xprintf>
    5260:	84 e3       	ldi	r24, 0x34	; 52
    5262:	96 e0       	ldi	r25, 0x06	; 6
    5264:	0e 94 79 06 	call	0xcf2	; 0xcf2 <xputs>
    print("5: wheel_max_speed: "); pdec(mk_wheel_max_speed); print("\n");
    5268:	8f e1       	ldi	r24, 0x1F	; 31
    526a:	96 e0       	ldi	r25, 0x06	; 6
    526c:	0e 94 79 06 	call	0xcf2	; 0xcf2 <xputs>
    5270:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <mk_wheel_max_speed>
    5274:	1f 92       	push	r1
    5276:	8f 93       	push	r24
    5278:	8c e1       	ldi	r24, 0x1C	; 28
    527a:	96 e0       	ldi	r25, 0x06	; 6
    527c:	9f 93       	push	r25
    527e:	8f 93       	push	r24
    5280:	0e 94 12 07 	call	0xe24	; 0xe24 <__xprintf>
    5284:	8a e1       	ldi	r24, 0x1A	; 26
    5286:	96 e0       	ldi	r25, 0x06	; 6
    5288:	0e 94 79 06 	call	0xcf2	; 0xcf2 <xputs>
    print("6: wheel_time_to_max: "); pdec(mk_wheel_time_to_max); print("\n");
    528c:	83 e0       	ldi	r24, 0x03	; 3
    528e:	96 e0       	ldi	r25, 0x06	; 6
    5290:	0e 94 79 06 	call	0xcf2	; 0xcf2 <xputs>
    5294:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <mk_wheel_time_to_max>
    5298:	1f 92       	push	r1
    529a:	8f 93       	push	r24
    529c:	80 e0       	ldi	r24, 0x00	; 0
    529e:	96 e0       	ldi	r25, 0x06	; 6
    52a0:	9f 93       	push	r25
    52a2:	8f 93       	push	r24
    52a4:	0e 94 12 07 	call	0xe24	; 0xe24 <__xprintf>
    52a8:	8e ef       	ldi	r24, 0xFE	; 254
    52aa:	95 e0       	ldi	r25, 0x05	; 5
    52ac:	0e 94 79 06 	call	0xcf2	; 0xcf2 <xputs>
    52b0:	8d b7       	in	r24, 0x3d	; 61
    52b2:	9e b7       	in	r25, 0x3e	; 62
    52b4:	48 96       	adiw	r24, 0x18	; 24
    52b6:	0f b6       	in	r0, 0x3f	; 63
    52b8:	f8 94       	cli
    52ba:	9e bf       	out	0x3e, r25	; 62
    52bc:	0f be       	out	0x3f, r0	; 63
    52be:	8d bf       	out	0x3d, r24	; 61
    52c0:	1b c0       	rjmp	.+54     	; 0x52f8 <command_proc+0x26c>
    52c2:	ce 51       	subi	r28, 0x1E	; 30
    52c4:	ec 2f       	mov	r30, r28
    52c6:	f0 e0       	ldi	r31, 0x00	; 0
    52c8:	ec 5c       	subi	r30, 0xCC	; 204
    52ca:	fe 4f       	sbci	r31, 0xFE	; 254
        case KC_2:
        case KC_3:
        case KC_4:
        case KC_5:
        case KC_6:
            mousekey_param = numkey2num(code);
    52cc:	80 81       	ld	r24, Z
    52ce:	80 93 1b 03 	sts	0x031B, r24	; 0x80031b <mousekey_param>
    52d2:	12 c0       	rjmp	.+36     	; 0x52f8 <command_proc+0x26c>
            break;
        case KC_UP:
            mousekey_param_inc(mousekey_param, 1);
    52d4:	61 e0       	ldi	r22, 0x01	; 1
    52d6:	03 c0       	rjmp	.+6      	; 0x52de <command_proc+0x252>
            break;
        case KC_DOWN:
            mousekey_param_dec(mousekey_param, 1);
    52d8:	61 e0       	ldi	r22, 0x01	; 1
    52da:	06 c0       	rjmp	.+12     	; 0x52e8 <command_proc+0x25c>
            break;
        case KC_PGUP:
            mousekey_param_inc(mousekey_param, 10);
    52dc:	6a e0       	ldi	r22, 0x0A	; 10
    52de:	80 91 1b 03 	lds	r24, 0x031B	; 0x80031b <mousekey_param>
    52e2:	0e 94 8e 24 	call	0x491c	; 0x491c <mousekey_param_inc>
    52e6:	08 c0       	rjmp	.+16     	; 0x52f8 <command_proc+0x26c>
            break;
        case KC_PGDN:
            mousekey_param_dec(mousekey_param, 10);
    52e8:	80 91 1b 03 	lds	r24, 0x031B	; 0x80031b <mousekey_param>
    52ec:	0e 94 31 25 	call	0x4a62	; 0x4a62 <mousekey_param_dec>
    52f0:	03 c0       	rjmp	.+6      	; 0x52f8 <command_proc+0x26c>
            mk_wheel_max_speed = MOUSEKEY_WHEEL_MAX_SPEED;
            mk_wheel_time_to_max = MOUSEKEY_WHEEL_TIME_TO_MAX;
            print("set default\n");
            break;
        default:
            print("?");
    52f2:	83 ea       	ldi	r24, 0xA3	; 163
    52f4:	96 e0       	ldi	r25, 0x06	; 6
    52f6:	13 c0       	rjmp	.+38     	; 0x531e <command_proc+0x292>
            return false;
    }
    if (mousekey_param) {
    52f8:	80 91 1b 03 	lds	r24, 0x031B	; 0x80031b <mousekey_param>
    52fc:	88 23       	and	r24, r24
    52fe:	69 f0       	breq	.+26     	; 0x531a <command_proc+0x28e>
        xprintf("M%d> ", mousekey_param);
    5300:	1f 92       	push	r1
    5302:	8f 93       	push	r24
    5304:	8d e9       	ldi	r24, 0x9D	; 157
    5306:	96 e0       	ldi	r25, 0x06	; 6
    5308:	9f 93       	push	r25
    530a:	8f 93       	push	r24
    530c:	0e 94 12 07 	call	0xe24	; 0xe24 <__xprintf>
    5310:	0f 90       	pop	r0
    5312:	0f 90       	pop	r0
    5314:	0f 90       	pop	r0
    5316:	0f 90       	pop	r0
    5318:	04 c0       	rjmp	.+8      	; 0x5322 <command_proc+0x296>
    } else {
        print("M>" );
    531a:	8a e9       	ldi	r24, 0x9A	; 154
    531c:	96 e0       	ldi	r25, 0x06	; 6
    531e:	0e 94 79 06 	call	0xcf2	; 0xcf2 <xputs>
#endif
        default:
            command_state = ONESHOT;
            return false;
    }
    return true;
    5322:	81 e0       	ldi	r24, 0x01	; 1
    5324:	06 c0       	rjmp	.+12     	; 0x5332 <command_proc+0x2a6>
        case MOUSEKEY:
            mousekey_console(code);
            break;
#endif
        default:
            command_state = ONESHOT;
    5326:	10 92 1c 03 	sts	0x031C, r1	; 0x80031c <command_state>
bool command_proc(uint8_t code)
{
    switch (command_state) {
        case ONESHOT:
            if (!IS_COMMAND())
                return false;
    532a:	80 e0       	ldi	r24, 0x00	; 0
    532c:	02 c0       	rjmp	.+4      	; 0x5332 <command_proc+0x2a6>
            break;
        case CONSOLE:
            if (IS_COMMAND())
                return (command_extra(code) || command_common(code));
            else
                return (command_console_extra(code) || command_console(code));
    532e:	80 e0       	ldi	r24, 0x00	; 0
    5330:	00 cf       	rjmp	.-512    	; 0x5132 <command_proc+0xa6>
        default:
            command_state = ONESHOT;
            return false;
    }
    return true;
}
    5332:	cf 91       	pop	r28
    5334:	08 95       	ret

00005336 <__fixsfsi>:
    5336:	0e 94 a2 29 	call	0x5344	; 0x5344 <__fixunssfsi>
    533a:	68 94       	set
    533c:	b1 11       	cpse	r27, r1
    533e:	0c 94 31 2a 	jmp	0x5462	; 0x5462 <__fp_szero>
    5342:	08 95       	ret

00005344 <__fixunssfsi>:
    5344:	0e 94 16 2a 	call	0x542c	; 0x542c <__fp_splitA>
    5348:	88 f0       	brcs	.+34     	; 0x536c <__fixunssfsi+0x28>
    534a:	9f 57       	subi	r25, 0x7F	; 127
    534c:	98 f0       	brcs	.+38     	; 0x5374 <__fixunssfsi+0x30>
    534e:	b9 2f       	mov	r27, r25
    5350:	99 27       	eor	r25, r25
    5352:	b7 51       	subi	r27, 0x17	; 23
    5354:	b0 f0       	brcs	.+44     	; 0x5382 <__fixunssfsi+0x3e>
    5356:	e1 f0       	breq	.+56     	; 0x5390 <__fixunssfsi+0x4c>
    5358:	66 0f       	add	r22, r22
    535a:	77 1f       	adc	r23, r23
    535c:	88 1f       	adc	r24, r24
    535e:	99 1f       	adc	r25, r25
    5360:	1a f0       	brmi	.+6      	; 0x5368 <__fixunssfsi+0x24>
    5362:	ba 95       	dec	r27
    5364:	c9 f7       	brne	.-14     	; 0x5358 <__fixunssfsi+0x14>
    5366:	14 c0       	rjmp	.+40     	; 0x5390 <__fixunssfsi+0x4c>
    5368:	b1 30       	cpi	r27, 0x01	; 1
    536a:	91 f0       	breq	.+36     	; 0x5390 <__fixunssfsi+0x4c>
    536c:	0e 94 30 2a 	call	0x5460	; 0x5460 <__fp_zero>
    5370:	b1 e0       	ldi	r27, 0x01	; 1
    5372:	08 95       	ret
    5374:	0c 94 30 2a 	jmp	0x5460	; 0x5460 <__fp_zero>
    5378:	67 2f       	mov	r22, r23
    537a:	78 2f       	mov	r23, r24
    537c:	88 27       	eor	r24, r24
    537e:	b8 5f       	subi	r27, 0xF8	; 248
    5380:	39 f0       	breq	.+14     	; 0x5390 <__fixunssfsi+0x4c>
    5382:	b9 3f       	cpi	r27, 0xF9	; 249
    5384:	cc f3       	brlt	.-14     	; 0x5378 <__fixunssfsi+0x34>
    5386:	86 95       	lsr	r24
    5388:	77 95       	ror	r23
    538a:	67 95       	ror	r22
    538c:	b3 95       	inc	r27
    538e:	d9 f7       	brne	.-10     	; 0x5386 <__fixunssfsi+0x42>
    5390:	3e f4       	brtc	.+14     	; 0x53a0 <__fixunssfsi+0x5c>
    5392:	90 95       	com	r25
    5394:	80 95       	com	r24
    5396:	70 95       	com	r23
    5398:	61 95       	neg	r22
    539a:	7f 4f       	sbci	r23, 0xFF	; 255
    539c:	8f 4f       	sbci	r24, 0xFF	; 255
    539e:	9f 4f       	sbci	r25, 0xFF	; 255
    53a0:	08 95       	ret

000053a2 <__floatunsisf>:
    53a2:	e8 94       	clt
    53a4:	09 c0       	rjmp	.+18     	; 0x53b8 <__floatsisf+0x12>

000053a6 <__floatsisf>:
    53a6:	97 fb       	bst	r25, 7
    53a8:	3e f4       	brtc	.+14     	; 0x53b8 <__floatsisf+0x12>
    53aa:	90 95       	com	r25
    53ac:	80 95       	com	r24
    53ae:	70 95       	com	r23
    53b0:	61 95       	neg	r22
    53b2:	7f 4f       	sbci	r23, 0xFF	; 255
    53b4:	8f 4f       	sbci	r24, 0xFF	; 255
    53b6:	9f 4f       	sbci	r25, 0xFF	; 255
    53b8:	99 23       	and	r25, r25
    53ba:	a9 f0       	breq	.+42     	; 0x53e6 <__floatsisf+0x40>
    53bc:	f9 2f       	mov	r31, r25
    53be:	96 e9       	ldi	r25, 0x96	; 150
    53c0:	bb 27       	eor	r27, r27
    53c2:	93 95       	inc	r25
    53c4:	f6 95       	lsr	r31
    53c6:	87 95       	ror	r24
    53c8:	77 95       	ror	r23
    53ca:	67 95       	ror	r22
    53cc:	b7 95       	ror	r27
    53ce:	f1 11       	cpse	r31, r1
    53d0:	f8 cf       	rjmp	.-16     	; 0x53c2 <__floatsisf+0x1c>
    53d2:	fa f4       	brpl	.+62     	; 0x5412 <__floatsisf+0x6c>
    53d4:	bb 0f       	add	r27, r27
    53d6:	11 f4       	brne	.+4      	; 0x53dc <__floatsisf+0x36>
    53d8:	60 ff       	sbrs	r22, 0
    53da:	1b c0       	rjmp	.+54     	; 0x5412 <__floatsisf+0x6c>
    53dc:	6f 5f       	subi	r22, 0xFF	; 255
    53de:	7f 4f       	sbci	r23, 0xFF	; 255
    53e0:	8f 4f       	sbci	r24, 0xFF	; 255
    53e2:	9f 4f       	sbci	r25, 0xFF	; 255
    53e4:	16 c0       	rjmp	.+44     	; 0x5412 <__floatsisf+0x6c>
    53e6:	88 23       	and	r24, r24
    53e8:	11 f0       	breq	.+4      	; 0x53ee <__floatsisf+0x48>
    53ea:	96 e9       	ldi	r25, 0x96	; 150
    53ec:	11 c0       	rjmp	.+34     	; 0x5410 <__floatsisf+0x6a>
    53ee:	77 23       	and	r23, r23
    53f0:	21 f0       	breq	.+8      	; 0x53fa <__floatsisf+0x54>
    53f2:	9e e8       	ldi	r25, 0x8E	; 142
    53f4:	87 2f       	mov	r24, r23
    53f6:	76 2f       	mov	r23, r22
    53f8:	05 c0       	rjmp	.+10     	; 0x5404 <__floatsisf+0x5e>
    53fa:	66 23       	and	r22, r22
    53fc:	71 f0       	breq	.+28     	; 0x541a <__floatsisf+0x74>
    53fe:	96 e8       	ldi	r25, 0x86	; 134
    5400:	86 2f       	mov	r24, r22
    5402:	70 e0       	ldi	r23, 0x00	; 0
    5404:	60 e0       	ldi	r22, 0x00	; 0
    5406:	2a f0       	brmi	.+10     	; 0x5412 <__floatsisf+0x6c>
    5408:	9a 95       	dec	r25
    540a:	66 0f       	add	r22, r22
    540c:	77 1f       	adc	r23, r23
    540e:	88 1f       	adc	r24, r24
    5410:	da f7       	brpl	.-10     	; 0x5408 <__floatsisf+0x62>
    5412:	88 0f       	add	r24, r24
    5414:	96 95       	lsr	r25
    5416:	87 95       	ror	r24
    5418:	97 f9       	bld	r25, 7
    541a:	08 95       	ret

0000541c <__fp_split3>:
    541c:	57 fd       	sbrc	r21, 7
    541e:	90 58       	subi	r25, 0x80	; 128
    5420:	44 0f       	add	r20, r20
    5422:	55 1f       	adc	r21, r21
    5424:	59 f0       	breq	.+22     	; 0x543c <__fp_splitA+0x10>
    5426:	5f 3f       	cpi	r21, 0xFF	; 255
    5428:	71 f0       	breq	.+28     	; 0x5446 <__fp_splitA+0x1a>
    542a:	47 95       	ror	r20

0000542c <__fp_splitA>:
    542c:	88 0f       	add	r24, r24
    542e:	97 fb       	bst	r25, 7
    5430:	99 1f       	adc	r25, r25
    5432:	61 f0       	breq	.+24     	; 0x544c <__fp_splitA+0x20>
    5434:	9f 3f       	cpi	r25, 0xFF	; 255
    5436:	79 f0       	breq	.+30     	; 0x5456 <__fp_splitA+0x2a>
    5438:	87 95       	ror	r24
    543a:	08 95       	ret
    543c:	12 16       	cp	r1, r18
    543e:	13 06       	cpc	r1, r19
    5440:	14 06       	cpc	r1, r20
    5442:	55 1f       	adc	r21, r21
    5444:	f2 cf       	rjmp	.-28     	; 0x542a <__fp_split3+0xe>
    5446:	46 95       	lsr	r20
    5448:	f1 df       	rcall	.-30     	; 0x542c <__fp_splitA>
    544a:	08 c0       	rjmp	.+16     	; 0x545c <__fp_splitA+0x30>
    544c:	16 16       	cp	r1, r22
    544e:	17 06       	cpc	r1, r23
    5450:	18 06       	cpc	r1, r24
    5452:	99 1f       	adc	r25, r25
    5454:	f1 cf       	rjmp	.-30     	; 0x5438 <__fp_splitA+0xc>
    5456:	86 95       	lsr	r24
    5458:	71 05       	cpc	r23, r1
    545a:	61 05       	cpc	r22, r1
    545c:	08 94       	sec
    545e:	08 95       	ret

00005460 <__fp_zero>:
    5460:	e8 94       	clt

00005462 <__fp_szero>:
    5462:	bb 27       	eor	r27, r27
    5464:	66 27       	eor	r22, r22
    5466:	77 27       	eor	r23, r23
    5468:	cb 01       	movw	r24, r22
    546a:	97 f9       	bld	r25, 7
    546c:	08 95       	ret

0000546e <__mulsf3>:
    546e:	0e 94 4a 2a 	call	0x5494	; 0x5494 <__mulsf3x>
    5472:	0c 94 bb 2a 	jmp	0x5576	; 0x5576 <__fp_round>
    5476:	0e 94 ad 2a 	call	0x555a	; 0x555a <__fp_pscA>
    547a:	38 f0       	brcs	.+14     	; 0x548a <__mulsf3+0x1c>
    547c:	0e 94 b4 2a 	call	0x5568	; 0x5568 <__fp_pscB>
    5480:	20 f0       	brcs	.+8      	; 0x548a <__mulsf3+0x1c>
    5482:	95 23       	and	r25, r21
    5484:	11 f0       	breq	.+4      	; 0x548a <__mulsf3+0x1c>
    5486:	0c 94 a4 2a 	jmp	0x5548	; 0x5548 <__fp_inf>
    548a:	0c 94 aa 2a 	jmp	0x5554	; 0x5554 <__fp_nan>
    548e:	11 24       	eor	r1, r1
    5490:	0c 94 31 2a 	jmp	0x5462	; 0x5462 <__fp_szero>

00005494 <__mulsf3x>:
    5494:	0e 94 0e 2a 	call	0x541c	; 0x541c <__fp_split3>
    5498:	70 f3       	brcs	.-36     	; 0x5476 <__mulsf3+0x8>

0000549a <__mulsf3_pse>:
    549a:	95 9f       	mul	r25, r21
    549c:	c1 f3       	breq	.-16     	; 0x548e <__mulsf3+0x20>
    549e:	95 0f       	add	r25, r21
    54a0:	50 e0       	ldi	r21, 0x00	; 0
    54a2:	55 1f       	adc	r21, r21
    54a4:	62 9f       	mul	r22, r18
    54a6:	f0 01       	movw	r30, r0
    54a8:	72 9f       	mul	r23, r18
    54aa:	bb 27       	eor	r27, r27
    54ac:	f0 0d       	add	r31, r0
    54ae:	b1 1d       	adc	r27, r1
    54b0:	63 9f       	mul	r22, r19
    54b2:	aa 27       	eor	r26, r26
    54b4:	f0 0d       	add	r31, r0
    54b6:	b1 1d       	adc	r27, r1
    54b8:	aa 1f       	adc	r26, r26
    54ba:	64 9f       	mul	r22, r20
    54bc:	66 27       	eor	r22, r22
    54be:	b0 0d       	add	r27, r0
    54c0:	a1 1d       	adc	r26, r1
    54c2:	66 1f       	adc	r22, r22
    54c4:	82 9f       	mul	r24, r18
    54c6:	22 27       	eor	r18, r18
    54c8:	b0 0d       	add	r27, r0
    54ca:	a1 1d       	adc	r26, r1
    54cc:	62 1f       	adc	r22, r18
    54ce:	73 9f       	mul	r23, r19
    54d0:	b0 0d       	add	r27, r0
    54d2:	a1 1d       	adc	r26, r1
    54d4:	62 1f       	adc	r22, r18
    54d6:	83 9f       	mul	r24, r19
    54d8:	a0 0d       	add	r26, r0
    54da:	61 1d       	adc	r22, r1
    54dc:	22 1f       	adc	r18, r18
    54de:	74 9f       	mul	r23, r20
    54e0:	33 27       	eor	r19, r19
    54e2:	a0 0d       	add	r26, r0
    54e4:	61 1d       	adc	r22, r1
    54e6:	23 1f       	adc	r18, r19
    54e8:	84 9f       	mul	r24, r20
    54ea:	60 0d       	add	r22, r0
    54ec:	21 1d       	adc	r18, r1
    54ee:	82 2f       	mov	r24, r18
    54f0:	76 2f       	mov	r23, r22
    54f2:	6a 2f       	mov	r22, r26
    54f4:	11 24       	eor	r1, r1
    54f6:	9f 57       	subi	r25, 0x7F	; 127
    54f8:	50 40       	sbci	r21, 0x00	; 0
    54fa:	9a f0       	brmi	.+38     	; 0x5522 <__mulsf3_pse+0x88>
    54fc:	f1 f0       	breq	.+60     	; 0x553a <__mulsf3_pse+0xa0>
    54fe:	88 23       	and	r24, r24
    5500:	4a f0       	brmi	.+18     	; 0x5514 <__mulsf3_pse+0x7a>
    5502:	ee 0f       	add	r30, r30
    5504:	ff 1f       	adc	r31, r31
    5506:	bb 1f       	adc	r27, r27
    5508:	66 1f       	adc	r22, r22
    550a:	77 1f       	adc	r23, r23
    550c:	88 1f       	adc	r24, r24
    550e:	91 50       	subi	r25, 0x01	; 1
    5510:	50 40       	sbci	r21, 0x00	; 0
    5512:	a9 f7       	brne	.-22     	; 0x54fe <__mulsf3_pse+0x64>
    5514:	9e 3f       	cpi	r25, 0xFE	; 254
    5516:	51 05       	cpc	r21, r1
    5518:	80 f0       	brcs	.+32     	; 0x553a <__mulsf3_pse+0xa0>
    551a:	0c 94 a4 2a 	jmp	0x5548	; 0x5548 <__fp_inf>
    551e:	0c 94 31 2a 	jmp	0x5462	; 0x5462 <__fp_szero>
    5522:	5f 3f       	cpi	r21, 0xFF	; 255
    5524:	e4 f3       	brlt	.-8      	; 0x551e <__mulsf3_pse+0x84>
    5526:	98 3e       	cpi	r25, 0xE8	; 232
    5528:	d4 f3       	brlt	.-12     	; 0x551e <__mulsf3_pse+0x84>
    552a:	86 95       	lsr	r24
    552c:	77 95       	ror	r23
    552e:	67 95       	ror	r22
    5530:	b7 95       	ror	r27
    5532:	f7 95       	ror	r31
    5534:	e7 95       	ror	r30
    5536:	9f 5f       	subi	r25, 0xFF	; 255
    5538:	c1 f7       	brne	.-16     	; 0x552a <__mulsf3_pse+0x90>
    553a:	fe 2b       	or	r31, r30
    553c:	88 0f       	add	r24, r24
    553e:	91 1d       	adc	r25, r1
    5540:	96 95       	lsr	r25
    5542:	87 95       	ror	r24
    5544:	97 f9       	bld	r25, 7
    5546:	08 95       	ret

00005548 <__fp_inf>:
    5548:	97 f9       	bld	r25, 7
    554a:	9f 67       	ori	r25, 0x7F	; 127
    554c:	80 e8       	ldi	r24, 0x80	; 128
    554e:	70 e0       	ldi	r23, 0x00	; 0
    5550:	60 e0       	ldi	r22, 0x00	; 0
    5552:	08 95       	ret

00005554 <__fp_nan>:
    5554:	9f ef       	ldi	r25, 0xFF	; 255
    5556:	80 ec       	ldi	r24, 0xC0	; 192
    5558:	08 95       	ret

0000555a <__fp_pscA>:
    555a:	00 24       	eor	r0, r0
    555c:	0a 94       	dec	r0
    555e:	16 16       	cp	r1, r22
    5560:	17 06       	cpc	r1, r23
    5562:	18 06       	cpc	r1, r24
    5564:	09 06       	cpc	r0, r25
    5566:	08 95       	ret

00005568 <__fp_pscB>:
    5568:	00 24       	eor	r0, r0
    556a:	0a 94       	dec	r0
    556c:	12 16       	cp	r1, r18
    556e:	13 06       	cpc	r1, r19
    5570:	14 06       	cpc	r1, r20
    5572:	05 06       	cpc	r0, r21
    5574:	08 95       	ret

00005576 <__fp_round>:
    5576:	09 2e       	mov	r0, r25
    5578:	03 94       	inc	r0
    557a:	00 0c       	add	r0, r0
    557c:	11 f4       	brne	.+4      	; 0x5582 <__fp_round+0xc>
    557e:	88 23       	and	r24, r24
    5580:	52 f0       	brmi	.+20     	; 0x5596 <__fp_round+0x20>
    5582:	bb 0f       	add	r27, r27
    5584:	40 f4       	brcc	.+16     	; 0x5596 <__fp_round+0x20>
    5586:	bf 2b       	or	r27, r31
    5588:	11 f4       	brne	.+4      	; 0x558e <__fp_round+0x18>
    558a:	60 ff       	sbrs	r22, 0
    558c:	04 c0       	rjmp	.+8      	; 0x5596 <__fp_round+0x20>
    558e:	6f 5f       	subi	r22, 0xFF	; 255
    5590:	7f 4f       	sbci	r23, 0xFF	; 255
    5592:	8f 4f       	sbci	r24, 0xFF	; 255
    5594:	9f 4f       	sbci	r25, 0xFF	; 255
    5596:	08 95       	ret

00005598 <__divmodhi4>:
    5598:	97 fb       	bst	r25, 7
    559a:	07 2e       	mov	r0, r23
    559c:	16 f4       	brtc	.+4      	; 0x55a2 <__divmodhi4+0xa>
    559e:	00 94       	com	r0
    55a0:	07 d0       	rcall	.+14     	; 0x55b0 <__divmodhi4_neg1>
    55a2:	77 fd       	sbrc	r23, 7
    55a4:	09 d0       	rcall	.+18     	; 0x55b8 <__divmodhi4_neg2>
    55a6:	0e 94 e6 2a 	call	0x55cc	; 0x55cc <__udivmodhi4>
    55aa:	07 fc       	sbrc	r0, 7
    55ac:	05 d0       	rcall	.+10     	; 0x55b8 <__divmodhi4_neg2>
    55ae:	3e f4       	brtc	.+14     	; 0x55be <__divmodhi4_exit>

000055b0 <__divmodhi4_neg1>:
    55b0:	90 95       	com	r25
    55b2:	81 95       	neg	r24
    55b4:	9f 4f       	sbci	r25, 0xFF	; 255
    55b6:	08 95       	ret

000055b8 <__divmodhi4_neg2>:
    55b8:	70 95       	com	r23
    55ba:	61 95       	neg	r22
    55bc:	7f 4f       	sbci	r23, 0xFF	; 255

000055be <__divmodhi4_exit>:
    55be:	08 95       	ret

000055c0 <__tablejump2__>:
    55c0:	ee 0f       	add	r30, r30
    55c2:	ff 1f       	adc	r31, r31
    55c4:	05 90       	lpm	r0, Z+
    55c6:	f4 91       	lpm	r31, Z
    55c8:	e0 2d       	mov	r30, r0
    55ca:	09 94       	ijmp

000055cc <__udivmodhi4>:
    55cc:	aa 1b       	sub	r26, r26
    55ce:	bb 1b       	sub	r27, r27
    55d0:	51 e1       	ldi	r21, 0x11	; 17
    55d2:	07 c0       	rjmp	.+14     	; 0x55e2 <__udivmodhi4_ep>

000055d4 <__udivmodhi4_loop>:
    55d4:	aa 1f       	adc	r26, r26
    55d6:	bb 1f       	adc	r27, r27
    55d8:	a6 17       	cp	r26, r22
    55da:	b7 07       	cpc	r27, r23
    55dc:	10 f0       	brcs	.+4      	; 0x55e2 <__udivmodhi4_ep>
    55de:	a6 1b       	sub	r26, r22
    55e0:	b7 0b       	sbc	r27, r23

000055e2 <__udivmodhi4_ep>:
    55e2:	88 1f       	adc	r24, r24
    55e4:	99 1f       	adc	r25, r25
    55e6:	5a 95       	dec	r21
    55e8:	a9 f7       	brne	.-22     	; 0x55d4 <__udivmodhi4_loop>
    55ea:	80 95       	com	r24
    55ec:	90 95       	com	r25
    55ee:	bc 01       	movw	r22, r24
    55f0:	cd 01       	movw	r24, r26
    55f2:	08 95       	ret

000055f4 <eeprom_read_byte>:
    55f4:	f9 99       	sbic	0x1f, 1	; 31
    55f6:	fe cf       	rjmp	.-4      	; 0x55f4 <eeprom_read_byte>
    55f8:	92 bd       	out	0x22, r25	; 34
    55fa:	81 bd       	out	0x21, r24	; 33
    55fc:	f8 9a       	sbi	0x1f, 0	; 31
    55fe:	99 27       	eor	r25, r25
    5600:	80 b5       	in	r24, 0x20	; 32
    5602:	08 95       	ret

00005604 <eeprom_read_word>:
    5604:	a8 e1       	ldi	r26, 0x18	; 24
    5606:	b0 e0       	ldi	r27, 0x00	; 0
    5608:	42 e0       	ldi	r20, 0x02	; 2
    560a:	50 e0       	ldi	r21, 0x00	; 0
    560c:	0c 94 1d 2b 	jmp	0x563a	; 0x563a <eeprom_read_blraw>

00005610 <eeprom_write_byte>:
    5610:	26 2f       	mov	r18, r22

00005612 <eeprom_write_r18>:
    5612:	f9 99       	sbic	0x1f, 1	; 31
    5614:	fe cf       	rjmp	.-4      	; 0x5612 <eeprom_write_r18>
    5616:	1f ba       	out	0x1f, r1	; 31
    5618:	92 bd       	out	0x22, r25	; 34
    561a:	81 bd       	out	0x21, r24	; 33
    561c:	20 bd       	out	0x20, r18	; 32
    561e:	0f b6       	in	r0, 0x3f	; 63
    5620:	f8 94       	cli
    5622:	fa 9a       	sbi	0x1f, 2	; 31
    5624:	f9 9a       	sbi	0x1f, 1	; 31
    5626:	0f be       	out	0x3f, r0	; 63
    5628:	01 96       	adiw	r24, 0x01	; 1
    562a:	08 95       	ret

0000562c <eeprom_write_word>:
    562c:	0e 94 08 2b 	call	0x5610	; 0x5610 <eeprom_write_byte>
    5630:	27 2f       	mov	r18, r23
    5632:	0c 94 09 2b 	jmp	0x5612	; 0x5612 <eeprom_write_r18>

00005636 <eeprom_read_block>:
    5636:	dc 01       	movw	r26, r24
    5638:	cb 01       	movw	r24, r22

0000563a <eeprom_read_blraw>:
    563a:	fc 01       	movw	r30, r24
    563c:	f9 99       	sbic	0x1f, 1	; 31
    563e:	fe cf       	rjmp	.-4      	; 0x563c <eeprom_read_blraw+0x2>
    5640:	06 c0       	rjmp	.+12     	; 0x564e <eeprom_read_blraw+0x14>
    5642:	f2 bd       	out	0x22, r31	; 34
    5644:	e1 bd       	out	0x21, r30	; 33
    5646:	f8 9a       	sbi	0x1f, 0	; 31
    5648:	31 96       	adiw	r30, 0x01	; 1
    564a:	00 b4       	in	r0, 0x20	; 32
    564c:	0d 92       	st	X+, r0
    564e:	41 50       	subi	r20, 0x01	; 1
    5650:	50 40       	sbci	r21, 0x00	; 0
    5652:	b8 f7       	brcc	.-18     	; 0x5642 <eeprom_read_blraw+0x8>
    5654:	08 95       	ret

00005656 <_exit>:
    5656:	f8 94       	cli

00005658 <__stop_program>:
    5658:	ff cf       	rjmp	.-2      	; 0x5658 <__stop_program>
